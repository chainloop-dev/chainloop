apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chainloop.controlplane.fullname" . }}
  labels:
    {{- include "chainloop.controlplane.labels" . | nindent 4 }}
spec:
  {{- if not .Values.controlplane.autoscaling.enabled }}
  replicas: {{ .Values.controlplane.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "chainloop.controlplane.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/controlplane" "/config.configmap.yaml") . | sha256sum }}
        checksum/secret-config: {{ include (print $.Template.BasePath "/controlplane" "/config.secret.yaml") . | sha256sum }}
        checksum/cas-private-key: {{ include (print $.Template.BasePath "/controlplane" "/jwt_cas_private_key.secret.yaml") . | sha256sum }}
        kubectl.kubernetes.io/default-container: controlplane
      labels:
        {{- include "chainloop.controlplane.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.controlplane.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "controlplane.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.controlplane.podSecurityContext | nindent 8 }}
      containers:
        {{ if .Values.controlplane.sqlProxy.enabled }}
        - name: cloud-sql-proxy
          # It is recommended to use the latest version of the Cloud SQL proxy
          # Make sure to update on a regular schedule!
          image: gcr.io/cloudsql-docker/gce-proxy:1.28.0 # make sure the use the latest version
          command:
            - "/cloud_sql_proxy"
            # If connecting from a VPC-native GKE cluster, you can use the
            # following flag to have the proxy connect over private IP
            # - "-ip_address_types=PRIVATE"

            # By default, the proxy will write all logs to stderr. In some
            # environments, anything printed to stderr is consider an error. To
            # disable this behavior and write all logs to stdout (except errors
            # which will still go to stderr), use:
            - "-log_debug_stdout"
            - "-instances={{ .Values.controlplane.sqlProxy.connectionName }}=tcp:5432"
          securityContext:
            runAsNonRoot: true
          resources:
            {{- toYaml .Values.controlplane.sqlProxy.resources | nindent 12 }}
        {{- end }}
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.controlplane.securityContext | nindent 12 }}
          image: "{{ .Values.controlplane.image.repository }}:{{ .Values.controlplane.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.controlplane.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
            - name: metrics
              containerPort: 5000
              protocol: TCP
            - name: grpc
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /statusz
              port: http
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /statusz?readiness=1
              port: http
            periodSeconds: 5
          resources:
            {{- toYaml .Values.controlplane.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /data/conf
            - name: tmp
              mountPath: /tmp
            - name: jwt-cas-private-key
              mountPath: /secrets
            {{- if .Values.controlplane.tlsConfig.secret.name  }}
            - name: server-certs
              mountPath: /data/server-certs
            {{- end }}
            {{- if eq "gcpSecretManager" .Values.secretsBackend.backend  }}
            - name: gcp-secretmanager-serviceaccountkey
              mountPath: /gcp-secrets
            {{- end }}
      volumes:
        - name: config
          projected:
            sources:
            - secret:
                name: {{ include "chainloop.controlplane.fullname" . }}
            - configMap:
               name: {{ include "chainloop.controlplane.fullname" . }}
        # required for the plugins to store the socket files
        - name: tmp
          emptyDir: {}
        - name: jwt-cas-private-key
          secret:
            secretName: {{ include "chainloop.controlplane.fullname" . }}-jwt-cas
        {{- if .Values.controlplane.tlsConfig.secret.name  }}
        - name: server-certs
          secret:
            secretName: {{ .Values.controlplane.tlsConfig.secret.name  }}
        {{- end }}
        {{- if eq "gcpSecretManager" .Values.secretsBackend.backend  }}
        - name: gcp-secretmanager-serviceaccountkey
          secret:
            secretName: {{ include "chainloop.controlplane.fullname" . }}-gcp-secretmanager-serviceaccountkey
        {{- end }}