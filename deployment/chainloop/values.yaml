## Default values for Chainloop Helm Chart

## @skip global
global: {}

## @section Common parameters
##
## @param kubeVersion Override Kubernetes version
##
kubeVersion: ""

## @param development Deploys Chainloop pre-configured FOR DEVELOPMENT ONLY. It includes a Vault instance in development mode and pre-configured authentication certificates and passphrases
##
development: false

## @param GKEMonitoring.enabled Enable GKE podMonitoring (monitoring.googleapis.com/v1) to scrape the controlplane and CAS prometheus endpoints
GKEMonitoring:
  enabled: false

## @section Secrets Backend
##

## Location where to store sensitive data. If development.true? and no overrides provided, the setup will connect to a development instance of Vault
secrets_backend:
  ## @param secrets_backend.backend Secrets backend type ("vault" or "aws_secret_manager") 
  ##
  backend: "vault" # "aws_secret_manager"
  ## @param secrets_backend.secret_prefix Prefix that will be pre-pended to all secrets in the storage backend
  ##
  secret_prefix: "chainloop"

  # Either vault or AWS secret manager enabled at the same time
  ## @extra secrets_backend.vault.address Vault address
  ## @extra secrets_backend.vault.token Vault authentication token
  ##
  # vault:
  #   address: ""
  #   token: ""

  ## @extra secrets_backend.aws_secret_manager.access_key AWS Access KEY ID
  ## @extra secrets_backend.aws_secret_manager.secret_key AWS Secret Key
  ## @extra secrets_backend.aws_secret_manager.region AWS Secret Manager Region
  ##
  # aws_secret_manager:
  #   access_key: ""
  #   secret_key: ""
  #   region: ""

## @section Authentication
##

## ECDSA (ES512) key-pair used for Controlplane <-> CAS Authentication key-pair
## The controlplane will use the private key to generate a JWT at user request
## The CAS will use the public key to verify the authenticity of that token
## If development=true is set, a development key will be configured automatically
## otherwise you'll need to provide new keys via .Values.casJWTPrivateKey and .Values.cas.casJWTPublicKey

## @param casJWTPrivateKey ECDSA (ES512) private Key used for Controlplane <-> CAS Authentication
##
## To generate one
## openssl ecparam -name secp521r1 -genkey -noout -out private.ec.key
## casJWTPrivateKey: |-
##   -----BEGIN EC PRIVATE KEY-----
##   -----END EC PRIVATE KEY-----
##
casJWTPrivateKey: ""

## @param casJWTPublicKey ECDSA (ES512) public key
##
# openssl ec -in private.ec.key -pubout -out public.pem
# casJWTPublicKey: |
#   -----BEGIN PUBLIC KEY-----
#   -----END PUBLIC KEY-----
casJWTPublicKey: ""

## @section Control Plane
###################################
##          CONTROL PLANE         #    
###################################
controlplane:
  ## @param controlplane.replicaCount Number of replicas
  replicaCount: 2

  ## @param controlplane.image.repository FQDN uri for the image
  ## @extra controlplane.image.tag Image tag (immutable tags are recommended). If no set chart.appVersion will be used
  image:
    repository: ghcr.io/chainloop-dev/chainloop/control-plane
    # Overrides the image tag whose default is the chart appVersion.
    # tag: latest

  ## @skip controlplane.serviceAccount
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  ## @section Control Plane Database

  ## External PostgreSQL configuration
  ## All of these values are only used when postgresql.enabled is set to false
  ## @param controlplane.externalDatabase.host Database host
  ## @param controlplane.externalDatabase.port Database port number
  ## @param controlplane.externalDatabase.user Non-root username
  ## @param controlplane.externalDatabase.database Database name
  ## @param controlplane.externalDatabase.password Password for the non-root username
  ##
  externalDatabase:
    host: ""
    port: 5432
    user: ""
    database: ""
    password: ""

  sqlProxy:
    ## @param controlplane.sqlProxy.enabled Enable sidecar to connect to DB via Google Cloud SQL proxy
    enabled: false
    ## @param controlplane.sqlProxy.connectionName Google Cloud SQL connection name 
    connectionName: ""
    ## @param controlplane.sqlProxy.resources Sidecar container resources
    resources: {}

  ## @section Control Plane Authentication
  auth:
    ## @param controlplane.auth.passphrase Passphrase used to sign the Auth Tokens generated by the controlplane. Leave empty for auto-generation
    ##
    passphrase: ""

    ## @param controlplane.auth.oidc.url Full authentication path, it should match the issuer URL of the Identity provider (IDp)
    ## @param controlplane.auth.oidc.client_id  OIDC IDp client_id
    ## @param controlplane.auth.oidc.client_secret  OIDC IDp client_secret
    ## @param controlplane.auth.redirect_url_scheme Schema that will be used during authentication
    oidc:
      url: ""
      client_id: ""
      client_secret: ""
    # TODO: look into automatically inference https://github.com/chainloop-dev/chainloop/issues/61
    redirect_url_scheme: "https"
 
  ## @section Control Plane Networking
  service:
    ## @param controlplane.service.type Service type
    type: ClusterIP
    ## @param controlplane.service.port Service port
    port: 80
    ## @param controlplane.service.targetPort Service target Port
    targetPort: http
    ## @extra controlplane.service.nodePorts.http Node port for HTTP. NOTE: choose port between <30000-32767>
    # nodePorts:
    #   http: "30800"

  serviceAPI:
    ## @param controlplane.serviceAPI.type Service type
    type: ClusterIP
    ## @param controlplane.serviceAPI.port Service port
    port: 80
    ## @param controlplane.serviceAPI.targetPort Service target Port
    targetPort: grpc
    ## @extra controlplane.serviceAPI.annotations Service annotations
    annotations:
      ## @skip controlplane.serviceAPI.annotations.traefik.ingress.kubernetes.io/service.serversscheme
      traefik.ingress.kubernetes.io/service.serversscheme: h2c

    ## @extra controlplane.serviceAPI.nodePorts.http Node port for HTTP. NOTE: choose port between <30000-32767>
    # nodePorts:
    #   http: "30900"

  ingress:
    ## @param controlplane.ingress.enabled Resource enabled
    enabled: false
    ## @param controlplane.ingress.className IngressClass that will be be used
    className: ""
    ## @param controlplane.ingress.annotations Annotations
    annotations: {}
    ## @param controlplane.ingress.hosts HTTP hosts
    # hosts:
    #   - host: cp.dev.local
    #     paths:
    #       - path: /
    #         pathType: ImplementationSpecific
    hosts: []

    ## @param controlplane.ingress.tls TLS configuration ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## e.g:
    ## tls:
    ## - hosts:
    ##     - cp.dev.local
    ##   secretName: cp.local-tls
    tls: []

  ingressAPI:
    ## @param controlplane.ingressAPI.enabled Resource enabled
    enabled: false
    ## @param controlplane.ingressAPI.className IngressClass that will be be used
    className: ""
    ## @param controlplane.ingressAPI.annotations Annotations
    annotations: {}

    ## @param controlplane.ingressAPI.hosts HTTP hosts
    # hosts:
    #   - host: api.cp.dev.local
    #     paths:
    #       - path: /
    #         pathType: ImplementationSpecific
    hosts: []

    ## @param controlplane.ingressAPI.tls TLS configuration ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## e.g:
    ## tls:
    ## - hosts:
    ##     - cp.dev.local
    ##   secretName: cp.local-tls
    tls: []

  ## @section Controlplane Misc

  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ## @param controlplane.resources.limits Container resource limits
  ## @param controlplane.resources.requests Container resource requests
  resources:
    limits: {}
    requests: {}

  ## Deployment autoscaling
  ## @param controlplane.autoscaling.enabled Enable deployment autoscaling
  ## @param controlplane.autoscaling.minReplicas Minimum number of replicas
  ## @param controlplane.autoscaling.maxReplicas Maximum number of replicas
  ## @param controlplane.autoscaling.targetCPUUtilizationPercentage Target CPU percentage
  ## @param controlplane.autoscaling.targetMemoryUtilizationPercentage Target CPU memory
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
 
## @section Artifact Content Addressable (CAS) API
##################################
#         Artifacts CAS          #    
##################################
cas:
  ## @param cas.replicaCount Number of replicas
  replicaCount: 2

  ## @param cas.image.repository FQDN uri for the image
  ## @extra cas.image.tag Image tag (immutable tags are recommended). If no set chart.appVersion will be used
  image:
    repository: ghcr.io/chainloop-dev/chainloop/artifact-cas
    # Overrides the image tag whose default is the chart appVersion.
    # tag: latest

  ## @skip cas.serviceAccount
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  ## @section CAS Networking
  serviceAPI:
    ## @param cas.serviceAPI.type Service type
    type: ClusterIP
    ## @param cas.serviceAPI.port Service port
    port: 80
    ## @param cas.serviceAPI.targetPort Service target Port
    targetPort: grpc
    ## @extra cas.serviceAPI.annotations Service annotations
    annotations:
      ## @skip cas.serviceAPI.annotations.traefik.ingress.kubernetes.io/service.serversscheme
      traefik.ingress.kubernetes.io/service.serversscheme: h2c

    ## @extra cas.serviceAPI.nodePorts.http Node port for HTTP. NOTE: choose port between <30000-32767>
    # nodePorts:
    #   http: "30901"


  ingressAPI:
    ## @param cas.ingressAPI.enabled Resource enabled
    enabled: false
    ## @param cas.ingressAPI.className IngressClass that will be be used
    className: ""
    ## @param cas.ingressAPI.annotations Annotations
    annotations: {}

    ## @param cas.ingressAPI.hosts HTTP hosts
    # hosts:
    #   - host: api.cas.dev.local
    #     paths:
    #       - path: /
    #         pathType: ImplementationSpecific
    hosts: []

    ## @param cas.ingressAPI.tls TLS configuration ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## e.g:
    ## tls:
    ## - hosts:
    ##     - api.cas.dev.local
    ##   secretName: cas.local-tls
    tls: []

  ## @section CAS Misc
  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ## @param cas.resources.limits Container resource limits
  ## @param cas.resources.requests Container resource requests
  resources:
    limits: {}
    requests: {}

  ## Deployment autoscaling
  ## @param cas.autoscaling.enabled Enable deployment autoscaling
  ## @param cas.autoscaling.minReplicas Minimum number of replicas
  ## @param cas.autoscaling.maxReplicas Maximum number of replicas
  ## @param cas.autoscaling.targetCPUUtilizationPercentage Target CPU percentage
  ## @param cas.autoscaling.targetMemoryUtilizationPercentage Target CPU memory
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

## @section Dependencies 
# ##################################
# #          Dependencies          #   
# ##################################

## PostgreSQL chart configuration
## ref: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml
## @param postgresql.enabled Switch to enable or disable the PostgreSQL helm chart
## @param postgresql.auth.enablePostgresUser Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
## @param postgresql.auth.username Name for a custom user to create
## @param postgresql.auth.password Password for the custom user to create
## @param postgresql.auth.database Name for a custom database to create
## @param postgresql.auth.existingSecret Name of existing secret to use for PostgreSQL credentials
postgresql:
  enabled: true
  auth:
    enablePostgresUser: false
    username: "chainloop"
    password: "chainlooppwd"
    database: "chainloop-cp"
    existingSecret: ""


# Vault server running in development mode --set development=true
# IMPORTANT: This is not meant to run in production

## Hashicorp Vault chart configuration
## ref: https://github.com/hashicorp/vault-helm/blob/main/values.yaml
## @param vault.server.dev.enabled Enable development mode (unsealed, in-memory, insecure)
## @param vault.server.dev.devRootToken Connection token
vault:
  server:
    dev:
      enabled: true
      devRootToken: "notapassword"