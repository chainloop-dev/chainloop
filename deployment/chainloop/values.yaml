# Default values for Chainloop.

global:
  ## @param global.kubeVersion Override Kubernetes version
  kubeVersion: ""

# development="true" deploys Chainloop pre-configured FOR DEVELOPMENT ONLY which includes
# - Vault instance in development mode
# - Authentication certificates and passphrases for Controlplane <-> CAS communication
development: false

# Location where to store sensitive data such as third-party integration tokens i.e OCI registry credentials
# If development=true and no value is changed here, the setup will connect to a development instance of Vault
secrets_backend:
  # By default we will connect to the local development instance of vault
  backend: "vault" # "aws_secret_manager"
  secret_prefix: "chainloop-devel"

  # Either vault or AWS secret manager enabled at the same time
  # vault:
  #   address: ""
  #   token: ""

  # aws_secret_manager:
  #   access_key: ""
  #   secret_key: ""
  #   region: ""


# ES512 key-pair used for Controlplane <-> CAS Authentication key-pair
# The controlplane will use the private key to generate a JWT at user request
# The CAS will use the public key to verify the authenticity of that token
# If development=true is set, a development key will be configured automatically
# otherwise you'll need to provide new keys via .Values.casJWTPrivateKey and .Values.cas.casJWTPublicKey

# To generate one
# openssl ecparam -name secp521r1 -genkey -noout -out private.ec.key
# casJWTPrivateKey: |-
#   -----BEGIN EC PRIVATE KEY-----
#   -----END EC PRIVATE KEY-----
#

# openssl ec -in private.ec.key -pubout -out public.pem
# casJWTPublicKey: |
#   -----BEGIN PUBLIC KEY-----
#   -----END PUBLIC KEY-----

##################################
#          CONTROL PLANE         #    
##################################
controlplane:
  replicaCount: 2

  image:
    repository: ghcr.io/chainloop-dev/chainloop/control-plane
    # Overrides the image tag whose default is the chart appVersion.
    # tag: latest

  # Connect to an external database already provisioned
  # NOTE: For these settings to take effect, you need to disable the built-int database 
  # --set postgresql.enabled=false
  externalDatabase:
    host: ""
    port: 5432
    user: ""
    database: ""
    password: ""

  auth:
    # Key used to sign the JWTs generated by the controlplane as part of the robot-accounts
    # leave empty for auto-generation
    jwt_hmac_secret: ""

    oidc:
      # Full authentication path, it should match the issuer URL of the IDp
      url: ""
      client_id: ""
      client_secret: ""
    # TODO: look into automatically inference https://github.com/chainloop-dev/chainloop/issues/61
    redirect_url_scheme: "https"
 
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  service:
    type: ClusterIP
    port: 80
    targetPort: http
    ## Node ports to expose
    ## @param service.web.nodePorts.http Node port for HTTP
    ## NOTE: choose port between <30000-32767>
    # nodePorts:
    #   http: "30800"

  serviceAPI:
    type: ClusterIP
    port: 80
    targetPort: grpc
    annotations:
      # k3s local setup
      traefik.ingress.kubernetes.io/service.serversscheme: h2c

    ## Node ports to expose
    ## @param service.web.nodePorts.http Node port for HTTP
    ## NOTE: choose port between <30000-32767>
    # nodePorts:
    #   http: "30900"

  ingressHTTP:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: cp.dev.local
        paths:
          - path: /
            pathType: ImplementationSpecific

  ingressAPI:
    enabled: false
    className: ""
    annotations: {}

    hosts:
      - host: api.cp.dev.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # Enable this if you want to use a Google Cloud SQL proxy
  sqlProxy:
    enabled: false

  resources: {}

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

##################################
#         Artifacts CAS          #    
##################################
cas:
  replicaCount: 2
  image:
    repository: ghcr.io/chainloop-dev/chainloop/artifact-cas
    # Overrides the image tag whose default is the chart appVersion.
    # tag: latest

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  service:
    type: ClusterIP
    port: 80
    targetPort: http
    ## Node ports to expose
    ## @param service.web.nodePorts.http Node port for HTTP
    ## NOTE: choose port between <30000-32767>
    # nodePorts:
    #   http: "30900"

  serviceAPI:
    type: ClusterIP
    port: 80
    targetPort: grpc
    annotations:
      traefik.ingress.kubernetes.io/service.serversscheme: h2c
    ## Node ports to expose
    ## @param service.web.nodePorts.http Node port for HTTP
    ## NOTE: choose port between <30000-32767>
    # nodePorts:
    #   http: "30901"

  ingressHTTP:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: cas.dev.local
        paths:
          - path: /
            pathType: ImplementationSpecific

  ingressAPI:
    enabled: false
    className: ""
    annotations: {}

    hosts:
      - host: api.cas.dev.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    # targetMemoryUtilizationPercentage: 80

##################################
#          Dependencies          #   
##################################

postgresql:
  enabled: true
  auth:
    username: "chainloop"
    password: "chainlooppwd"
    database: "chainloop-cp"

##################################
#           Development          #
##################################

# Vault server running in development mode --set development=true
# IMPORTANT: This is not meant to run in production
vault:
  server:
    dev:
      enabled: true
      devRootToken: "notapassword"

##################################
#           Misc Common          #
##################################

GKEMonitoring:
  enabled: false
