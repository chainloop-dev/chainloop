# Copyright 2024 The Chainloop Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: workflowcontract.chainloop.dev/v1
kind: Policy
metadata:
  name: cyclonedx-banned-packages
  description: Checks that there are no banned packages in the SBOM.
  annotations:
    category: sbom
spec:
  policies:
    - kind: SBOM_CYCLONEDX_JSON
      embedded: |
        package main
        
        import rego.v1
        
        ################################
        # Common section do NOT change #
        ################################
        
        result := {
          "skipped": skipped,
          "violations": violations,
          "skip_reason": skip_reason,
        }
        
        default skip_reason := ""
        
        skip_reason := m if {
          not valid_input
          m := "the file content is not recognized"
        }
        
        default skipped := true
        
        skipped := false if valid_input
        
        ########################################
        # EO Common section, custom code below #
        ########################################
        
        # TODO: update to validate if the file is expected, i.e checking the tool that generates it
        valid_input := true
        
        # It supports packages with version. When specified, requires it to be semver, and would also fail when version is lower
        banned_packages := ["log4j@2.14.1"]
    
        # all versions
        violations contains ref if {
          some comp in input.components
          some banned in banned_packages
          nv := split(banned, "@")
          not nv[1]
          comp.name == nv[0]
          ref := sprintf("Banned package: %v", [comp.name])
        }
    
        # specific versions
        violations contains ref if {
          some comp in input.components
          some banned banned_packages
          nv := split(banned, "@")
          comp.name == nv[0]
          result := semver.compare(comp.version, nv[1])
          result <= 0
          ref := sprintf("Banned package: %v %v", [comp.name, comp.version])
        }
