//
// Copyright 2023 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/chainloop-dev/chainloop/app/artifact-cas/api/cas/v1"
	mock "github.com/stretchr/testify/mock"
)

// Describer is an autogenerated mock type for the Describer type
type Describer struct {
	mock.Mock
}

// Describe provides a mock function with given fields: ctx, digest
func (_m *Describer) Describe(ctx context.Context, digest string) (*v1.CASResource, error) {
	ret := _m.Called(ctx, digest)

	var r0 *v1.CASResource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1.CASResource, error)); ok {
		return rf(ctx, digest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.CASResource); ok {
		r0 = rf(ctx, digest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.CASResource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, digest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDescriber interface {
	mock.TestingT
	Cleanup(func())
}

// NewDescriber creates a new instance of Describer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDescriber(t mockConstructorTestingTNewDescriber) *Describer {
	mock := &Describer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
