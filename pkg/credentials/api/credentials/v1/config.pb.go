//
// Copyright 2024 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: credentials/v1/config.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Where the credentials to access the backends are stored
type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Backend:
	//
	//	*Credentials_AwsSecretManager
	//	*Credentials_Vault_
	//	*Credentials_GcpSecretManager
	//	*Credentials_AzureKeyVault_
	Backend isCredentials_Backend `protobuf_oneof:"backend"`
	// prefix used while writing a new secret
	SecretPrefix string `protobuf:"bytes,4,opt,name=secret_prefix,json=secretPrefix,proto3" json:"secret_prefix,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentials_v1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_credentials_v1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_credentials_v1_config_proto_rawDescGZIP(), []int{0}
}

func (m *Credentials) GetBackend() isCredentials_Backend {
	if m != nil {
		return m.Backend
	}
	return nil
}

func (x *Credentials) GetAwsSecretManager() *Credentials_AWSSecretManager {
	if x, ok := x.GetBackend().(*Credentials_AwsSecretManager); ok {
		return x.AwsSecretManager
	}
	return nil
}

func (x *Credentials) GetVault() *Credentials_Vault {
	if x, ok := x.GetBackend().(*Credentials_Vault_); ok {
		return x.Vault
	}
	return nil
}

func (x *Credentials) GetGcpSecretManager() *Credentials_GCPSecretManager {
	if x, ok := x.GetBackend().(*Credentials_GcpSecretManager); ok {
		return x.GcpSecretManager
	}
	return nil
}

func (x *Credentials) GetAzureKeyVault() *Credentials_AzureKeyVault {
	if x, ok := x.GetBackend().(*Credentials_AzureKeyVault_); ok {
		return x.AzureKeyVault
	}
	return nil
}

func (x *Credentials) GetSecretPrefix() string {
	if x != nil {
		return x.SecretPrefix
	}
	return ""
}

type isCredentials_Backend interface {
	isCredentials_Backend()
}

type Credentials_AwsSecretManager struct {
	AwsSecretManager *Credentials_AWSSecretManager `protobuf:"bytes,1,opt,name=aws_secret_manager,json=awsSecretManager,proto3,oneof"`
}

type Credentials_Vault_ struct {
	Vault *Credentials_Vault `protobuf:"bytes,2,opt,name=vault,proto3,oneof"`
}

type Credentials_GcpSecretManager struct {
	GcpSecretManager *Credentials_GCPSecretManager `protobuf:"bytes,3,opt,name=gcp_secret_manager,json=gcpSecretManager,proto3,oneof"`
}

type Credentials_AzureKeyVault_ struct {
	AzureKeyVault *Credentials_AzureKeyVault `protobuf:"bytes,5,opt,name=azure_key_vault,json=azureKeyVault,proto3,oneof"`
}

func (*Credentials_AwsSecretManager) isCredentials_Backend() {}

func (*Credentials_Vault_) isCredentials_Backend() {}

func (*Credentials_GcpSecretManager) isCredentials_Backend() {}

func (*Credentials_AzureKeyVault_) isCredentials_Backend() {}

// Top level is deprecated now
type Credentials_AWSSecretManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Creds  *Credentials_AWSSecretManager_Creds `protobuf:"bytes,1,opt,name=creds,proto3" json:"creds,omitempty"`
	Region string                              `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *Credentials_AWSSecretManager) Reset() {
	*x = Credentials_AWSSecretManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentials_v1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials_AWSSecretManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials_AWSSecretManager) ProtoMessage() {}

func (x *Credentials_AWSSecretManager) ProtoReflect() protoreflect.Message {
	mi := &file_credentials_v1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials_AWSSecretManager.ProtoReflect.Descriptor instead.
func (*Credentials_AWSSecretManager) Descriptor() ([]byte, []int) {
	return file_credentials_v1_config_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Credentials_AWSSecretManager) GetCreds() *Credentials_AWSSecretManager_Creds {
	if x != nil {
		return x.Creds
	}
	return nil
}

func (x *Credentials_AWSSecretManager) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type Credentials_Vault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: Use application role auth instead
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Instance address, including port
	// i.e "http://127.0.0.1:8200"
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// mount path of the kv engine, default /secret
	MountPath string `protobuf:"bytes,3,opt,name=mount_path,json=mountPath,proto3" json:"mount_path,omitempty"`
}

func (x *Credentials_Vault) Reset() {
	*x = Credentials_Vault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentials_v1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials_Vault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials_Vault) ProtoMessage() {}

func (x *Credentials_Vault) ProtoReflect() protoreflect.Message {
	mi := &file_credentials_v1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials_Vault.ProtoReflect.Descriptor instead.
func (*Credentials_Vault) Descriptor() ([]byte, []int) {
	return file_credentials_v1_config_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Credentials_Vault) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Credentials_Vault) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Credentials_Vault) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

type Credentials_GCPSecretManager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// project number
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// path to service account key in json format
	ServiceAccountKey string `protobuf:"bytes,2,opt,name=service_account_key,json=serviceAccountKey,proto3" json:"service_account_key,omitempty"`
}

func (x *Credentials_GCPSecretManager) Reset() {
	*x = Credentials_GCPSecretManager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentials_v1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials_GCPSecretManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials_GCPSecretManager) ProtoMessage() {}

func (x *Credentials_GCPSecretManager) ProtoReflect() protoreflect.Message {
	mi := &file_credentials_v1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials_GCPSecretManager.ProtoReflect.Descriptor instead.
func (*Credentials_GCPSecretManager) Descriptor() ([]byte, []int) {
	return file_credentials_v1_config_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Credentials_GCPSecretManager) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Credentials_GCPSecretManager) GetServiceAccountKey() string {
	if x != nil {
		return x.ServiceAccountKey
	}
	return ""
}

type Credentials_AzureKeyVault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Active Directory Tenant ID
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Registered application / service principal client ID
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Registered application / service principal client secret
	ClientSecret string `protobuf:"bytes,3,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// Azure Key Vault URL
	VaultUri string `protobuf:"bytes,4,opt,name=vault_uri,json=vaultUri,proto3" json:"vault_uri,omitempty"`
}

func (x *Credentials_AzureKeyVault) Reset() {
	*x = Credentials_AzureKeyVault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentials_v1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials_AzureKeyVault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials_AzureKeyVault) ProtoMessage() {}

func (x *Credentials_AzureKeyVault) ProtoReflect() protoreflect.Message {
	mi := &file_credentials_v1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials_AzureKeyVault.ProtoReflect.Descriptor instead.
func (*Credentials_AzureKeyVault) Descriptor() ([]byte, []int) {
	return file_credentials_v1_config_proto_rawDescGZIP(), []int{0, 3}
}

func (x *Credentials_AzureKeyVault) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Credentials_AzureKeyVault) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Credentials_AzureKeyVault) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *Credentials_AzureKeyVault) GetVaultUri() string {
	if x != nil {
		return x.VaultUri
	}
	return ""
}

type Credentials_AWSSecretManager_Creds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey string `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (x *Credentials_AWSSecretManager_Creds) Reset() {
	*x = Credentials_AWSSecretManager_Creds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_credentials_v1_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials_AWSSecretManager_Creds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials_AWSSecretManager_Creds) ProtoMessage() {}

func (x *Credentials_AWSSecretManager_Creds) ProtoReflect() protoreflect.Message {
	mi := &file_credentials_v1_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials_AWSSecretManager_Creds.ProtoReflect.Descriptor instead.
func (*Credentials_AWSSecretManager_Creds) Descriptor() ([]byte, []int) {
	return file_credentials_v1_config_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Credentials_AWSSecretManager_Creds) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *Credentials_AWSSecretManager_Creds) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

var File_credentials_v1_config_proto protoreflect.FileDescriptor

var file_credentials_v1_config_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x07, 0x0a, 0x0b, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x5c, 0x0a, 0x12, 0x61, 0x77,
	0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x61, 0x77, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x5c, 0x0a, 0x12, 0x67, 0x63, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x47, 0x43, 0x50,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x10, 0x67, 0x63, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x53, 0x0a, 0x0f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x1a, 0xde, 0x01, 0x0a, 0x10,
	0x41, 0x57, 0x53, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x50, 0x0a, 0x05, 0x63, 0x72, 0x65, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x41, 0x57, 0x53,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x63, 0x72, 0x65,
	0x64, 0x73, 0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x1a, 0x57, 0x0a, 0x05, 0x43, 0x72, 0x65, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x1a, 0x68, 0x0a, 0x05,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x1a, 0x6a, 0x0a, 0x10, 0x47, 0x43, 0x50, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x1a, 0xb0, 0x01, 0x0a, 0x0d, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x25,
	0x0a, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x90, 0x01, 0x01, 0x52, 0x08, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x55, 0x72, 0x69, 0x42, 0x10, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x42, 0x4f, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6c, 0x6f, 0x6f, 0x70, 0x2d,
	0x64, 0x65, 0x76, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6c, 0x6f, 0x6f, 0x70, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_credentials_v1_config_proto_rawDescOnce sync.Once
	file_credentials_v1_config_proto_rawDescData = file_credentials_v1_config_proto_rawDesc
)

func file_credentials_v1_config_proto_rawDescGZIP() []byte {
	file_credentials_v1_config_proto_rawDescOnce.Do(func() {
		file_credentials_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_credentials_v1_config_proto_rawDescData)
	})
	return file_credentials_v1_config_proto_rawDescData
}

var file_credentials_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_credentials_v1_config_proto_goTypes = []interface{}{
	(*Credentials)(nil),                        // 0: credentials.v1.Credentials
	(*Credentials_AWSSecretManager)(nil),       // 1: credentials.v1.Credentials.AWSSecretManager
	(*Credentials_Vault)(nil),                  // 2: credentials.v1.Credentials.Vault
	(*Credentials_GCPSecretManager)(nil),       // 3: credentials.v1.Credentials.GCPSecretManager
	(*Credentials_AzureKeyVault)(nil),          // 4: credentials.v1.Credentials.AzureKeyVault
	(*Credentials_AWSSecretManager_Creds)(nil), // 5: credentials.v1.Credentials.AWSSecretManager.Creds
}
var file_credentials_v1_config_proto_depIdxs = []int32{
	1, // 0: credentials.v1.Credentials.aws_secret_manager:type_name -> credentials.v1.Credentials.AWSSecretManager
	2, // 1: credentials.v1.Credentials.vault:type_name -> credentials.v1.Credentials.Vault
	3, // 2: credentials.v1.Credentials.gcp_secret_manager:type_name -> credentials.v1.Credentials.GCPSecretManager
	4, // 3: credentials.v1.Credentials.azure_key_vault:type_name -> credentials.v1.Credentials.AzureKeyVault
	5, // 4: credentials.v1.Credentials.AWSSecretManager.creds:type_name -> credentials.v1.Credentials.AWSSecretManager.Creds
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_credentials_v1_config_proto_init() }
func file_credentials_v1_config_proto_init() {
	if File_credentials_v1_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_credentials_v1_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentials_v1_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials_AWSSecretManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentials_v1_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials_Vault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentials_v1_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials_GCPSecretManager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentials_v1_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials_AzureKeyVault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_credentials_v1_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials_AWSSecretManager_Creds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_credentials_v1_config_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Credentials_AwsSecretManager)(nil),
		(*Credentials_Vault_)(nil),
		(*Credentials_GcpSecretManager)(nil),
		(*Credentials_AzureKeyVault_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_credentials_v1_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_credentials_v1_config_proto_goTypes,
		DependencyIndexes: file_credentials_v1_config_proto_depIdxs,
		MessageInfos:      file_credentials_v1_config_proto_msgTypes,
	}.Build()
	File_credentials_v1_config_proto = out.File
	file_credentials_v1_config_proto_rawDesc = nil
	file_credentials_v1_config_proto_goTypes = nil
	file_credentials_v1_config_proto_depIdxs = nil
}
