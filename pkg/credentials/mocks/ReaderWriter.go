// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ReaderWriter is an autogenerated mock type for the ReaderWriter type
type ReaderWriter struct {
	mock.Mock
}

// DeleteCredentials provides a mock function with given fields: ctx, credID
func (_m *ReaderWriter) DeleteCredentials(ctx context.Context, credID string) error {
	ret := _m.Called(ctx, credID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, credID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadCredentials provides a mock function with given fields: ctx, secretName, _a2
func (_m *ReaderWriter) ReadCredentials(ctx context.Context, secretName string, _a2 interface{}) error {
	ret := _m.Called(ctx, secretName, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, secretName, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCredentials provides a mock function with given fields: ctx, org, _a2
func (_m *ReaderWriter) SaveCredentials(ctx context.Context, org string, _a2 interface{}) (string, error) {
	ret := _m.Called(ctx, org, _a2)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (string, error)); ok {
		return rf(ctx, org, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) string); ok {
		r0 = rf(ctx, org, _a2)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, org, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReaderWriter interface {
	mock.TestingT
	Cleanup(func())
}

// NewReaderWriter creates a new instance of ReaderWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReaderWriter(t mockConstructorTestingTNewReaderWriter) *ReaderWriter {
	mock := &ReaderWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
