// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	secretsmanager "github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	mock "github.com/stretchr/testify/mock"
)

// SecretsManagerIface is an autogenerated mock type for the SecretsManagerIface type
type SecretsManagerIface struct {
	mock.Mock
}

// CreateSecret provides a mock function with given fields: ctx, params, optFns
func (_m *SecretsManagerIface) CreateSecret(ctx context.Context, params *secretsmanager.CreateSecretInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.CreateSecretOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.CreateSecretOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.CreateSecretInput, ...func(*secretsmanager.Options)) (*secretsmanager.CreateSecretOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.CreateSecretInput, ...func(*secretsmanager.Options)) *secretsmanager.CreateSecretOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.CreateSecretOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.CreateSecretInput, ...func(*secretsmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSecret provides a mock function with given fields: ctx, params, optFns
func (_m *SecretsManagerIface) DeleteSecret(ctx context.Context, params *secretsmanager.DeleteSecretInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.DeleteSecretOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.DeleteSecretOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.DeleteSecretInput, ...func(*secretsmanager.Options)) (*secretsmanager.DeleteSecretOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.DeleteSecretInput, ...func(*secretsmanager.Options)) *secretsmanager.DeleteSecretOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.DeleteSecretOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.DeleteSecretInput, ...func(*secretsmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecretValue provides a mock function with given fields: ctx, params, optFns
func (_m *SecretsManagerIface) GetSecretValue(ctx context.Context, params *secretsmanager.GetSecretValueInput, optFns ...func(*secretsmanager.Options)) (*secretsmanager.GetSecretValueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *secretsmanager.GetSecretValueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.GetSecretValueInput, ...func(*secretsmanager.Options)) (*secretsmanager.GetSecretValueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *secretsmanager.GetSecretValueInput, ...func(*secretsmanager.Options)) *secretsmanager.GetSecretValueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secretsmanager.GetSecretValueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *secretsmanager.GetSecretValueInput, ...func(*secretsmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSecretsManagerIface interface {
	mock.TestingT
	Cleanup(func())
}

// NewSecretsManagerIface creates a new instance of SecretsManagerIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSecretsManagerIface(t mockConstructorTestingTNewSecretsManagerIface) *SecretsManagerIface {
	mock := &SecretsManagerIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
