//
// Copyright 2024 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package attestation.v1;

import "buf/validate/validate.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "workflowcontract/v1/crafting_schema.proto";

option go_package = "github.com/chainloop-dev/chainloop/pkg/attestation/crafter/api/attestation/v1";

message Attestation {
  google.protobuf.Timestamp initialized_at = 1 [(buf.validate.field).required = true];
  google.protobuf.Timestamp finished_at = 2;

  WorkflowMetadata workflow = 3 [(buf.validate.field).required = true];

  map<string, Material> materials = 4;
  // Annotations for the attestation
  map<string, string> annotations = 5 [(buf.validate.field).map.values.string.min_len = 1];

  message Material {
    oneof m {
      KeyVal string = 1;
      ContainerImage container_image = 2;
      Artifact artifact = 3;
      SBOMArtifact sbom_artifact = 4;
    }

    google.protobuf.Timestamp added_at = 5;
    workflowcontract.v1.CraftingSchema.Material.MaterialType material_type = 6;

    // Whether the material has been uploaded to the CAS
    bool uploaded_to_cas = 7;
    // If the material content has been injected inline in the attestation
    // leveraging a form of inline CAS
    bool inline_cas = 8;

    // Annotations for the material
    map<string, string> annotations = 9 [(buf.validate.field).map.values.string.min_len = 1];

    message KeyVal {
      string id = 1 [(buf.validate.field).string.min_len = 1];
      string value = 2 [(buf.validate.field).string.min_len = 1];

      string digest = 3 [(buf.validate.field).string.min_len = 1];
    }

    message ContainerImage {
      string id = 1 [(buf.validate.field).string.min_len = 1];
      string name = 2 [(buf.validate.field).string.min_len = 1];
      string digest = 3 [(buf.validate.field).string.min_len = 1];
      bool is_subject = 4;
      // provided tag
      string tag = 5;
      // Digest of the found signature for the image
      string signature_digest = 6;
      // The provider in charge of the signature
      string signature_provider = 7;
      // Base64 encoded signature payload, aka the OCI Signature Manifest
      string signature = 8;
      // Indicates if the image has the latest tag. The image being checked
      // might not explicitly have the latest tag, but it could also be tagged
      // with the latest tag.
      google.protobuf.BoolValue has_latest_tag = 9;
    }

    message Artifact {
      // ID of the artifact
      string id = 1 [(buf.validate.field).string.min_len = 1];
      // filename, use for record purposes
      string name = 2 [(buf.validate.field).string.min_len = 1];
      // the digest is enough to retrieve the artifact since it's stored in a CAS
      // which also has annotated the fileName
      string digest = 3 [(buf.validate.field).string.min_len = 1];
      bool is_subject = 4;
      // Inline content of the artifact.
      // This is optional and is used for small artifacts that can be stored inline in the attestation
      bytes content = 5;
    }

    message SBOMArtifact {
      // The actual SBOM artifact
      Artifact artifact = 1;
      // The Main component if any the SBOM is related to
      MainComponent main_component = 2;

      // The main component of the SBOM
      message MainComponent {
        // The name of the main component
        string name = 1;
        // The version of the main component
        string version = 2;
        // The kind of the main component
        string kind = 3;
      }
    }
  }

  // List of env variables
  map<string, string> env_vars = 6;
  string runner_url = 7;
  workflowcontract.v1.CraftingSchema.Runner.RunnerType runner_type = 8;

  // Head Commit of the environment where the attestation was executed (optional)
  Commit head = 9;

  // Policies that materials in this attestation were validated against
  repeated PolicyEvaluation policy_evaluations = 10;
}

// A policy executed against an attestation or material
message PolicyEvaluation {
  // The policy name from the policy spec
  string name = 1 [(buf.validate.field) = {
    cel: {
      message: "must contain only lowercase letters, numbers, and hyphens."
      expression: "this.matches('^[a-z0-9]([-a-z0-9]*[a-z0-9])?$')"
      id: "name.dns-1123"
    }
  }];

  string material_name = 2;

  // the body of the policy. This field will be empty if there is a FQDN reference to the policy
  string body = 3 [deprecated = true];

  // Base64 representation of run scripts. It might be empty if there is a FQDN reference to the policy
  repeated string sources = 12;

  // fully qualified reference to the policy
  // i.e
  // http://my-domain.com/foo.yaml
  // file://foo.yaml
  // chainloop://my-provider.com/foo@sha256:1234
  // NOTE: embedded policies will not have a reference
  // Deprecated: use policy_reference instead
  string reference_digest = 10 [deprecated=true];
  string reference_name = 11 [deprecated=true];

  string description = 5;
  map<string, string> annotations = 6;

  // The policy violations, if any
  repeated Violation violations = 4;

  // arguments, as they come from the policy attachment
  map<string, string> with = 7;

  // material type, if any, of the evaluated policy
  workflowcontract.v1.CraftingSchema.Material.MaterialType type = 8;

  // whether this evaluation was skipped or not (because of an invalid input, for example)
  bool skipped = 13;

  // Evaluation messages, intended to communicate evaluation errors (invalid input)
  repeated string skip_reasons = 14;

  // Group this evaluated policy belongs to, if any
  Reference policy_reference = 15;
  Reference group_reference = 16;

  // List of requirements this policy contributes to satisfy
  repeated string requirements = 17;

  message Violation {
    string subject = 1 [(buf.validate.field).required = true];
    string message = 2 [(buf.validate.field).required = true];
  }

  message Reference {
    string name = 1[(buf.validate.field) = {
      cel: {
        message: "must contain only lowercase letters, numbers, and hyphens."
        expression: "this.matches('^[a-z0-9]([-a-z0-9]*[a-z0-9])?$')"
        id: "name.dns-1123"
      }
    }];
    string digest = 2 [(buf.validate.field).string.min_len = 1];
    string uri = 3 [(buf.validate.field).string.min_len = 1];
    string org_name = 4;
  }
}

message Commit {
  string hash = 1 [(buf.validate.field).string.min_len = 1];
  // Commit authors might not include email i.e "Flux <>"
  string author_email = 2;
  string author_name = 3 [(buf.validate.field).string.min_len = 1];
  string message = 4 [(buf.validate.field).string.min_len = 1];
  google.protobuf.Timestamp date = 5;
  repeated Remote remotes = 6;
  string signature = 7;

  message Remote {
    string name = 1 [(buf.validate.field).string.min_len = 1];
    string url = 2 [(buf.validate.field).string.min_len = 1];
  }
}

// Intermediate information that will get stored in the system while the run is being executed
message CraftingState {
  workflowcontract.v1.CraftingSchema input_schema = 1;
  Attestation attestation = 2;
  bool dry_run = 3;
}

message WorkflowMetadata {
  string name = 1 [(buf.validate.field).string.min_len = 1];
  string project = 2;
  // kept for backwards compatibility with remote state storage
  string project_version = 9 [deprecated = true];
  // project version
  ProjectVersion version = 10;
  string team = 3;
  string workflow_id = 5 [(buf.validate.field).string.min_len = 1];
  string workflow_run_id = 6; // Not required since we might be doing a dry-run
  string schema_revision = 7 [(buf.validate.field).string.min_len = 1];
  // contract name (contract version is "schema_revision")
  string contract_name = 11 [(buf.validate.field).string.min_len = 1];
  // organization name
  string organization = 8 [(buf.validate.field).string.min_len = 1];
}
message ProjectVersion {
  string version = 1 [(buf.validate.field).string.min_len = 1];
  // if it's pre-release
  bool prerelease = 2;
  bool mark_as_released = 3;
}

// Proto representation of the in-toto v1 ResourceDescriptor.
// https://github.com/in-toto/attestation/blob/main/spec/v1/resource_descriptor.md
// Validation of all fields is left to the users of this proto.
message ResourceDescriptor {
  string name = 1;

  string uri = 2;

  map<string, string> digest = 3;

  bytes content = 4;

  string download_location = 5;

  string media_type = 6;

  // Per the Struct protobuf spec, this type corresponds to
  // a JSON Object, which is truly a map<string, Value> under the hood.
  // So, the Struct a) is still consistent with our specification for
  // the `annotations` field, and b) has native support in some language
  // bindings making their use easier in implementations.
  // See: https://pkg.go.dev/google.golang.org/protobuf/types/known/structpb#Struct
  google.protobuf.Struct annotations = 7;
}
