// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: credentials/v1/config.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Credentials with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Credentials) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Credentials with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CredentialsMultiError, or
// nil if none found.
func (m *Credentials) ValidateAll() error {
	return m.validate(true)
}

func (m *Credentials) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SecretPrefix

	oneofBackendPresent := false
	switch v := m.Backend.(type) {
	case *Credentials_AwsSecretManager:
		if v == nil {
			err := CredentialsValidationError{
				field:  "Backend",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofBackendPresent = true

		if all {
			switch v := interface{}(m.GetAwsSecretManager()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CredentialsValidationError{
						field:  "AwsSecretManager",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CredentialsValidationError{
						field:  "AwsSecretManager",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwsSecretManager()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CredentialsValidationError{
					field:  "AwsSecretManager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Credentials_Vault_:
		if v == nil {
			err := CredentialsValidationError{
				field:  "Backend",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofBackendPresent = true

		if all {
			switch v := interface{}(m.GetVault()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CredentialsValidationError{
						field:  "Vault",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CredentialsValidationError{
						field:  "Vault",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVault()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CredentialsValidationError{
					field:  "Vault",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Credentials_GcpSecretManager:
		if v == nil {
			err := CredentialsValidationError{
				field:  "Backend",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofBackendPresent = true

		if all {
			switch v := interface{}(m.GetGcpSecretManager()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CredentialsValidationError{
						field:  "GcpSecretManager",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CredentialsValidationError{
						field:  "GcpSecretManager",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGcpSecretManager()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CredentialsValidationError{
					field:  "GcpSecretManager",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Credentials_AzureKeyVault_:
		if v == nil {
			err := CredentialsValidationError{
				field:  "Backend",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofBackendPresent = true

		if all {
			switch v := interface{}(m.GetAzureKeyVault()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CredentialsValidationError{
						field:  "AzureKeyVault",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CredentialsValidationError{
						field:  "AzureKeyVault",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAzureKeyVault()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CredentialsValidationError{
					field:  "AzureKeyVault",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofBackendPresent {
		err := CredentialsValidationError{
			field:  "Backend",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CredentialsMultiError(errors)
	}

	return nil
}

// CredentialsMultiError is an error wrapping multiple validation errors
// returned by Credentials.ValidateAll() if the designated constraints aren't met.
type CredentialsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CredentialsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CredentialsMultiError) AllErrors() []error { return m }

// CredentialsValidationError is the validation error returned by
// Credentials.Validate if the designated constraints aren't met.
type CredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CredentialsValidationError) ErrorName() string { return "CredentialsValidationError" }

// Error satisfies the builtin error interface
func (e CredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CredentialsValidationError{}

// Validate checks the field values on Credentials_AWSSecretManager with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Credentials_AWSSecretManager) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Credentials_AWSSecretManager with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Credentials_AWSSecretManagerMultiError, or nil if none found.
func (m *Credentials_AWSSecretManager) ValidateAll() error {
	return m.validate(true)
}

func (m *Credentials_AWSSecretManager) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCreds() == nil {
		err := Credentials_AWSSecretManagerValidationError{
			field:  "Creds",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreds()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Credentials_AWSSecretManagerValidationError{
					field:  "Creds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Credentials_AWSSecretManagerValidationError{
					field:  "Creds",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreds()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Credentials_AWSSecretManagerValidationError{
				field:  "Creds",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		err := Credentials_AWSSecretManagerValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Credentials_AWSSecretManagerMultiError(errors)
	}

	return nil
}

// Credentials_AWSSecretManagerMultiError is an error wrapping multiple
// validation errors returned by Credentials_AWSSecretManager.ValidateAll() if
// the designated constraints aren't met.
type Credentials_AWSSecretManagerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Credentials_AWSSecretManagerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Credentials_AWSSecretManagerMultiError) AllErrors() []error { return m }

// Credentials_AWSSecretManagerValidationError is the validation error returned
// by Credentials_AWSSecretManager.Validate if the designated constraints
// aren't met.
type Credentials_AWSSecretManagerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Credentials_AWSSecretManagerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Credentials_AWSSecretManagerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Credentials_AWSSecretManagerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Credentials_AWSSecretManagerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Credentials_AWSSecretManagerValidationError) ErrorName() string {
	return "Credentials_AWSSecretManagerValidationError"
}

// Error satisfies the builtin error interface
func (e Credentials_AWSSecretManagerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredentials_AWSSecretManager.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Credentials_AWSSecretManagerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Credentials_AWSSecretManagerValidationError{}

// Validate checks the field values on Credentials_Vault with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Credentials_Vault) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Credentials_Vault with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Credentials_VaultMultiError, or nil if none found.
func (m *Credentials_Vault) ValidateAll() error {
	return m.validate(true)
}

func (m *Credentials_Vault) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := Credentials_VaultValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 1 {
		err := Credentials_VaultValidationError{
			field:  "Address",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MountPath

	if len(errors) > 0 {
		return Credentials_VaultMultiError(errors)
	}

	return nil
}

// Credentials_VaultMultiError is an error wrapping multiple validation errors
// returned by Credentials_Vault.ValidateAll() if the designated constraints
// aren't met.
type Credentials_VaultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Credentials_VaultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Credentials_VaultMultiError) AllErrors() []error { return m }

// Credentials_VaultValidationError is the validation error returned by
// Credentials_Vault.Validate if the designated constraints aren't met.
type Credentials_VaultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Credentials_VaultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Credentials_VaultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Credentials_VaultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Credentials_VaultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Credentials_VaultValidationError) ErrorName() string {
	return "Credentials_VaultValidationError"
}

// Error satisfies the builtin error interface
func (e Credentials_VaultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredentials_Vault.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Credentials_VaultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Credentials_VaultValidationError{}

// Validate checks the field values on Credentials_GCPSecretManager with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Credentials_GCPSecretManager) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Credentials_GCPSecretManager with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Credentials_GCPSecretManagerMultiError, or nil if none found.
func (m *Credentials_GCPSecretManager) ValidateAll() error {
	return m.validate(true)
}

func (m *Credentials_GCPSecretManager) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := Credentials_GCPSecretManagerValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ServiceAccountKey

	if len(errors) > 0 {
		return Credentials_GCPSecretManagerMultiError(errors)
	}

	return nil
}

// Credentials_GCPSecretManagerMultiError is an error wrapping multiple
// validation errors returned by Credentials_GCPSecretManager.ValidateAll() if
// the designated constraints aren't met.
type Credentials_GCPSecretManagerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Credentials_GCPSecretManagerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Credentials_GCPSecretManagerMultiError) AllErrors() []error { return m }

// Credentials_GCPSecretManagerValidationError is the validation error returned
// by Credentials_GCPSecretManager.Validate if the designated constraints
// aren't met.
type Credentials_GCPSecretManagerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Credentials_GCPSecretManagerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Credentials_GCPSecretManagerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Credentials_GCPSecretManagerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Credentials_GCPSecretManagerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Credentials_GCPSecretManagerValidationError) ErrorName() string {
	return "Credentials_GCPSecretManagerValidationError"
}

// Error satisfies the builtin error interface
func (e Credentials_GCPSecretManagerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredentials_GCPSecretManager.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Credentials_GCPSecretManagerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Credentials_GCPSecretManagerValidationError{}

// Validate checks the field values on Credentials_AzureKeyVault with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Credentials_AzureKeyVault) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Credentials_AzureKeyVault with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Credentials_AzureKeyVaultMultiError, or nil if none found.
func (m *Credentials_AzureKeyVault) ValidateAll() error {
	return m.validate(true)
}

func (m *Credentials_AzureKeyVault) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTenantId()) < 1 {
		err := Credentials_AzureKeyVaultValidationError{
			field:  "TenantId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientId()) < 1 {
		err := Credentials_AzureKeyVaultValidationError{
			field:  "ClientId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientSecret()) < 1 {
		err := Credentials_AzureKeyVaultValidationError{
			field:  "ClientSecret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, err := url.Parse(m.GetVaultUri()); err != nil {
		err = Credentials_AzureKeyVaultValidationError{
			field:  "VaultUri",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Credentials_AzureKeyVaultMultiError(errors)
	}

	return nil
}

// Credentials_AzureKeyVaultMultiError is an error wrapping multiple validation
// errors returned by Credentials_AzureKeyVault.ValidateAll() if the
// designated constraints aren't met.
type Credentials_AzureKeyVaultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Credentials_AzureKeyVaultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Credentials_AzureKeyVaultMultiError) AllErrors() []error { return m }

// Credentials_AzureKeyVaultValidationError is the validation error returned by
// Credentials_AzureKeyVault.Validate if the designated constraints aren't met.
type Credentials_AzureKeyVaultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Credentials_AzureKeyVaultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Credentials_AzureKeyVaultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Credentials_AzureKeyVaultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Credentials_AzureKeyVaultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Credentials_AzureKeyVaultValidationError) ErrorName() string {
	return "Credentials_AzureKeyVaultValidationError"
}

// Error satisfies the builtin error interface
func (e Credentials_AzureKeyVaultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredentials_AzureKeyVault.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Credentials_AzureKeyVaultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Credentials_AzureKeyVaultValidationError{}

// Validate checks the field values on Credentials_AWSSecretManager_Creds with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *Credentials_AWSSecretManager_Creds) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Credentials_AWSSecretManager_Creds
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// Credentials_AWSSecretManager_CredsMultiError, or nil if none found.
func (m *Credentials_AWSSecretManager_Creds) ValidateAll() error {
	return m.validate(true)
}

func (m *Credentials_AWSSecretManager_Creds) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := Credentials_AWSSecretManager_CredsValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := Credentials_AWSSecretManager_CredsValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Credentials_AWSSecretManager_CredsMultiError(errors)
	}

	return nil
}

// Credentials_AWSSecretManager_CredsMultiError is an error wrapping multiple
// validation errors returned by
// Credentials_AWSSecretManager_Creds.ValidateAll() if the designated
// constraints aren't met.
type Credentials_AWSSecretManager_CredsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Credentials_AWSSecretManager_CredsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Credentials_AWSSecretManager_CredsMultiError) AllErrors() []error { return m }

// Credentials_AWSSecretManager_CredsValidationError is the validation error
// returned by Credentials_AWSSecretManager_Creds.Validate if the designated
// constraints aren't met.
type Credentials_AWSSecretManager_CredsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Credentials_AWSSecretManager_CredsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Credentials_AWSSecretManager_CredsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Credentials_AWSSecretManager_CredsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Credentials_AWSSecretManager_CredsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Credentials_AWSSecretManager_CredsValidationError) ErrorName() string {
	return "Credentials_AWSSecretManager_CredsValidationError"
}

// Error satisfies the builtin error interface
func (e Credentials_AWSSecretManager_CredsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCredentials_AWSSecretManager_Creds.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Credentials_AWSSecretManager_CredsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Credentials_AWSSecretManager_CredsValidationError{}
