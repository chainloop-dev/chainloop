// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: attestation/v1/crafting_state.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1 "github.com/chainloop-dev/chainloop/app/controlplane/api/workflowcontract/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1.CraftingSchema_Runner_RunnerType(0)
)

// Validate checks the field values on Attestation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Attestation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Attestation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttestationMultiError, or
// nil if none found.
func (m *Attestation) ValidateAll() error {
	return m.validate(true)
}

func (m *Attestation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetInitializedAt() == nil {
		err := AttestationValidationError{
			field:  "InitializedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFinishedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttestationValidationError{
					field:  "FinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttestationValidationError{
					field:  "FinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinishedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttestationValidationError{
				field:  "FinishedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetWorkflow() == nil {
		err := AttestationValidationError{
			field:  "Workflow",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttestationValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttestationValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttestationValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetMaterials()))
		i := 0
		for key := range m.GetMaterials() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetMaterials()[key]
			_ = val

			// no validation rules for Materials[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, AttestationValidationError{
							field:  fmt.Sprintf("Materials[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, AttestationValidationError{
							field:  fmt.Sprintf("Materials[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return AttestationValidationError{
						field:  fmt.Sprintf("Materials[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]string, len(m.GetAnnotations()))
		i := 0
		for key := range m.GetAnnotations() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAnnotations()[key]
			_ = val

			// no validation rules for Annotations[key]

			if utf8.RuneCountInString(val) < 1 {
				err := AttestationValidationError{
					field:  fmt.Sprintf("Annotations[%v]", key),
					reason: "value length must be at least 1 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	// no validation rules for EnvVars

	// no validation rules for RunnerUrl

	// no validation rules for RunnerType

	if all {
		switch v := interface{}(m.GetHead()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttestationValidationError{
					field:  "Head",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttestationValidationError{
					field:  "Head",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHead()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttestationValidationError{
				field:  "Head",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttestationMultiError(errors)
	}

	return nil
}

// AttestationMultiError is an error wrapping multiple validation errors
// returned by Attestation.ValidateAll() if the designated constraints aren't met.
type AttestationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationMultiError) AllErrors() []error { return m }

// AttestationValidationError is the validation error returned by
// Attestation.Validate if the designated constraints aren't met.
type AttestationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationValidationError) ErrorName() string { return "AttestationValidationError" }

// Error satisfies the builtin error interface
func (e AttestationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationValidationError{}

// Validate checks the field values on Commit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Commit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Commit with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommitMultiError, or nil if none found.
func (m *Commit) ValidateAll() error {
	return m.validate(true)
}

func (m *Commit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetHash()) < 1 {
		err := CommitValidationError{
			field:  "Hash",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAuthorEmail()) < 1 {
		err := CommitValidationError{
			field:  "AuthorEmail",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAuthorName()) < 1 {
		err := CommitValidationError{
			field:  "AuthorName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessage()) < 1 {
		err := CommitValidationError{
			field:  "Message",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommitValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommitValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommitValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRemotes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommitValidationError{
						field:  fmt.Sprintf("Remotes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommitValidationError{
						field:  fmt.Sprintf("Remotes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommitValidationError{
					field:  fmt.Sprintf("Remotes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CommitMultiError(errors)
	}

	return nil
}

// CommitMultiError is an error wrapping multiple validation errors returned by
// Commit.ValidateAll() if the designated constraints aren't met.
type CommitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommitMultiError) AllErrors() []error { return m }

// CommitValidationError is the validation error returned by Commit.Validate if
// the designated constraints aren't met.
type CommitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommitValidationError) ErrorName() string { return "CommitValidationError" }

// Error satisfies the builtin error interface
func (e CommitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommitValidationError{}

// Validate checks the field values on CraftingState with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CraftingState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CraftingState with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CraftingStateMultiError, or
// nil if none found.
func (m *CraftingState) ValidateAll() error {
	return m.validate(true)
}

func (m *CraftingState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInputSchema()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CraftingStateValidationError{
					field:  "InputSchema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CraftingStateValidationError{
					field:  "InputSchema",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInputSchema()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CraftingStateValidationError{
				field:  "InputSchema",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAttestation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CraftingStateValidationError{
					field:  "Attestation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CraftingStateValidationError{
					field:  "Attestation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttestation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CraftingStateValidationError{
				field:  "Attestation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	if len(errors) > 0 {
		return CraftingStateMultiError(errors)
	}

	return nil
}

// CraftingStateMultiError is an error wrapping multiple validation errors
// returned by CraftingState.ValidateAll() if the designated constraints
// aren't met.
type CraftingStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CraftingStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CraftingStateMultiError) AllErrors() []error { return m }

// CraftingStateValidationError is the validation error returned by
// CraftingState.Validate if the designated constraints aren't met.
type CraftingStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CraftingStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CraftingStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CraftingStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CraftingStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CraftingStateValidationError) ErrorName() string { return "CraftingStateValidationError" }

// Error satisfies the builtin error interface
func (e CraftingStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCraftingState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CraftingStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CraftingStateValidationError{}

// Validate checks the field values on WorkflowMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorkflowMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowMetadataMultiError, or nil if none found.
func (m *WorkflowMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := WorkflowMetadataValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Project

	// no validation rules for Team

	if utf8.RuneCountInString(m.GetWorkflowId()) < 1 {
		err := WorkflowMetadataValidationError{
			field:  "WorkflowId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WorkflowRunId

	if utf8.RuneCountInString(m.GetSchemaRevision()) < 1 {
		err := WorkflowMetadataValidationError{
			field:  "SchemaRevision",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := WorkflowMetadataValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WorkflowMetadataMultiError(errors)
	}

	return nil
}

// WorkflowMetadataMultiError is an error wrapping multiple validation errors
// returned by WorkflowMetadata.ValidateAll() if the designated constraints
// aren't met.
type WorkflowMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowMetadataMultiError) AllErrors() []error { return m }

// WorkflowMetadataValidationError is the validation error returned by
// WorkflowMetadata.Validate if the designated constraints aren't met.
type WorkflowMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowMetadataValidationError) ErrorName() string { return "WorkflowMetadataValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowMetadataValidationError{}

// Validate checks the field values on Attestation_Material with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Attestation_Material) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Attestation_Material with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Attestation_MaterialMultiError, or nil if none found.
func (m *Attestation_Material) ValidateAll() error {
	return m.validate(true)
}

func (m *Attestation_Material) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAddedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Attestation_MaterialValidationError{
					field:  "AddedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Attestation_MaterialValidationError{
					field:  "AddedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAddedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Attestation_MaterialValidationError{
				field:  "AddedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaterialType

	// no validation rules for UploadedToCas

	// no validation rules for InlineCas

	{
		sorted_keys := make([]string, len(m.GetAnnotations()))
		i := 0
		for key := range m.GetAnnotations() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAnnotations()[key]
			_ = val

			// no validation rules for Annotations[key]

			if utf8.RuneCountInString(val) < 1 {
				err := Attestation_MaterialValidationError{
					field:  fmt.Sprintf("Annotations[%v]", key),
					reason: "value length must be at least 1 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	switch v := m.M.(type) {
	case *Attestation_Material_String_:
		if v == nil {
			err := Attestation_MaterialValidationError{
				field:  "M",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetString_()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Attestation_MaterialValidationError{
						field:  "String_",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Attestation_MaterialValidationError{
						field:  "String_",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetString_()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Attestation_MaterialValidationError{
					field:  "String_",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Attestation_Material_ContainerImage_:
		if v == nil {
			err := Attestation_MaterialValidationError{
				field:  "M",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetContainerImage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Attestation_MaterialValidationError{
						field:  "ContainerImage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Attestation_MaterialValidationError{
						field:  "ContainerImage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContainerImage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Attestation_MaterialValidationError{
					field:  "ContainerImage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Attestation_Material_Artifact_:
		if v == nil {
			err := Attestation_MaterialValidationError{
				field:  "M",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetArtifact()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Attestation_MaterialValidationError{
						field:  "Artifact",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Attestation_MaterialValidationError{
						field:  "Artifact",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetArtifact()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Attestation_MaterialValidationError{
					field:  "Artifact",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return Attestation_MaterialMultiError(errors)
	}

	return nil
}

// Attestation_MaterialMultiError is an error wrapping multiple validation
// errors returned by Attestation_Material.ValidateAll() if the designated
// constraints aren't met.
type Attestation_MaterialMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Attestation_MaterialMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Attestation_MaterialMultiError) AllErrors() []error { return m }

// Attestation_MaterialValidationError is the validation error returned by
// Attestation_Material.Validate if the designated constraints aren't met.
type Attestation_MaterialValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Attestation_MaterialValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Attestation_MaterialValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Attestation_MaterialValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Attestation_MaterialValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Attestation_MaterialValidationError) ErrorName() string {
	return "Attestation_MaterialValidationError"
}

// Error satisfies the builtin error interface
func (e Attestation_MaterialValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestation_Material.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Attestation_MaterialValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Attestation_MaterialValidationError{}

// Validate checks the field values on Attestation_Material_KeyVal with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Attestation_Material_KeyVal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Attestation_Material_KeyVal with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Attestation_Material_KeyValMultiError, or nil if none found.
func (m *Attestation_Material_KeyVal) ValidateAll() error {
	return m.validate(true)
}

func (m *Attestation_Material_KeyVal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := Attestation_Material_KeyValValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := Attestation_Material_KeyValValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Attestation_Material_KeyValMultiError(errors)
	}

	return nil
}

// Attestation_Material_KeyValMultiError is an error wrapping multiple
// validation errors returned by Attestation_Material_KeyVal.ValidateAll() if
// the designated constraints aren't met.
type Attestation_Material_KeyValMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Attestation_Material_KeyValMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Attestation_Material_KeyValMultiError) AllErrors() []error { return m }

// Attestation_Material_KeyValValidationError is the validation error returned
// by Attestation_Material_KeyVal.Validate if the designated constraints
// aren't met.
type Attestation_Material_KeyValValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Attestation_Material_KeyValValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Attestation_Material_KeyValValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Attestation_Material_KeyValValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Attestation_Material_KeyValValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Attestation_Material_KeyValValidationError) ErrorName() string {
	return "Attestation_Material_KeyValValidationError"
}

// Error satisfies the builtin error interface
func (e Attestation_Material_KeyValValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestation_Material_KeyVal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Attestation_Material_KeyValValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Attestation_Material_KeyValValidationError{}

// Validate checks the field values on Attestation_Material_ContainerImage with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *Attestation_Material_ContainerImage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Attestation_Material_ContainerImage
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// Attestation_Material_ContainerImageMultiError, or nil if none found.
func (m *Attestation_Material_ContainerImage) ValidateAll() error {
	return m.validate(true)
}

func (m *Attestation_Material_ContainerImage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := Attestation_Material_ContainerImageValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := Attestation_Material_ContainerImageValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDigest()) < 1 {
		err := Attestation_Material_ContainerImageValidationError{
			field:  "Digest",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsSubject

	if len(errors) > 0 {
		return Attestation_Material_ContainerImageMultiError(errors)
	}

	return nil
}

// Attestation_Material_ContainerImageMultiError is an error wrapping multiple
// validation errors returned by
// Attestation_Material_ContainerImage.ValidateAll() if the designated
// constraints aren't met.
type Attestation_Material_ContainerImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Attestation_Material_ContainerImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Attestation_Material_ContainerImageMultiError) AllErrors() []error { return m }

// Attestation_Material_ContainerImageValidationError is the validation error
// returned by Attestation_Material_ContainerImage.Validate if the designated
// constraints aren't met.
type Attestation_Material_ContainerImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Attestation_Material_ContainerImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Attestation_Material_ContainerImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Attestation_Material_ContainerImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Attestation_Material_ContainerImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Attestation_Material_ContainerImageValidationError) ErrorName() string {
	return "Attestation_Material_ContainerImageValidationError"
}

// Error satisfies the builtin error interface
func (e Attestation_Material_ContainerImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestation_Material_ContainerImage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Attestation_Material_ContainerImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Attestation_Material_ContainerImageValidationError{}

// Validate checks the field values on Attestation_Material_Artifact with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Attestation_Material_Artifact) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Attestation_Material_Artifact with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// Attestation_Material_ArtifactMultiError, or nil if none found.
func (m *Attestation_Material_Artifact) ValidateAll() error {
	return m.validate(true)
}

func (m *Attestation_Material_Artifact) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := Attestation_Material_ArtifactValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := Attestation_Material_ArtifactValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDigest()) < 1 {
		err := Attestation_Material_ArtifactValidationError{
			field:  "Digest",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsSubject

	// no validation rules for Content

	if len(errors) > 0 {
		return Attestation_Material_ArtifactMultiError(errors)
	}

	return nil
}

// Attestation_Material_ArtifactMultiError is an error wrapping multiple
// validation errors returned by Attestation_Material_Artifact.ValidateAll()
// if the designated constraints aren't met.
type Attestation_Material_ArtifactMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Attestation_Material_ArtifactMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Attestation_Material_ArtifactMultiError) AllErrors() []error { return m }

// Attestation_Material_ArtifactValidationError is the validation error
// returned by Attestation_Material_Artifact.Validate if the designated
// constraints aren't met.
type Attestation_Material_ArtifactValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Attestation_Material_ArtifactValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Attestation_Material_ArtifactValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Attestation_Material_ArtifactValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Attestation_Material_ArtifactValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Attestation_Material_ArtifactValidationError) ErrorName() string {
	return "Attestation_Material_ArtifactValidationError"
}

// Error satisfies the builtin error interface
func (e Attestation_Material_ArtifactValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestation_Material_Artifact.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Attestation_Material_ArtifactValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Attestation_Material_ArtifactValidationError{}

// Validate checks the field values on Commit_Remote with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Commit_Remote) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Commit_Remote with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Commit_RemoteMultiError, or
// nil if none found.
func (m *Commit_Remote) ValidateAll() error {
	return m.validate(true)
}

func (m *Commit_Remote) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := Commit_RemoteValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUrl()) < 1 {
		err := Commit_RemoteValidationError{
			field:  "Url",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Commit_RemoteMultiError(errors)
	}

	return nil
}

// Commit_RemoteMultiError is an error wrapping multiple validation errors
// returned by Commit_Remote.ValidateAll() if the designated constraints
// aren't met.
type Commit_RemoteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Commit_RemoteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Commit_RemoteMultiError) AllErrors() []error { return m }

// Commit_RemoteValidationError is the validation error returned by
// Commit_Remote.Validate if the designated constraints aren't met.
type Commit_RemoteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Commit_RemoteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Commit_RemoteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Commit_RemoteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Commit_RemoteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Commit_RemoteValidationError) ErrorName() string { return "Commit_RemoteValidationError" }

// Error satisfies the builtin error interface
func (e Commit_RemoteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommit_Remote.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Commit_RemoteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Commit_RemoteValidationError{}
