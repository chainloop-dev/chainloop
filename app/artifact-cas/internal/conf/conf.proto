//
// Copyright 2023 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option go_package = "github.com/chainloop-dev/chainloop/app/artifact-cas/internal/conf;conf";

import "google/protobuf/duration.proto";

message Bootstrap {
  Server server = 1;
  Auth auth = 2;
  Observability observability = 3;
  Credentials credentials_service = 4;

  message Observability {
    Sentry sentry = 1;

    // Sentry notification support
    message Sentry {
      string dsn = 1;
      string environment = 2;
    }
  }
}

message Server {
  message HTTP {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  message GRPC {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  // Regular HTTP endpoint
  HTTP http = 1;
  // GRPC API endpoint
  GRPC grpc = 2;
  // hHTTP server where the prometheus metrics will get exposed
  HTTP http_metrics = 3;
}

message Auth {
  // Public key used to verify the received JWT token
  // This token in the context of chainloop has been crafted by the controlplane
  string robot_account_public_key_path = 1;
}

// Where the credentials to access the backends are stored
message Credentials {
  oneof backend {
    AWSSecretManager aws_secret_manager = 1;
    Vault vault = 2;
    GCPSecretManager gcp_secret_manager = 3;
  }

  // Top level is deprecated now
  message AWSSecretManager {
    Creds creds = 1;
    string region = 2;

    message Creds {
      string access_key = 1;
      string secret_key = 2;
    }
  }

  message Vault {
    // TODO: Use application role auth instead
    string token = 1;
    // Instance address, including port
    // i.e "http://127.0.0.1:8200"
    string address = 2;
    // mount path of the kv engine, default /secret
    string mount_path = 3;
  }

  message GCPSecretManager {
    // project number
    string project_id = 1;
    // service account key
    string service_account_key   = 2;
  }
}