// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/pkg/data/ent/predicate"
	"github.com/chainloop-dev/chainloop/app/controlplane/pkg/data/ent/projectversion"
)

// ProjectVersionDelete is the builder for deleting a ProjectVersion entity.
type ProjectVersionDelete struct {
	config
	hooks    []Hook
	mutation *ProjectVersionMutation
}

// Where appends a list predicates to the ProjectVersionDelete builder.
func (pvd *ProjectVersionDelete) Where(ps ...predicate.ProjectVersion) *ProjectVersionDelete {
	pvd.mutation.Where(ps...)
	return pvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pvd *ProjectVersionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pvd.sqlExec, pvd.mutation, pvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pvd *ProjectVersionDelete) ExecX(ctx context.Context) int {
	n, err := pvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pvd *ProjectVersionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(projectversion.Table, sqlgraph.NewFieldSpec(projectversion.FieldID, field.TypeUUID))
	if ps := pvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pvd.mutation.done = true
	return affected, err
}

// ProjectVersionDeleteOne is the builder for deleting a single ProjectVersion entity.
type ProjectVersionDeleteOne struct {
	pvd *ProjectVersionDelete
}

// Where appends a list predicates to the ProjectVersionDelete builder.
func (pvdo *ProjectVersionDeleteOne) Where(ps ...predicate.ProjectVersion) *ProjectVersionDeleteOne {
	pvdo.pvd.mutation.Where(ps...)
	return pvdo
}

// Exec executes the deletion query.
func (pvdo *ProjectVersionDeleteOne) Exec(ctx context.Context) error {
	n, err := pvdo.pvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{projectversion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pvdo *ProjectVersionDeleteOne) ExecX(ctx context.Context) {
	if err := pvdo.Exec(ctx); err != nil {
		panic(err)
	}
}
