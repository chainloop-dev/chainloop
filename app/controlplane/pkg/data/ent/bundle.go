// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chainloop-dev/chainloop/app/controlplane/pkg/data/ent/bundle"
	"github.com/chainloop-dev/chainloop/app/controlplane/pkg/data/ent/workflowrun"
	"github.com/google/uuid"
)

// Bundle is the model entity for the Bundle schema.
type Bundle struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Bundle holds the value of the "bundle" field.
	Bundle []byte `json:"bundle,omitempty"`
	// WorkflowrunID holds the value of the "workflowrun_id" field.
	WorkflowrunID uuid.UUID `json:"workflowrun_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BundleQuery when eager-loading is set.
	Edges        BundleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// BundleEdges holds the relations/edges for other nodes in the graph.
type BundleEdges struct {
	// Workflowrun holds the value of the workflowrun edge.
	Workflowrun *WorkflowRun `json:"workflowrun,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WorkflowrunOrErr returns the Workflowrun value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BundleEdges) WorkflowrunOrErr() (*WorkflowRun, error) {
	if e.Workflowrun != nil {
		return e.Workflowrun, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workflowrun.Label}
	}
	return nil, &NotLoadedError{edge: "workflowrun"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bundle) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bundle.FieldBundle:
			values[i] = new([]byte)
		case bundle.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case bundle.FieldID, bundle.FieldWorkflowrunID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bundle fields.
func (b *Bundle) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bundle.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				b.ID = *value
			}
		case bundle.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case bundle.FieldBundle:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field bundle", values[i])
			} else if value != nil {
				b.Bundle = *value
			}
		case bundle.FieldWorkflowrunID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field workflowrun_id", values[i])
			} else if value != nil {
				b.WorkflowrunID = *value
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Bundle.
// This includes values selected through modifiers, order, etc.
func (b *Bundle) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryWorkflowrun queries the "workflowrun" edge of the Bundle entity.
func (b *Bundle) QueryWorkflowrun() *WorkflowRunQuery {
	return NewBundleClient(b.config).QueryWorkflowrun(b)
}

// Update returns a builder for updating this Bundle.
// Note that you need to call Bundle.Unwrap() before calling this method if this Bundle
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bundle) Update() *BundleUpdateOne {
	return NewBundleClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bundle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bundle) Unwrap() *Bundle {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bundle is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bundle) String() string {
	var builder strings.Builder
	builder.WriteString("Bundle(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("bundle=")
	builder.WriteString(fmt.Sprintf("%v", b.Bundle))
	builder.WriteString(", ")
	builder.WriteString("workflowrun_id=")
	builder.WriteString(fmt.Sprintf("%v", b.WorkflowrunID))
	builder.WriteByte(')')
	return builder.String()
}

// Bundles is a parsable slice of Bundle.
type Bundles []*Bundle
