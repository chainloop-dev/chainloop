// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/pkg/data/ent/bundle"
	"github.com/chainloop-dev/chainloop/app/controlplane/pkg/data/ent/predicate"
)

// BundleUpdate is the builder for updating Bundle entities.
type BundleUpdate struct {
	config
	hooks     []Hook
	mutation  *BundleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BundleUpdate builder.
func (bu *BundleUpdate) Where(ps ...predicate.Bundle) *BundleUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// Mutation returns the BundleMutation object of the builder.
func (bu *BundleUpdate) Mutation() *BundleMutation {
	return bu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BundleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BundleUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BundleUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BundleUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BundleUpdate) check() error {
	if bu.mutation.WorkflowrunCleared() && len(bu.mutation.WorkflowrunIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Bundle.workflowrun"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bu *BundleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BundleUpdate {
	bu.modifiers = append(bu.modifiers, modifiers...)
	return bu
}

func (bu *BundleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bundle.Table, bundle.Columns, sqlgraph.NewFieldSpec(bundle.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_spec.AddModifiers(bu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bundle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BundleUpdateOne is the builder for updating a single Bundle entity.
type BundleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BundleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Mutation returns the BundleMutation object of the builder.
func (buo *BundleUpdateOne) Mutation() *BundleMutation {
	return buo.mutation
}

// Where appends a list predicates to the BundleUpdate builder.
func (buo *BundleUpdateOne) Where(ps ...predicate.Bundle) *BundleUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BundleUpdateOne) Select(field string, fields ...string) *BundleUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Bundle entity.
func (buo *BundleUpdateOne) Save(ctx context.Context) (*Bundle, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BundleUpdateOne) SaveX(ctx context.Context) *Bundle {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BundleUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BundleUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BundleUpdateOne) check() error {
	if buo.mutation.WorkflowrunCleared() && len(buo.mutation.WorkflowrunIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Bundle.workflowrun"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (buo *BundleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BundleUpdateOne {
	buo.modifiers = append(buo.modifiers, modifiers...)
	return buo
}

func (buo *BundleUpdateOne) sqlSave(ctx context.Context) (_node *Bundle, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bundle.Table, bundle.Columns, sqlgraph.NewFieldSpec(bundle.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Bundle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bundle.FieldID)
		for _, f := range fields {
			if !bundle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bundle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_spec.AddModifiers(buo.modifiers...)
	_node = &Bundle{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bundle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
