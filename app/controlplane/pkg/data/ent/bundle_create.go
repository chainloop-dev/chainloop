// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/pkg/data/ent/bundle"
	"github.com/chainloop-dev/chainloop/app/controlplane/pkg/data/ent/workflowrun"
	"github.com/google/uuid"
)

// BundleCreate is the builder for creating a Bundle entity.
type BundleCreate struct {
	config
	mutation *BundleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bc *BundleCreate) SetCreatedAt(t time.Time) *BundleCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BundleCreate) SetNillableCreatedAt(t *time.Time) *BundleCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetBundle sets the "bundle" field.
func (bc *BundleCreate) SetBundle(b []byte) *BundleCreate {
	bc.mutation.SetBundle(b)
	return bc
}

// SetWorkflowrunID sets the "workflowrun_id" field.
func (bc *BundleCreate) SetWorkflowrunID(u uuid.UUID) *BundleCreate {
	bc.mutation.SetWorkflowrunID(u)
	return bc
}

// SetID sets the "id" field.
func (bc *BundleCreate) SetID(u uuid.UUID) *BundleCreate {
	bc.mutation.SetID(u)
	return bc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (bc *BundleCreate) SetNillableID(u *uuid.UUID) *BundleCreate {
	if u != nil {
		bc.SetID(*u)
	}
	return bc
}

// SetWorkflowrun sets the "workflowrun" edge to the WorkflowRun entity.
func (bc *BundleCreate) SetWorkflowrun(w *WorkflowRun) *BundleCreate {
	return bc.SetWorkflowrunID(w.ID)
}

// Mutation returns the BundleMutation object of the builder.
func (bc *BundleCreate) Mutation() *BundleMutation {
	return bc.mutation
}

// Save creates the Bundle in the database.
func (bc *BundleCreate) Save(ctx context.Context) (*Bundle, error) {
	bc.defaults()
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BundleCreate) SaveX(ctx context.Context) *Bundle {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BundleCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BundleCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BundleCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := bundle.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.ID(); !ok {
		v := bundle.DefaultID()
		bc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BundleCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Bundle.created_at"`)}
	}
	if _, ok := bc.mutation.Bundle(); !ok {
		return &ValidationError{Name: "bundle", err: errors.New(`ent: missing required field "Bundle.bundle"`)}
	}
	if v, ok := bc.mutation.Bundle(); ok {
		if err := bundle.BundleValidator(v); err != nil {
			return &ValidationError{Name: "bundle", err: fmt.Errorf(`ent: validator failed for field "Bundle.bundle": %w`, err)}
		}
	}
	if _, ok := bc.mutation.WorkflowrunID(); !ok {
		return &ValidationError{Name: "workflowrun_id", err: errors.New(`ent: missing required field "Bundle.workflowrun_id"`)}
	}
	if len(bc.mutation.WorkflowrunIDs()) == 0 {
		return &ValidationError{Name: "workflowrun", err: errors.New(`ent: missing required edge "Bundle.workflowrun"`)}
	}
	return nil
}

func (bc *BundleCreate) sqlSave(ctx context.Context) (*Bundle, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BundleCreate) createSpec() (*Bundle, *sqlgraph.CreateSpec) {
	var (
		_node = &Bundle{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bundle.Table, sqlgraph.NewFieldSpec(bundle.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = bc.conflict
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(bundle.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.Bundle(); ok {
		_spec.SetField(bundle.FieldBundle, field.TypeBytes, value)
		_node.Bundle = value
	}
	if nodes := bc.mutation.WorkflowrunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   bundle.WorkflowrunTable,
			Columns: []string{bundle.WorkflowrunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowrun.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkflowrunID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Bundle.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BundleUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bc *BundleCreate) OnConflict(opts ...sql.ConflictOption) *BundleUpsertOne {
	bc.conflict = opts
	return &BundleUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Bundle.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bc *BundleCreate) OnConflictColumns(columns ...string) *BundleUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BundleUpsertOne{
		create: bc,
	}
}

type (
	// BundleUpsertOne is the builder for "upsert"-ing
	//  one Bundle node.
	BundleUpsertOne struct {
		create *BundleCreate
	}

	// BundleUpsert is the "OnConflict" setter.
	BundleUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Bundle.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bundle.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BundleUpsertOne) UpdateNewValues() *BundleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(bundle.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(bundle.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.Bundle(); exists {
			s.SetIgnore(bundle.FieldBundle)
		}
		if _, exists := u.create.mutation.WorkflowrunID(); exists {
			s.SetIgnore(bundle.FieldWorkflowrunID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Bundle.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BundleUpsertOne) Ignore() *BundleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BundleUpsertOne) DoNothing() *BundleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BundleCreate.OnConflict
// documentation for more info.
func (u *BundleUpsertOne) Update(set func(*BundleUpsert)) *BundleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BundleUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *BundleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BundleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BundleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BundleUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: BundleUpsertOne.ID is not supported by MySQL driver. Use BundleUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BundleUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BundleCreateBulk is the builder for creating many Bundle entities in bulk.
type BundleCreateBulk struct {
	config
	err      error
	builders []*BundleCreate
	conflict []sql.ConflictOption
}

// Save creates the Bundle entities in the database.
func (bcb *BundleCreateBulk) Save(ctx context.Context) ([]*Bundle, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bundle, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BundleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BundleCreateBulk) SaveX(ctx context.Context) []*Bundle {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BundleCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BundleCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Bundle.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BundleUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bcb *BundleCreateBulk) OnConflict(opts ...sql.ConflictOption) *BundleUpsertBulk {
	bcb.conflict = opts
	return &BundleUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Bundle.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcb *BundleCreateBulk) OnConflictColumns(columns ...string) *BundleUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BundleUpsertBulk{
		create: bcb,
	}
}

// BundleUpsertBulk is the builder for "upsert"-ing
// a bulk of Bundle nodes.
type BundleUpsertBulk struct {
	create *BundleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Bundle.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(bundle.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *BundleUpsertBulk) UpdateNewValues() *BundleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(bundle.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(bundle.FieldCreatedAt)
			}
			if _, exists := b.mutation.Bundle(); exists {
				s.SetIgnore(bundle.FieldBundle)
			}
			if _, exists := b.mutation.WorkflowrunID(); exists {
				s.SetIgnore(bundle.FieldWorkflowrunID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Bundle.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BundleUpsertBulk) Ignore() *BundleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BundleUpsertBulk) DoNothing() *BundleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BundleCreateBulk.OnConflict
// documentation for more info.
func (u *BundleUpsertBulk) Update(set func(*BundleUpsert)) *BundleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BundleUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *BundleUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BundleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BundleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BundleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
