// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/pkg/data/ent/groupmembership"
	"github.com/chainloop-dev/chainloop/app/controlplane/pkg/data/ent/predicate"
)

// GroupMembershipDelete is the builder for deleting a GroupMembership entity.
type GroupMembershipDelete struct {
	config
	hooks    []Hook
	mutation *GroupMembershipMutation
}

// Where appends a list predicates to the GroupMembershipDelete builder.
func (gmd *GroupMembershipDelete) Where(ps ...predicate.GroupMembership) *GroupMembershipDelete {
	gmd.mutation.Where(ps...)
	return gmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gmd *GroupMembershipDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gmd.sqlExec, gmd.mutation, gmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gmd *GroupMembershipDelete) ExecX(ctx context.Context) int {
	n, err := gmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gmd *GroupMembershipDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(groupmembership.Table, sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeUUID))
	if ps := gmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gmd.mutation.done = true
	return affected, err
}

// GroupMembershipDeleteOne is the builder for deleting a single GroupMembership entity.
type GroupMembershipDeleteOne struct {
	gmd *GroupMembershipDelete
}

// Where appends a list predicates to the GroupMembershipDelete builder.
func (gmdo *GroupMembershipDeleteOne) Where(ps ...predicate.GroupMembership) *GroupMembershipDeleteOne {
	gmdo.gmd.mutation.Where(ps...)
	return gmdo
}

// Exec executes the deletion query.
func (gmdo *GroupMembershipDeleteOne) Exec(ctx context.Context) error {
	n, err := gmdo.gmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{groupmembership.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gmdo *GroupMembershipDeleteOne) ExecX(ctx context.Context) {
	if err := gmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
