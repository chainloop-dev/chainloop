// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/pkg/data/ent/casbackend"
	"github.com/chainloop-dev/chainloop/app/controlplane/pkg/data/ent/casmapping"
	"github.com/chainloop-dev/chainloop/app/controlplane/pkg/data/ent/organization"
	"github.com/google/uuid"
)

// CASMappingCreate is the builder for creating a CASMapping entity.
type CASMappingCreate struct {
	config
	mutation *CASMappingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDigest sets the "digest" field.
func (cmc *CASMappingCreate) SetDigest(s string) *CASMappingCreate {
	cmc.mutation.SetDigest(s)
	return cmc
}

// SetCreatedAt sets the "created_at" field.
func (cmc *CASMappingCreate) SetCreatedAt(t time.Time) *CASMappingCreate {
	cmc.mutation.SetCreatedAt(t)
	return cmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cmc *CASMappingCreate) SetNillableCreatedAt(t *time.Time) *CASMappingCreate {
	if t != nil {
		cmc.SetCreatedAt(*t)
	}
	return cmc
}

// SetWorkflowRunID sets the "workflow_run_id" field.
func (cmc *CASMappingCreate) SetWorkflowRunID(u uuid.UUID) *CASMappingCreate {
	cmc.mutation.SetWorkflowRunID(u)
	return cmc
}

// SetOrganizationID sets the "organization_id" field.
func (cmc *CASMappingCreate) SetOrganizationID(u uuid.UUID) *CASMappingCreate {
	cmc.mutation.SetOrganizationID(u)
	return cmc
}

// SetID sets the "id" field.
func (cmc *CASMappingCreate) SetID(u uuid.UUID) *CASMappingCreate {
	cmc.mutation.SetID(u)
	return cmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cmc *CASMappingCreate) SetNillableID(u *uuid.UUID) *CASMappingCreate {
	if u != nil {
		cmc.SetID(*u)
	}
	return cmc
}

// SetCasBackendID sets the "cas_backend" edge to the CASBackend entity by ID.
func (cmc *CASMappingCreate) SetCasBackendID(id uuid.UUID) *CASMappingCreate {
	cmc.mutation.SetCasBackendID(id)
	return cmc
}

// SetCasBackend sets the "cas_backend" edge to the CASBackend entity.
func (cmc *CASMappingCreate) SetCasBackend(c *CASBackend) *CASMappingCreate {
	return cmc.SetCasBackendID(c.ID)
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (cmc *CASMappingCreate) SetOrganization(o *Organization) *CASMappingCreate {
	return cmc.SetOrganizationID(o.ID)
}

// Mutation returns the CASMappingMutation object of the builder.
func (cmc *CASMappingCreate) Mutation() *CASMappingMutation {
	return cmc.mutation
}

// Save creates the CASMapping in the database.
func (cmc *CASMappingCreate) Save(ctx context.Context) (*CASMapping, error) {
	cmc.defaults()
	return withHooks(ctx, cmc.sqlSave, cmc.mutation, cmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *CASMappingCreate) SaveX(ctx context.Context) *CASMapping {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *CASMappingCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *CASMappingCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmc *CASMappingCreate) defaults() {
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		v := casmapping.DefaultCreatedAt()
		cmc.mutation.SetCreatedAt(v)
	}
	if _, ok := cmc.mutation.ID(); !ok {
		v := casmapping.DefaultID()
		cmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *CASMappingCreate) check() error {
	if _, ok := cmc.mutation.Digest(); !ok {
		return &ValidationError{Name: "digest", err: errors.New(`ent: missing required field "CASMapping.digest"`)}
	}
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CASMapping.created_at"`)}
	}
	if _, ok := cmc.mutation.WorkflowRunID(); !ok {
		return &ValidationError{Name: "workflow_run_id", err: errors.New(`ent: missing required field "CASMapping.workflow_run_id"`)}
	}
	if _, ok := cmc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`ent: missing required field "CASMapping.organization_id"`)}
	}
	if len(cmc.mutation.CasBackendIDs()) == 0 {
		return &ValidationError{Name: "cas_backend", err: errors.New(`ent: missing required edge "CASMapping.cas_backend"`)}
	}
	if len(cmc.mutation.OrganizationIDs()) == 0 {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "CASMapping.organization"`)}
	}
	return nil
}

func (cmc *CASMappingCreate) sqlSave(ctx context.Context) (*CASMapping, error) {
	if err := cmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cmc.mutation.id = &_node.ID
	cmc.mutation.done = true
	return _node, nil
}

func (cmc *CASMappingCreate) createSpec() (*CASMapping, *sqlgraph.CreateSpec) {
	var (
		_node = &CASMapping{config: cmc.config}
		_spec = sqlgraph.NewCreateSpec(casmapping.Table, sqlgraph.NewFieldSpec(casmapping.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = cmc.conflict
	if id, ok := cmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cmc.mutation.Digest(); ok {
		_spec.SetField(casmapping.FieldDigest, field.TypeString, value)
		_node.Digest = value
	}
	if value, ok := cmc.mutation.CreatedAt(); ok {
		_spec.SetField(casmapping.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cmc.mutation.WorkflowRunID(); ok {
		_spec.SetField(casmapping.FieldWorkflowRunID, field.TypeUUID, value)
		_node.WorkflowRunID = value
	}
	if nodes := cmc.mutation.CasBackendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   casmapping.CasBackendTable,
			Columns: []string{casmapping.CasBackendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(casbackend.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.cas_mapping_cas_backend = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   casmapping.OrganizationTable,
			Columns: []string{casmapping.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CASMapping.Create().
//		SetDigest(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CASMappingUpsert) {
//			SetDigest(v+v).
//		}).
//		Exec(ctx)
func (cmc *CASMappingCreate) OnConflict(opts ...sql.ConflictOption) *CASMappingUpsertOne {
	cmc.conflict = opts
	return &CASMappingUpsertOne{
		create: cmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CASMapping.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cmc *CASMappingCreate) OnConflictColumns(columns ...string) *CASMappingUpsertOne {
	cmc.conflict = append(cmc.conflict, sql.ConflictColumns(columns...))
	return &CASMappingUpsertOne{
		create: cmc,
	}
}

type (
	// CASMappingUpsertOne is the builder for "upsert"-ing
	//  one CASMapping node.
	CASMappingUpsertOne struct {
		create *CASMappingCreate
	}

	// CASMappingUpsert is the "OnConflict" setter.
	CASMappingUpsert struct {
		*sql.UpdateSet
	}
)

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CASMapping.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(casmapping.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CASMappingUpsertOne) UpdateNewValues() *CASMappingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(casmapping.FieldID)
		}
		if _, exists := u.create.mutation.Digest(); exists {
			s.SetIgnore(casmapping.FieldDigest)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(casmapping.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.WorkflowRunID(); exists {
			s.SetIgnore(casmapping.FieldWorkflowRunID)
		}
		if _, exists := u.create.mutation.OrganizationID(); exists {
			s.SetIgnore(casmapping.FieldOrganizationID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CASMapping.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CASMappingUpsertOne) Ignore() *CASMappingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CASMappingUpsertOne) DoNothing() *CASMappingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CASMappingCreate.OnConflict
// documentation for more info.
func (u *CASMappingUpsertOne) Update(set func(*CASMappingUpsert)) *CASMappingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CASMappingUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *CASMappingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CASMappingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CASMappingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CASMappingUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CASMappingUpsertOne.ID is not supported by MySQL driver. Use CASMappingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CASMappingUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CASMappingCreateBulk is the builder for creating many CASMapping entities in bulk.
type CASMappingCreateBulk struct {
	config
	err      error
	builders []*CASMappingCreate
	conflict []sql.ConflictOption
}

// Save creates the CASMapping entities in the database.
func (cmcb *CASMappingCreateBulk) Save(ctx context.Context) ([]*CASMapping, error) {
	if cmcb.err != nil {
		return nil, cmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*CASMapping, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CASMappingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *CASMappingCreateBulk) SaveX(ctx context.Context) []*CASMapping {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *CASMappingCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *CASMappingCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CASMapping.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CASMappingUpsert) {
//			SetDigest(v+v).
//		}).
//		Exec(ctx)
func (cmcb *CASMappingCreateBulk) OnConflict(opts ...sql.ConflictOption) *CASMappingUpsertBulk {
	cmcb.conflict = opts
	return &CASMappingUpsertBulk{
		create: cmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CASMapping.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cmcb *CASMappingCreateBulk) OnConflictColumns(columns ...string) *CASMappingUpsertBulk {
	cmcb.conflict = append(cmcb.conflict, sql.ConflictColumns(columns...))
	return &CASMappingUpsertBulk{
		create: cmcb,
	}
}

// CASMappingUpsertBulk is the builder for "upsert"-ing
// a bulk of CASMapping nodes.
type CASMappingUpsertBulk struct {
	create *CASMappingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CASMapping.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(casmapping.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CASMappingUpsertBulk) UpdateNewValues() *CASMappingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(casmapping.FieldID)
			}
			if _, exists := b.mutation.Digest(); exists {
				s.SetIgnore(casmapping.FieldDigest)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(casmapping.FieldCreatedAt)
			}
			if _, exists := b.mutation.WorkflowRunID(); exists {
				s.SetIgnore(casmapping.FieldWorkflowRunID)
			}
			if _, exists := b.mutation.OrganizationID(); exists {
				s.SetIgnore(casmapping.FieldOrganizationID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CASMapping.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CASMappingUpsertBulk) Ignore() *CASMappingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CASMappingUpsertBulk) DoNothing() *CASMappingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CASMappingCreateBulk.OnConflict
// documentation for more info.
func (u *CASMappingUpsertBulk) Update(set func(*CASMappingUpsert)) *CASMappingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CASMappingUpsert{UpdateSet: update})
	}))
	return u
}

// Exec executes the query.
func (u *CASMappingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CASMappingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CASMappingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CASMappingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
