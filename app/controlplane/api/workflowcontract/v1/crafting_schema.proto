//
// Copyright 2024 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package workflowcontract.v1;

import "buf/validate/validate.proto";

option go_package = "github.com/chainloop-dev/chainloop/app/controlplane/api/workflowcontract/v1";

// Schema definition provided by the user to the tool
// that defines the schema of the workflowRun
message CraftingSchema {
  // Version of the schema, do not confuse with the revision of the content
  string schema_version = 1 [(buf.validate.field).string.const = "v1"];
  repeated Material materials = 2;
  repeated string env_allow_list = 3;
  Runner runner = 4;
  // List of annotations that can be used to add metadata to the attestation
  // this metadata can be used later on by the integrations engine to filter and interpolate data
  // It works in addition to the annotations defined in the materials and the runner
  repeated Annotation annotations = 5;

  // Policies to apply to this schema
  Policies policies = 6;

  // Policy groups to apply to this schema
  repeated PolicyGroupAttachment policy_groups = 7;

  message Runner {
    RunnerType type = 1 [
      (buf.validate.field).enum = {
        not_in: [0]
      },
      (buf.validate.field).enum.defined_only = true
    ];

    enum RunnerType {
      RUNNER_TYPE_UNSPECIFIED = 0;
      GITHUB_ACTION = 1;
      GITLAB_PIPELINE = 2;
      AZURE_PIPELINE = 3;
      JENKINS_JOB = 4;
      CIRCLECI_BUILD = 5;
      DAGGER_PIPELINE = 6;
    }
  }

  message Material {
    MaterialType type = 1 [
      (buf.validate.field).enum = {
        not_in: [0]
      },
      (buf.validate.field).enum.defined_only = true
    ];
    string name = 2 [(buf.validate.field) = {
      // NOTE: validations can not be shared yet https://github.com/bufbuild/protovalidate/issues/51
      cel: {
        message: "must contain only lowercase letters, numbers, and hyphens."
        expression: "this.matches('^[a-z0-9]([-a-z0-9]*[a-z0-9])?$')"
        id: "name.dns-1123"
      }
    }];
    bool optional = 3;
    // If a material is set as output it will get added to the subject in the statement
    bool output = 4;
    // List of annotations that can be used to add metadata to the material
    // this metadata can be used later on by the integrations engine to filter and interpolate data
    repeated Annotation annotations = 5;

    // Policies to be applied to this material
    repeated PolicyAttachment policies = 6;

    enum MaterialType {
      MATERIAL_TYPE_UNSPECIFIED = 0;
      STRING = 1;
      CONTAINER_IMAGE = 2;
      ARTIFACT = 3;
      SBOM_CYCLONEDX_JSON = 4;
      SBOM_SPDX_JSON = 5;
      JUNIT_XML = 6;
      // https://github.com/openvex/spec
      OPENVEX = 7;
      // Static analysis output format
      // https://github.com/microsoft/sarif-tutorials/blob/main/docs/1-Introduction.md
      HELM_CHART = 10;
      SARIF = 9;

      // Pieces of evidences represent generic, additional context that don't fit
      // into one of the well known material types. For example, a custom approval report (in json), ...
      EVIDENCE = 11;

      // Chainloop attestation coming from a different workflow.
      ATTESTATION = 12;
      // https://docs.oasis-open.org/csaf/csaf/v2.0/cs03/csaf-v2.0-cs03.html
      CSAF_VEX = 8;
      CSAF_INFORMATIONAL_ADVISORY = 13;
      CSAF_SECURITY_ADVISORY = 14;
      CSAF_SECURITY_INCIDENT_RESPONSE = 15;
      // Gitlab Application Security Reports https://docs.gitlab.com/ee/user/application_security/
      GITLAB_SECURITY_REPORT = 16;
      ZAP_DAST_ZIP = 17;
      BLACKDUCK_SCA_JSON = 18;
      // Twistcli scan output in json format: https://docs.prismacloud.io/en/compute-edition/30/admin-guide/tools/twistcli-scan-images
      TWISTCLI_SCAN_JSON = 19;

      // GitHub Advanced Security API reports
      // https://docs.github.com/en/rest/code-scanning/code-scanning?apiVersion=2022-11-28
      GHAS_CODE_SCAN = 20;
      // https://docs.github.com/en/rest/secret-scanning/secret-scanning?apiVersion=2022-11-28
      GHAS_SECRET_SCAN = 21;
      // https://docs.github.com/en/rest/dependabot/alerts?apiVersion=2022-11-28
      GHAS_DEPENDENCY_SCAN = 22;
    }
  }
}

message Annotation {
  string name = 1 [(buf.validate.field).string.pattern = "^[\\w]+$"]; // Single word optionally separated with _
  // This value can be set in the contract or provided during the attestation
  string value = 2;
}

message Policies {
  // Policies to be applied to materials
  repeated PolicyAttachment materials = 1;
  // Policies to be applied to attestation metadata
  repeated PolicyAttachment attestation = 2;
}

// A policy to be applied to this contract
message PolicyAttachment {
  oneof policy {
    // policy reference, it might be in URI format.
    string ref = 1 [(buf.validate.field).string.min_len = 1];

    // meant to be used to embed the policy in the contract
    Policy embedded = 2;

    option (buf.validate.oneof).required = true;
  }

  // rules to select a material or materials to be validated by the policy.
  // If none provided, the whole statement will be injected to the policy
  MaterialSelector selector = 3;

  // set to true to disable this rule
  bool disabled = 4;

  // optional arguments for policies. Multivalued arguments can be set through multiline strings or comma separated values. It will be
  // parsed and passed as an array value to the policy engine.
  // with:
  //   user: john
  //   users: john, sarah
  //   licenses: |
  //     AGPL-1.0
  //     AGPL-3.0
  map<string, string> with = 5;

  message MaterialSelector {
    // material name
    string name = 1;
  }
}

// Represents a policy to be applied to a material or attestation
message Policy {
  string api_version = 1 [(buf.validate.field).string.const = "workflowcontract.chainloop.dev/v1"];
  string kind = 2 [(buf.validate.field).string.const = "Policy"];

  Metadata metadata = 3 [(buf.validate.field).required = true];
  PolicySpec spec = 4 [(buf.validate.field).required = true];
}

message Metadata {
  // the name of the policy
  string name = 3 [(buf.validate.field) = {
    cel: {
      message: "must contain only lowercase letters, numbers, and hyphens."
      expression: "this.matches('^[a-z0-9]([-a-z0-9]*[a-z0-9])?$')"
      id: "name.dns-1123"
    }
  }];

  string description = 4;
  map<string, string> annotations = 5;
}

message PolicySpec {
  oneof source {
    // path to a policy script. It might consist of a URI reference
    string path = 1 [deprecated = true];

    // embedded source code (only Rego supported currently)
    string embedded = 2 [deprecated = true];
  }

  // if set, it will match any material supported by Chainloop
  // except those not having a direct schema (STRING, ARTIFACT, EVIDENCE), since their format cannot be guessed by the crafter.
  // CONTAINER, HELM_CHART are also excluded, but we might implement custom policies for them in the future.
  CraftingSchema.Material.MaterialType type = 3 [
    (buf.validate.field).enum = {
      not_in: [
        1,
        3,
        10,
        11
      ]
    },
    deprecated = true
  ];

  repeated PolicySpecV2 policies = 4;

  option (buf.validate.message).cel = {
    id: "policyspec"
    message: "either spec source or policies fields must be provided"
    expression: "has(this.path) || has(this.embedded) || size(this.policies) > 0"
  };
}

message PolicySpecV2 {
  oneof source {
    // path to a policy script. It might consist of a URI reference
    string path = 1;

    // embedded source code (only Rego supported currently)
    string embedded = 2;

    option (buf.validate.oneof).required = true;
  }

  // if set, it will match any material supported by Chainloop
  // except those not having a direct schema (STRING, ARTIFACT, EVIDENCE), since their format cannot be guessed by the crafter.
  // CONTAINER, HELM_CHART are also excluded, but we might implement custom policies for them in the future.
  CraftingSchema.Material.MaterialType kind = 3 [(buf.validate.field).enum = {
    not_in: [
      1,
      3,
      10,
      11
    ]
  }];
}

// Represents a group attachment in a contract
message PolicyGroupAttachment {
  // Group reference, it might be an URL or a provider reference
  string ref = 1 [(buf.validate.field).string.min_len = 1];
}

// Represents a group or policies
message PolicyGroup {
  string api_version = 1 [(buf.validate.field).string.const = "workflowcontract.chainloop.dev/v1"];
  string kind = 2 [(buf.validate.field).string.const = "PolicyGroup"];

  Metadata metadata = 3 [(buf.validate.field).required = true];
  PolicyGroupSpec spec = 4 [(buf.validate.field).required = true];

  message PolicyGroupSpec {
    PolicyGroupPolicies policies = 1;
  }

  message PolicyGroupPolicies {
    repeated CraftingSchema.Material materials = 1;
    repeated PolicyAttachment attestation = 2;
  }
}
