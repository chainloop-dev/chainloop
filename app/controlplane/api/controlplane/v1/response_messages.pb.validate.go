// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: controlplane/v1/response_messages.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1 "github.com/chainloop-dev/chainloop/app/controlplane/api/workflowcontract/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1.CraftingSchema_Runner_RunnerType(0)
)

// Validate checks the field values on WorkflowItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkflowItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WorkflowItemMultiError, or
// nil if none found.
func (m *WorkflowItem) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Project

	// no validation rules for Team

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RunsCount

	if all {
		switch v := interface{}(m.GetLastRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowItemValidationError{
					field:  "LastRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowItemValidationError{
					field:  "LastRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowItemValidationError{
				field:  "LastRun",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ContractId

	// no validation rules for ContractRevisionLatest

	// no validation rules for Public

	// no validation rules for Description

	if len(errors) > 0 {
		return WorkflowItemMultiError(errors)
	}

	return nil
}

// WorkflowItemMultiError is an error wrapping multiple validation errors
// returned by WorkflowItem.ValidateAll() if the designated constraints aren't met.
type WorkflowItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowItemMultiError) AllErrors() []error { return m }

// WorkflowItemValidationError is the validation error returned by
// WorkflowItem.Validate if the designated constraints aren't met.
type WorkflowItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowItemValidationError) ErrorName() string { return "WorkflowItemValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowItemValidationError{}

// Validate checks the field values on WorkflowRunItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorkflowRunItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowRunItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowRunItemMultiError, or nil if none found.
func (m *WorkflowRunItem) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowRunItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowRunItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowRunItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowRunItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFinishedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowRunItemValidationError{
					field:  "FinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowRunItemValidationError{
					field:  "FinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinishedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowRunItemValidationError{
				field:  "FinishedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	// no validation rules for Status

	// no validation rules for Reason

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowRunItemValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowRunItemValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowRunItemValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for JobUrl

	// no validation rules for RunnerType

	if all {
		switch v := interface{}(m.GetContractVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowRunItemValidationError{
					field:  "ContractVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowRunItemValidationError{
					field:  "ContractVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContractVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowRunItemValidationError{
				field:  "ContractVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ContractRevisionUsed

	// no validation rules for ContractRevisionLatest

	if len(errors) > 0 {
		return WorkflowRunItemMultiError(errors)
	}

	return nil
}

// WorkflowRunItemMultiError is an error wrapping multiple validation errors
// returned by WorkflowRunItem.ValidateAll() if the designated constraints
// aren't met.
type WorkflowRunItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowRunItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowRunItemMultiError) AllErrors() []error { return m }

// WorkflowRunItemValidationError is the validation error returned by
// WorkflowRunItem.Validate if the designated constraints aren't met.
type WorkflowRunItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowRunItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowRunItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowRunItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowRunItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowRunItemValidationError) ErrorName() string { return "WorkflowRunItemValidationError" }

// Error satisfies the builtin error interface
func (e WorkflowRunItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowRunItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowRunItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowRunItemValidationError{}

// Validate checks the field values on AttestationItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AttestationItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttestationItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttestationItemMultiError, or nil if none found.
func (m *AttestationItem) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Envelope

	// no validation rules for DigestInCasBackend

	for idx, item := range m.GetEnvVars() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AttestationItemValidationError{
						field:  fmt.Sprintf("EnvVars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AttestationItemValidationError{
						field:  fmt.Sprintf("EnvVars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AttestationItemValidationError{
					field:  fmt.Sprintf("EnvVars[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMaterials() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AttestationItemValidationError{
						field:  fmt.Sprintf("Materials[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AttestationItemValidationError{
						field:  fmt.Sprintf("Materials[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AttestationItemValidationError{
					field:  fmt.Sprintf("Materials[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Annotations

	if len(errors) > 0 {
		return AttestationItemMultiError(errors)
	}

	return nil
}

// AttestationItemMultiError is an error wrapping multiple validation errors
// returned by AttestationItem.ValidateAll() if the designated constraints
// aren't met.
type AttestationItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationItemMultiError) AllErrors() []error { return m }

// AttestationItemValidationError is the validation error returned by
// AttestationItem.Validate if the designated constraints aren't met.
type AttestationItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationItemValidationError) ErrorName() string { return "AttestationItemValidationError" }

// Error satisfies the builtin error interface
func (e AttestationItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationItemValidationError{}

// Validate checks the field values on WorkflowContractItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowContractItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowContractItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowContractItemMultiError, or nil if none found.
func (m *WorkflowContractItem) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowContractItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowContractItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowContractItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowContractItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LatestRevision

	if len(errors) > 0 {
		return WorkflowContractItemMultiError(errors)
	}

	return nil
}

// WorkflowContractItemMultiError is an error wrapping multiple validation
// errors returned by WorkflowContractItem.ValidateAll() if the designated
// constraints aren't met.
type WorkflowContractItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowContractItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowContractItemMultiError) AllErrors() []error { return m }

// WorkflowContractItemValidationError is the validation error returned by
// WorkflowContractItem.Validate if the designated constraints aren't met.
type WorkflowContractItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowContractItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowContractItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowContractItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowContractItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowContractItemValidationError) ErrorName() string {
	return "WorkflowContractItemValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowContractItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowContractItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowContractItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowContractItemValidationError{}

// Validate checks the field values on WorkflowContractVersionItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowContractVersionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowContractVersionItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowContractVersionItemMultiError, or nil if none found.
func (m *WorkflowContractVersionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowContractVersionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Revision

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowContractVersionItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowContractVersionItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowContractVersionItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Contract.(type) {
	case *WorkflowContractVersionItem_V1:
		if v == nil {
			err := WorkflowContractVersionItemValidationError{
				field:  "Contract",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetV1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkflowContractVersionItemValidationError{
						field:  "V1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkflowContractVersionItemValidationError{
						field:  "V1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetV1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowContractVersionItemValidationError{
					field:  "V1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return WorkflowContractVersionItemMultiError(errors)
	}

	return nil
}

// WorkflowContractVersionItemMultiError is an error wrapping multiple
// validation errors returned by WorkflowContractVersionItem.ValidateAll() if
// the designated constraints aren't met.
type WorkflowContractVersionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowContractVersionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowContractVersionItemMultiError) AllErrors() []error { return m }

// WorkflowContractVersionItemValidationError is the validation error returned
// by WorkflowContractVersionItem.Validate if the designated constraints
// aren't met.
type WorkflowContractVersionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowContractVersionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowContractVersionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowContractVersionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowContractVersionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowContractVersionItemValidationError) ErrorName() string {
	return "WorkflowContractVersionItemValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowContractVersionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowContractVersionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowContractVersionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowContractVersionItemValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on OrgMembershipItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrgMembershipItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgMembershipItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrgMembershipItemMultiError, or nil if none found.
func (m *OrgMembershipItem) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgMembershipItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetOrg()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgMembershipItemValidationError{
					field:  "Org",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgMembershipItemValidationError{
					field:  "Org",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgMembershipItemValidationError{
				field:  "Org",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgMembershipItemValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgMembershipItemValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgMembershipItemValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Current

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgMembershipItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgMembershipItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgMembershipItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgMembershipItemValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgMembershipItemValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgMembershipItemValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Role

	if len(errors) > 0 {
		return OrgMembershipItemMultiError(errors)
	}

	return nil
}

// OrgMembershipItemMultiError is an error wrapping multiple validation errors
// returned by OrgMembershipItem.ValidateAll() if the designated constraints
// aren't met.
type OrgMembershipItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgMembershipItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgMembershipItemMultiError) AllErrors() []error { return m }

// OrgMembershipItemValidationError is the validation error returned by
// OrgMembershipItem.Validate if the designated constraints aren't met.
type OrgMembershipItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgMembershipItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgMembershipItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgMembershipItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgMembershipItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgMembershipItemValidationError) ErrorName() string {
	return "OrgMembershipItemValidationError"
}

// Error satisfies the builtin error interface
func (e OrgMembershipItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgMembershipItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgMembershipItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgMembershipItemValidationError{}

// Validate checks the field values on OrgItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrgItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrgItemMultiError, or nil if none found.
func (m *OrgItem) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrgItemMultiError(errors)
	}

	return nil
}

// OrgItemMultiError is an error wrapping multiple validation errors returned
// by OrgItem.ValidateAll() if the designated constraints aren't met.
type OrgItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgItemMultiError) AllErrors() []error { return m }

// OrgItemValidationError is the validation error returned by OrgItem.Validate
// if the designated constraints aren't met.
type OrgItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgItemValidationError) ErrorName() string { return "OrgItemValidationError" }

// Error satisfies the builtin error interface
func (e OrgItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgItemValidationError{}

// Validate checks the field values on CASBackendItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CASBackendItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CASBackendItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CASBackendItemMultiError,
// or nil if none found.
func (m *CASBackendItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CASBackendItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Location

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CASBackendItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CASBackendItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CASBackendItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValidatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CASBackendItemValidationError{
					field:  "ValidatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CASBackendItemValidationError{
					field:  "ValidatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CASBackendItemValidationError{
				field:  "ValidatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ValidationStatus

	// no validation rules for Provider

	// no validation rules for Default

	if all {
		switch v := interface{}(m.GetLimits()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CASBackendItemValidationError{
					field:  "Limits",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CASBackendItemValidationError{
					field:  "Limits",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLimits()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CASBackendItemValidationError{
				field:  "Limits",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsInline

	if len(errors) > 0 {
		return CASBackendItemMultiError(errors)
	}

	return nil
}

// CASBackendItemMultiError is an error wrapping multiple validation errors
// returned by CASBackendItem.ValidateAll() if the designated constraints
// aren't met.
type CASBackendItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CASBackendItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CASBackendItemMultiError) AllErrors() []error { return m }

// CASBackendItemValidationError is the validation error returned by
// CASBackendItem.Validate if the designated constraints aren't met.
type CASBackendItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CASBackendItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CASBackendItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CASBackendItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CASBackendItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CASBackendItemValidationError) ErrorName() string { return "CASBackendItemValidationError" }

// Error satisfies the builtin error interface
func (e CASBackendItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCASBackendItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CASBackendItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CASBackendItemValidationError{}

// Validate checks the field values on AttestationItem_EnvVariable with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttestationItem_EnvVariable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttestationItem_EnvVariable with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttestationItem_EnvVariableMultiError, or nil if none found.
func (m *AttestationItem_EnvVariable) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationItem_EnvVariable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Value

	if len(errors) > 0 {
		return AttestationItem_EnvVariableMultiError(errors)
	}

	return nil
}

// AttestationItem_EnvVariableMultiError is an error wrapping multiple
// validation errors returned by AttestationItem_EnvVariable.ValidateAll() if
// the designated constraints aren't met.
type AttestationItem_EnvVariableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationItem_EnvVariableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationItem_EnvVariableMultiError) AllErrors() []error { return m }

// AttestationItem_EnvVariableValidationError is the validation error returned
// by AttestationItem_EnvVariable.Validate if the designated constraints
// aren't met.
type AttestationItem_EnvVariableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationItem_EnvVariableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationItem_EnvVariableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationItem_EnvVariableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationItem_EnvVariableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationItem_EnvVariableValidationError) ErrorName() string {
	return "AttestationItem_EnvVariableValidationError"
}

// Error satisfies the builtin error interface
func (e AttestationItem_EnvVariableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationItem_EnvVariable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationItem_EnvVariableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationItem_EnvVariableValidationError{}

// Validate checks the field values on AttestationItem_Material with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttestationItem_Material) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttestationItem_Material with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttestationItem_MaterialMultiError, or nil if none found.
func (m *AttestationItem_Material) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationItem_Material) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Value

	// no validation rules for Filename

	// no validation rules for Type

	// no validation rules for Annotations

	// no validation rules for Hash

	// no validation rules for UploadedToCas

	// no validation rules for EmbeddedInline

	if len(errors) > 0 {
		return AttestationItem_MaterialMultiError(errors)
	}

	return nil
}

// AttestationItem_MaterialMultiError is an error wrapping multiple validation
// errors returned by AttestationItem_Material.ValidateAll() if the designated
// constraints aren't met.
type AttestationItem_MaterialMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationItem_MaterialMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationItem_MaterialMultiError) AllErrors() []error { return m }

// AttestationItem_MaterialValidationError is the validation error returned by
// AttestationItem_Material.Validate if the designated constraints aren't met.
type AttestationItem_MaterialValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationItem_MaterialValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationItem_MaterialValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationItem_MaterialValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationItem_MaterialValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationItem_MaterialValidationError) ErrorName() string {
	return "AttestationItem_MaterialValidationError"
}

// Error satisfies the builtin error interface
func (e AttestationItem_MaterialValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationItem_Material.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationItem_MaterialValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationItem_MaterialValidationError{}

// Validate checks the field values on CASBackendItem_Limits with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CASBackendItem_Limits) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CASBackendItem_Limits with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CASBackendItem_LimitsMultiError, or nil if none found.
func (m *CASBackendItem_Limits) ValidateAll() error {
	return m.validate(true)
}

func (m *CASBackendItem_Limits) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaxBytes

	if len(errors) > 0 {
		return CASBackendItem_LimitsMultiError(errors)
	}

	return nil
}

// CASBackendItem_LimitsMultiError is an error wrapping multiple validation
// errors returned by CASBackendItem_Limits.ValidateAll() if the designated
// constraints aren't met.
type CASBackendItem_LimitsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CASBackendItem_LimitsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CASBackendItem_LimitsMultiError) AllErrors() []error { return m }

// CASBackendItem_LimitsValidationError is the validation error returned by
// CASBackendItem_Limits.Validate if the designated constraints aren't met.
type CASBackendItem_LimitsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CASBackendItem_LimitsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CASBackendItem_LimitsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CASBackendItem_LimitsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CASBackendItem_LimitsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CASBackendItem_LimitsValidationError) ErrorName() string {
	return "CASBackendItem_LimitsValidationError"
}

// Error satisfies the builtin error interface
func (e CASBackendItem_LimitsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCASBackendItem_Limits.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CASBackendItem_LimitsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CASBackendItem_LimitsValidationError{}
