// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: controlplane/v1/pagination.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CursorPaginationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CursorPaginationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CursorPaginationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CursorPaginationResponseMultiError, or nil if none found.
func (m *CursorPaginationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CursorPaginationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextCursor

	if len(errors) > 0 {
		return CursorPaginationResponseMultiError(errors)
	}

	return nil
}

// CursorPaginationResponseMultiError is an error wrapping multiple validation
// errors returned by CursorPaginationResponse.ValidateAll() if the designated
// constraints aren't met.
type CursorPaginationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CursorPaginationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CursorPaginationResponseMultiError) AllErrors() []error { return m }

// CursorPaginationResponseValidationError is the validation error returned by
// CursorPaginationResponse.Validate if the designated constraints aren't met.
type CursorPaginationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CursorPaginationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CursorPaginationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CursorPaginationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CursorPaginationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CursorPaginationResponseValidationError) ErrorName() string {
	return "CursorPaginationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CursorPaginationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCursorPaginationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CursorPaginationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CursorPaginationResponseValidationError{}

// Validate checks the field values on CursorPaginationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CursorPaginationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CursorPaginationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CursorPaginationRequestMultiError, or nil if none found.
func (m *CursorPaginationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CursorPaginationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cursor

	if m.GetLimit() != 0 {

		if val := m.GetLimit(); val < 2 || val > 100 {
			err := CursorPaginationRequestValidationError{
				field:  "Limit",
				reason: "value must be inside range [2, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CursorPaginationRequestMultiError(errors)
	}

	return nil
}

// CursorPaginationRequestMultiError is an error wrapping multiple validation
// errors returned by CursorPaginationRequest.ValidateAll() if the designated
// constraints aren't met.
type CursorPaginationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CursorPaginationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CursorPaginationRequestMultiError) AllErrors() []error { return m }

// CursorPaginationRequestValidationError is the validation error returned by
// CursorPaginationRequest.Validate if the designated constraints aren't met.
type CursorPaginationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CursorPaginationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CursorPaginationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CursorPaginationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CursorPaginationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CursorPaginationRequestValidationError) ErrorName() string {
	return "CursorPaginationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CursorPaginationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCursorPaginationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CursorPaginationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CursorPaginationRequestValidationError{}
