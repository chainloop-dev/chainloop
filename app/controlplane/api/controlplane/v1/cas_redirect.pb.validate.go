// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: controlplane/v1/cas_redirect.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetDownloadURLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDownloadURLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDownloadURLRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDownloadURLRequestMultiError, or nil if none found.
func (m *GetDownloadURLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDownloadURLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDigest()) < 1 {
		err := GetDownloadURLRequestValidationError{
			field:  "Digest",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDownloadURLRequestMultiError(errors)
	}

	return nil
}

// GetDownloadURLRequestMultiError is an error wrapping multiple validation
// errors returned by GetDownloadURLRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDownloadURLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDownloadURLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDownloadURLRequestMultiError) AllErrors() []error { return m }

// GetDownloadURLRequestValidationError is the validation error returned by
// GetDownloadURLRequest.Validate if the designated constraints aren't met.
type GetDownloadURLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDownloadURLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDownloadURLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDownloadURLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDownloadURLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDownloadURLRequestValidationError) ErrorName() string {
	return "GetDownloadURLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDownloadURLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDownloadURLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDownloadURLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDownloadURLRequestValidationError{}

// Validate checks the field values on GetDownloadURLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDownloadURLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDownloadURLResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDownloadURLResponseMultiError, or nil if none found.
func (m *GetDownloadURLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDownloadURLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDownloadURLResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDownloadURLResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDownloadURLResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDownloadURLResponseMultiError(errors)
	}

	return nil
}

// GetDownloadURLResponseMultiError is an error wrapping multiple validation
// errors returned by GetDownloadURLResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDownloadURLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDownloadURLResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDownloadURLResponseMultiError) AllErrors() []error { return m }

// GetDownloadURLResponseValidationError is the validation error returned by
// GetDownloadURLResponse.Validate if the designated constraints aren't met.
type GetDownloadURLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDownloadURLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDownloadURLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDownloadURLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDownloadURLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDownloadURLResponseValidationError) ErrorName() string {
	return "GetDownloadURLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDownloadURLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDownloadURLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDownloadURLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDownloadURLResponseValidationError{}

// Validate checks the field values on GetDownloadURLResponse_Result with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDownloadURLResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDownloadURLResponse_Result with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDownloadURLResponse_ResultMultiError, or nil if none found.
func (m *GetDownloadURLResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDownloadURLResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return GetDownloadURLResponse_ResultMultiError(errors)
	}

	return nil
}

// GetDownloadURLResponse_ResultMultiError is an error wrapping multiple
// validation errors returned by GetDownloadURLResponse_Result.ValidateAll()
// if the designated constraints aren't met.
type GetDownloadURLResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDownloadURLResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDownloadURLResponse_ResultMultiError) AllErrors() []error { return m }

// GetDownloadURLResponse_ResultValidationError is the validation error
// returned by GetDownloadURLResponse_Result.Validate if the designated
// constraints aren't met.
type GetDownloadURLResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDownloadURLResponse_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDownloadURLResponse_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDownloadURLResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDownloadURLResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDownloadURLResponse_ResultValidationError) ErrorName() string {
	return "GetDownloadURLResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e GetDownloadURLResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDownloadURLResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDownloadURLResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDownloadURLResponse_ResultValidationError{}
