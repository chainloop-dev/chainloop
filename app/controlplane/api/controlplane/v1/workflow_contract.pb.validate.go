// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: controlplane/v1/workflow_contract.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _workflow_contract_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on WorkflowContractServiceListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *WorkflowContractServiceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowContractServiceListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WorkflowContractServiceListRequestMultiError, or nil if none found.
func (m *WorkflowContractServiceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowContractServiceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WorkflowContractServiceListRequestMultiError(errors)
	}

	return nil
}

// WorkflowContractServiceListRequestMultiError is an error wrapping multiple
// validation errors returned by
// WorkflowContractServiceListRequest.ValidateAll() if the designated
// constraints aren't met.
type WorkflowContractServiceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowContractServiceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowContractServiceListRequestMultiError) AllErrors() []error { return m }

// WorkflowContractServiceListRequestValidationError is the validation error
// returned by WorkflowContractServiceListRequest.Validate if the designated
// constraints aren't met.
type WorkflowContractServiceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowContractServiceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowContractServiceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowContractServiceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowContractServiceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowContractServiceListRequestValidationError) ErrorName() string {
	return "WorkflowContractServiceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowContractServiceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowContractServiceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowContractServiceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowContractServiceListRequestValidationError{}

// Validate checks the field values on WorkflowContractServiceListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *WorkflowContractServiceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowContractServiceListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WorkflowContractServiceListResponseMultiError, or nil if none found.
func (m *WorkflowContractServiceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowContractServiceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkflowContractServiceListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkflowContractServiceListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowContractServiceListResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WorkflowContractServiceListResponseMultiError(errors)
	}

	return nil
}

// WorkflowContractServiceListResponseMultiError is an error wrapping multiple
// validation errors returned by
// WorkflowContractServiceListResponse.ValidateAll() if the designated
// constraints aren't met.
type WorkflowContractServiceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowContractServiceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowContractServiceListResponseMultiError) AllErrors() []error { return m }

// WorkflowContractServiceListResponseValidationError is the validation error
// returned by WorkflowContractServiceListResponse.Validate if the designated
// constraints aren't met.
type WorkflowContractServiceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowContractServiceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowContractServiceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowContractServiceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowContractServiceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowContractServiceListResponseValidationError) ErrorName() string {
	return "WorkflowContractServiceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowContractServiceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowContractServiceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowContractServiceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowContractServiceListResponseValidationError{}

// Validate checks the field values on WorkflowContractServiceCreateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowContractServiceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowContractServiceCreateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WorkflowContractServiceCreateRequestMultiError, or nil if none found.
func (m *WorkflowContractServiceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowContractServiceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := WorkflowContractServiceCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Contract.(type) {
	case *WorkflowContractServiceCreateRequest_V1:
		if v == nil {
			err := WorkflowContractServiceCreateRequestValidationError{
				field:  "Contract",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetV1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkflowContractServiceCreateRequestValidationError{
						field:  "V1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkflowContractServiceCreateRequestValidationError{
						field:  "V1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetV1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowContractServiceCreateRequestValidationError{
					field:  "V1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return WorkflowContractServiceCreateRequestMultiError(errors)
	}

	return nil
}

// WorkflowContractServiceCreateRequestMultiError is an error wrapping multiple
// validation errors returned by
// WorkflowContractServiceCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type WorkflowContractServiceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowContractServiceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowContractServiceCreateRequestMultiError) AllErrors() []error { return m }

// WorkflowContractServiceCreateRequestValidationError is the validation error
// returned by WorkflowContractServiceCreateRequest.Validate if the designated
// constraints aren't met.
type WorkflowContractServiceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowContractServiceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowContractServiceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowContractServiceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowContractServiceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowContractServiceCreateRequestValidationError) ErrorName() string {
	return "WorkflowContractServiceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowContractServiceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowContractServiceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowContractServiceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowContractServiceCreateRequestValidationError{}

// Validate checks the field values on WorkflowContractServiceCreateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowContractServiceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowContractServiceCreateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WorkflowContractServiceCreateResponseMultiError, or nil if none found.
func (m *WorkflowContractServiceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowContractServiceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowContractServiceCreateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowContractServiceCreateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowContractServiceCreateResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowContractServiceCreateResponseMultiError(errors)
	}

	return nil
}

// WorkflowContractServiceCreateResponseMultiError is an error wrapping
// multiple validation errors returned by
// WorkflowContractServiceCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type WorkflowContractServiceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowContractServiceCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowContractServiceCreateResponseMultiError) AllErrors() []error { return m }

// WorkflowContractServiceCreateResponseValidationError is the validation error
// returned by WorkflowContractServiceCreateResponse.Validate if the
// designated constraints aren't met.
type WorkflowContractServiceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowContractServiceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowContractServiceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowContractServiceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowContractServiceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowContractServiceCreateResponseValidationError) ErrorName() string {
	return "WorkflowContractServiceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowContractServiceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowContractServiceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowContractServiceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowContractServiceCreateResponseValidationError{}

// Validate checks the field values on WorkflowContractServiceUpdateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowContractServiceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowContractServiceUpdateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WorkflowContractServiceUpdateRequestMultiError, or nil if none found.
func (m *WorkflowContractServiceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowContractServiceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = WorkflowContractServiceUpdateRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	switch v := m.Contract.(type) {
	case *WorkflowContractServiceUpdateRequest_V1:
		if v == nil {
			err := WorkflowContractServiceUpdateRequestValidationError{
				field:  "Contract",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetV1()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkflowContractServiceUpdateRequestValidationError{
						field:  "V1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkflowContractServiceUpdateRequestValidationError{
						field:  "V1",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetV1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowContractServiceUpdateRequestValidationError{
					field:  "V1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return WorkflowContractServiceUpdateRequestMultiError(errors)
	}

	return nil
}

func (m *WorkflowContractServiceUpdateRequest) _validateUuid(uuid string) error {
	if matched := _workflow_contract_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// WorkflowContractServiceUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by
// WorkflowContractServiceUpdateRequest.ValidateAll() if the designated
// constraints aren't met.
type WorkflowContractServiceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowContractServiceUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowContractServiceUpdateRequestMultiError) AllErrors() []error { return m }

// WorkflowContractServiceUpdateRequestValidationError is the validation error
// returned by WorkflowContractServiceUpdateRequest.Validate if the designated
// constraints aren't met.
type WorkflowContractServiceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowContractServiceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowContractServiceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowContractServiceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowContractServiceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowContractServiceUpdateRequestValidationError) ErrorName() string {
	return "WorkflowContractServiceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowContractServiceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowContractServiceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowContractServiceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowContractServiceUpdateRequestValidationError{}

// Validate checks the field values on WorkflowContractServiceUpdateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowContractServiceUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowContractServiceUpdateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WorkflowContractServiceUpdateResponseMultiError, or nil if none found.
func (m *WorkflowContractServiceUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowContractServiceUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowContractServiceUpdateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowContractServiceUpdateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowContractServiceUpdateResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowContractServiceUpdateResponseMultiError(errors)
	}

	return nil
}

// WorkflowContractServiceUpdateResponseMultiError is an error wrapping
// multiple validation errors returned by
// WorkflowContractServiceUpdateResponse.ValidateAll() if the designated
// constraints aren't met.
type WorkflowContractServiceUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowContractServiceUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowContractServiceUpdateResponseMultiError) AllErrors() []error { return m }

// WorkflowContractServiceUpdateResponseValidationError is the validation error
// returned by WorkflowContractServiceUpdateResponse.Validate if the
// designated constraints aren't met.
type WorkflowContractServiceUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowContractServiceUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowContractServiceUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowContractServiceUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowContractServiceUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowContractServiceUpdateResponseValidationError) ErrorName() string {
	return "WorkflowContractServiceUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowContractServiceUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowContractServiceUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowContractServiceUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowContractServiceUpdateResponseValidationError{}

// Validate checks the field values on WorkflowContractServiceDescribeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowContractServiceDescribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowContractServiceDescribeRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// WorkflowContractServiceDescribeRequestMultiError, or nil if none found.
func (m *WorkflowContractServiceDescribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowContractServiceDescribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = WorkflowContractServiceDescribeRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Revision

	if len(errors) > 0 {
		return WorkflowContractServiceDescribeRequestMultiError(errors)
	}

	return nil
}

func (m *WorkflowContractServiceDescribeRequest) _validateUuid(uuid string) error {
	if matched := _workflow_contract_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// WorkflowContractServiceDescribeRequestMultiError is an error wrapping
// multiple validation errors returned by
// WorkflowContractServiceDescribeRequest.ValidateAll() if the designated
// constraints aren't met.
type WorkflowContractServiceDescribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowContractServiceDescribeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowContractServiceDescribeRequestMultiError) AllErrors() []error { return m }

// WorkflowContractServiceDescribeRequestValidationError is the validation
// error returned by WorkflowContractServiceDescribeRequest.Validate if the
// designated constraints aren't met.
type WorkflowContractServiceDescribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowContractServiceDescribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowContractServiceDescribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowContractServiceDescribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowContractServiceDescribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowContractServiceDescribeRequestValidationError) ErrorName() string {
	return "WorkflowContractServiceDescribeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowContractServiceDescribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowContractServiceDescribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowContractServiceDescribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowContractServiceDescribeRequestValidationError{}

// Validate checks the field values on WorkflowContractServiceDescribeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowContractServiceDescribeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowContractServiceDescribeResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// WorkflowContractServiceDescribeResponseMultiError, or nil if none found.
func (m *WorkflowContractServiceDescribeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowContractServiceDescribeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowContractServiceDescribeResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowContractServiceDescribeResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowContractServiceDescribeResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowContractServiceDescribeResponseMultiError(errors)
	}

	return nil
}

// WorkflowContractServiceDescribeResponseMultiError is an error wrapping
// multiple validation errors returned by
// WorkflowContractServiceDescribeResponse.ValidateAll() if the designated
// constraints aren't met.
type WorkflowContractServiceDescribeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowContractServiceDescribeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowContractServiceDescribeResponseMultiError) AllErrors() []error { return m }

// WorkflowContractServiceDescribeResponseValidationError is the validation
// error returned by WorkflowContractServiceDescribeResponse.Validate if the
// designated constraints aren't met.
type WorkflowContractServiceDescribeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowContractServiceDescribeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowContractServiceDescribeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowContractServiceDescribeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowContractServiceDescribeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowContractServiceDescribeResponseValidationError) ErrorName() string {
	return "WorkflowContractServiceDescribeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowContractServiceDescribeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowContractServiceDescribeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowContractServiceDescribeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowContractServiceDescribeResponseValidationError{}

// Validate checks the field values on WorkflowContractServiceDeleteRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowContractServiceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowContractServiceDeleteRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WorkflowContractServiceDeleteRequestMultiError, or nil if none found.
func (m *WorkflowContractServiceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowContractServiceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = WorkflowContractServiceDeleteRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WorkflowContractServiceDeleteRequestMultiError(errors)
	}

	return nil
}

func (m *WorkflowContractServiceDeleteRequest) _validateUuid(uuid string) error {
	if matched := _workflow_contract_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// WorkflowContractServiceDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by
// WorkflowContractServiceDeleteRequest.ValidateAll() if the designated
// constraints aren't met.
type WorkflowContractServiceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowContractServiceDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowContractServiceDeleteRequestMultiError) AllErrors() []error { return m }

// WorkflowContractServiceDeleteRequestValidationError is the validation error
// returned by WorkflowContractServiceDeleteRequest.Validate if the designated
// constraints aren't met.
type WorkflowContractServiceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowContractServiceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowContractServiceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowContractServiceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowContractServiceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowContractServiceDeleteRequestValidationError) ErrorName() string {
	return "WorkflowContractServiceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowContractServiceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowContractServiceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowContractServiceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowContractServiceDeleteRequestValidationError{}

// Validate checks the field values on WorkflowContractServiceDeleteResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowContractServiceDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowContractServiceDeleteResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WorkflowContractServiceDeleteResponseMultiError, or nil if none found.
func (m *WorkflowContractServiceDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowContractServiceDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WorkflowContractServiceDeleteResponseMultiError(errors)
	}

	return nil
}

// WorkflowContractServiceDeleteResponseMultiError is an error wrapping
// multiple validation errors returned by
// WorkflowContractServiceDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type WorkflowContractServiceDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowContractServiceDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowContractServiceDeleteResponseMultiError) AllErrors() []error { return m }

// WorkflowContractServiceDeleteResponseValidationError is the validation error
// returned by WorkflowContractServiceDeleteResponse.Validate if the
// designated constraints aren't met.
type WorkflowContractServiceDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowContractServiceDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowContractServiceDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowContractServiceDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowContractServiceDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowContractServiceDeleteResponseValidationError) ErrorName() string {
	return "WorkflowContractServiceDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowContractServiceDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowContractServiceDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowContractServiceDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowContractServiceDeleteResponseValidationError{}

// Validate checks the field values on
// WorkflowContractServiceUpdateResponse_Result with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkflowContractServiceUpdateResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowContractServiceUpdateResponse_Result with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// WorkflowContractServiceUpdateResponse_ResultMultiError, or nil if none found.
func (m *WorkflowContractServiceUpdateResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowContractServiceUpdateResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetContract()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowContractServiceUpdateResponse_ResultValidationError{
					field:  "Contract",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowContractServiceUpdateResponse_ResultValidationError{
					field:  "Contract",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContract()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowContractServiceUpdateResponse_ResultValidationError{
				field:  "Contract",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRevision()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowContractServiceUpdateResponse_ResultValidationError{
					field:  "Revision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowContractServiceUpdateResponse_ResultValidationError{
					field:  "Revision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRevision()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowContractServiceUpdateResponse_ResultValidationError{
				field:  "Revision",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowContractServiceUpdateResponse_ResultMultiError(errors)
	}

	return nil
}

// WorkflowContractServiceUpdateResponse_ResultMultiError is an error wrapping
// multiple validation errors returned by
// WorkflowContractServiceUpdateResponse_Result.ValidateAll() if the
// designated constraints aren't met.
type WorkflowContractServiceUpdateResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowContractServiceUpdateResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowContractServiceUpdateResponse_ResultMultiError) AllErrors() []error { return m }

// WorkflowContractServiceUpdateResponse_ResultValidationError is the
// validation error returned by
// WorkflowContractServiceUpdateResponse_Result.Validate if the designated
// constraints aren't met.
type WorkflowContractServiceUpdateResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowContractServiceUpdateResponse_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowContractServiceUpdateResponse_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowContractServiceUpdateResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowContractServiceUpdateResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowContractServiceUpdateResponse_ResultValidationError) ErrorName() string {
	return "WorkflowContractServiceUpdateResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowContractServiceUpdateResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowContractServiceUpdateResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowContractServiceUpdateResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowContractServiceUpdateResponse_ResultValidationError{}

// Validate checks the field values on
// WorkflowContractServiceDescribeResponse_Result with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkflowContractServiceDescribeResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// WorkflowContractServiceDescribeResponse_Result with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// WorkflowContractServiceDescribeResponse_ResultMultiError, or nil if none found.
func (m *WorkflowContractServiceDescribeResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowContractServiceDescribeResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetContract()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowContractServiceDescribeResponse_ResultValidationError{
					field:  "Contract",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowContractServiceDescribeResponse_ResultValidationError{
					field:  "Contract",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContract()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowContractServiceDescribeResponse_ResultValidationError{
				field:  "Contract",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRevision()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowContractServiceDescribeResponse_ResultValidationError{
					field:  "Revision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowContractServiceDescribeResponse_ResultValidationError{
					field:  "Revision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRevision()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowContractServiceDescribeResponse_ResultValidationError{
				field:  "Revision",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowContractServiceDescribeResponse_ResultMultiError(errors)
	}

	return nil
}

// WorkflowContractServiceDescribeResponse_ResultMultiError is an error
// wrapping multiple validation errors returned by
// WorkflowContractServiceDescribeResponse_Result.ValidateAll() if the
// designated constraints aren't met.
type WorkflowContractServiceDescribeResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowContractServiceDescribeResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowContractServiceDescribeResponse_ResultMultiError) AllErrors() []error { return m }

// WorkflowContractServiceDescribeResponse_ResultValidationError is the
// validation error returned by
// WorkflowContractServiceDescribeResponse_Result.Validate if the designated
// constraints aren't met.
type WorkflowContractServiceDescribeResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowContractServiceDescribeResponse_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowContractServiceDescribeResponse_ResultValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e WorkflowContractServiceDescribeResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowContractServiceDescribeResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowContractServiceDescribeResponse_ResultValidationError) ErrorName() string {
	return "WorkflowContractServiceDescribeResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowContractServiceDescribeResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowContractServiceDescribeResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowContractServiceDescribeResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowContractServiceDescribeResponse_ResultValidationError{}
