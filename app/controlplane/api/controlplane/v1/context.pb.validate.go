// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: controlplane/v1/context.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ContextServiceCurrentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContextServiceCurrentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContextServiceCurrentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContextServiceCurrentRequestMultiError, or nil if none found.
func (m *ContextServiceCurrentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ContextServiceCurrentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ContextServiceCurrentRequestMultiError(errors)
	}

	return nil
}

// ContextServiceCurrentRequestMultiError is an error wrapping multiple
// validation errors returned by ContextServiceCurrentRequest.ValidateAll() if
// the designated constraints aren't met.
type ContextServiceCurrentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContextServiceCurrentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContextServiceCurrentRequestMultiError) AllErrors() []error { return m }

// ContextServiceCurrentRequestValidationError is the validation error returned
// by ContextServiceCurrentRequest.Validate if the designated constraints
// aren't met.
type ContextServiceCurrentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContextServiceCurrentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContextServiceCurrentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContextServiceCurrentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContextServiceCurrentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContextServiceCurrentRequestValidationError) ErrorName() string {
	return "ContextServiceCurrentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ContextServiceCurrentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContextServiceCurrentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContextServiceCurrentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContextServiceCurrentRequestValidationError{}

// Validate checks the field values on ContextServiceCurrentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ContextServiceCurrentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContextServiceCurrentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ContextServiceCurrentResponseMultiError, or nil if none found.
func (m *ContextServiceCurrentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ContextServiceCurrentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContextServiceCurrentResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContextServiceCurrentResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContextServiceCurrentResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContextServiceCurrentResponseMultiError(errors)
	}

	return nil
}

// ContextServiceCurrentResponseMultiError is an error wrapping multiple
// validation errors returned by ContextServiceCurrentResponse.ValidateAll()
// if the designated constraints aren't met.
type ContextServiceCurrentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContextServiceCurrentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContextServiceCurrentResponseMultiError) AllErrors() []error { return m }

// ContextServiceCurrentResponseValidationError is the validation error
// returned by ContextServiceCurrentResponse.Validate if the designated
// constraints aren't met.
type ContextServiceCurrentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContextServiceCurrentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContextServiceCurrentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContextServiceCurrentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContextServiceCurrentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContextServiceCurrentResponseValidationError) ErrorName() string {
	return "ContextServiceCurrentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ContextServiceCurrentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContextServiceCurrentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContextServiceCurrentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContextServiceCurrentResponseValidationError{}

// Validate checks the field values on ContextServiceCurrentResponse_Result
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ContextServiceCurrentResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContextServiceCurrentResponse_Result
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ContextServiceCurrentResponse_ResultMultiError, or nil if none found.
func (m *ContextServiceCurrentResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *ContextServiceCurrentResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCurrentUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContextServiceCurrentResponse_ResultValidationError{
					field:  "CurrentUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContextServiceCurrentResponse_ResultValidationError{
					field:  "CurrentUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrentUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContextServiceCurrentResponse_ResultValidationError{
				field:  "CurrentUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCurrentMembership()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContextServiceCurrentResponse_ResultValidationError{
					field:  "CurrentMembership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContextServiceCurrentResponse_ResultValidationError{
					field:  "CurrentMembership",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrentMembership()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContextServiceCurrentResponse_ResultValidationError{
				field:  "CurrentMembership",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCurrentCasBackend()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContextServiceCurrentResponse_ResultValidationError{
					field:  "CurrentCasBackend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContextServiceCurrentResponse_ResultValidationError{
					field:  "CurrentCasBackend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrentCasBackend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContextServiceCurrentResponse_ResultValidationError{
				field:  "CurrentCasBackend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ContextServiceCurrentResponse_ResultMultiError(errors)
	}

	return nil
}

// ContextServiceCurrentResponse_ResultMultiError is an error wrapping multiple
// validation errors returned by
// ContextServiceCurrentResponse_Result.ValidateAll() if the designated
// constraints aren't met.
type ContextServiceCurrentResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContextServiceCurrentResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContextServiceCurrentResponse_ResultMultiError) AllErrors() []error { return m }

// ContextServiceCurrentResponse_ResultValidationError is the validation error
// returned by ContextServiceCurrentResponse_Result.Validate if the designated
// constraints aren't met.
type ContextServiceCurrentResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContextServiceCurrentResponse_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContextServiceCurrentResponse_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContextServiceCurrentResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContextServiceCurrentResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContextServiceCurrentResponse_ResultValidationError) ErrorName() string {
	return "ContextServiceCurrentResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e ContextServiceCurrentResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContextServiceCurrentResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContextServiceCurrentResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContextServiceCurrentResponse_ResultValidationError{}
