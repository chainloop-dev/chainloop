//
// Copyright 2025 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: controlplane/v1/group.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupService_Create_FullMethodName       = "/controlplane.v1.GroupService/Create"
	GroupService_Get_FullMethodName          = "/controlplane.v1.GroupService/Get"
	GroupService_List_FullMethodName         = "/controlplane.v1.GroupService/List"
	GroupService_Update_FullMethodName       = "/controlplane.v1.GroupService/Update"
	GroupService_Delete_FullMethodName       = "/controlplane.v1.GroupService/Delete"
	GroupService_ListMembers_FullMethodName  = "/controlplane.v1.GroupService/ListMembers"
	GroupService_AddMember_FullMethodName    = "/controlplane.v1.GroupService/AddMember"
	GroupService_RemoveMember_FullMethodName = "/controlplane.v1.GroupService/RemoveMember"
)

// GroupServiceClient is the client API for GroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupServiceClient interface {
	// Create creates a new group with the specified name and description
	Create(ctx context.Context, in *GroupServiceCreateRequest, opts ...grpc.CallOption) (*GroupServiceCreateResponse, error)
	// Get retrieves a specific group by its ID
	Get(ctx context.Context, in *GroupServiceGetRequest, opts ...grpc.CallOption) (*GroupServiceGetResponse, error)
	// List retrieves a paginated list of groups, with optional filtering
	List(ctx context.Context, in *GroupServiceListRequest, opts ...grpc.CallOption) (*GroupServiceListResponse, error)
	// Update modifies an existing group's attributes
	Update(ctx context.Context, in *GroupServiceUpdateRequest, opts ...grpc.CallOption) (*GroupServiceUpdateResponse, error)
	// Delete removes a group from the system
	Delete(ctx context.Context, in *GroupServiceDeleteRequest, opts ...grpc.CallOption) (*GroupServiceDeleteResponse, error)
	// ListMembers retrieves the members of a specific group
	ListMembers(ctx context.Context, in *GroupServiceListMembersRequest, opts ...grpc.CallOption) (*GroupServiceListMembersResponse, error)
	// AddMember adds a user to a group with an optional maintainer role
	AddMember(ctx context.Context, in *GroupServiceAddMemberRequest, opts ...grpc.CallOption) (*GroupServiceAddMemberResponse, error)
	// RemoveMember removes a user from a group
	RemoveMember(ctx context.Context, in *GroupServiceRemoveMemberRequest, opts ...grpc.CallOption) (*GroupServiceRemoveMemberResponse, error)
}

type groupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupServiceClient(cc grpc.ClientConnInterface) GroupServiceClient {
	return &groupServiceClient{cc}
}

func (c *groupServiceClient) Create(ctx context.Context, in *GroupServiceCreateRequest, opts ...grpc.CallOption) (*GroupServiceCreateResponse, error) {
	out := new(GroupServiceCreateResponse)
	err := c.cc.Invoke(ctx, GroupService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) Get(ctx context.Context, in *GroupServiceGetRequest, opts ...grpc.CallOption) (*GroupServiceGetResponse, error) {
	out := new(GroupServiceGetResponse)
	err := c.cc.Invoke(ctx, GroupService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) List(ctx context.Context, in *GroupServiceListRequest, opts ...grpc.CallOption) (*GroupServiceListResponse, error) {
	out := new(GroupServiceListResponse)
	err := c.cc.Invoke(ctx, GroupService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) Update(ctx context.Context, in *GroupServiceUpdateRequest, opts ...grpc.CallOption) (*GroupServiceUpdateResponse, error) {
	out := new(GroupServiceUpdateResponse)
	err := c.cc.Invoke(ctx, GroupService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) Delete(ctx context.Context, in *GroupServiceDeleteRequest, opts ...grpc.CallOption) (*GroupServiceDeleteResponse, error) {
	out := new(GroupServiceDeleteResponse)
	err := c.cc.Invoke(ctx, GroupService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) ListMembers(ctx context.Context, in *GroupServiceListMembersRequest, opts ...grpc.CallOption) (*GroupServiceListMembersResponse, error) {
	out := new(GroupServiceListMembersResponse)
	err := c.cc.Invoke(ctx, GroupService_ListMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) AddMember(ctx context.Context, in *GroupServiceAddMemberRequest, opts ...grpc.CallOption) (*GroupServiceAddMemberResponse, error) {
	out := new(GroupServiceAddMemberResponse)
	err := c.cc.Invoke(ctx, GroupService_AddMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) RemoveMember(ctx context.Context, in *GroupServiceRemoveMemberRequest, opts ...grpc.CallOption) (*GroupServiceRemoveMemberResponse, error) {
	out := new(GroupServiceRemoveMemberResponse)
	err := c.cc.Invoke(ctx, GroupService_RemoveMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServiceServer is the server API for GroupService service.
// All implementations must embed UnimplementedGroupServiceServer
// for forward compatibility
type GroupServiceServer interface {
	// Create creates a new group with the specified name and description
	Create(context.Context, *GroupServiceCreateRequest) (*GroupServiceCreateResponse, error)
	// Get retrieves a specific group by its ID
	Get(context.Context, *GroupServiceGetRequest) (*GroupServiceGetResponse, error)
	// List retrieves a paginated list of groups, with optional filtering
	List(context.Context, *GroupServiceListRequest) (*GroupServiceListResponse, error)
	// Update modifies an existing group's attributes
	Update(context.Context, *GroupServiceUpdateRequest) (*GroupServiceUpdateResponse, error)
	// Delete removes a group from the system
	Delete(context.Context, *GroupServiceDeleteRequest) (*GroupServiceDeleteResponse, error)
	// ListMembers retrieves the members of a specific group
	ListMembers(context.Context, *GroupServiceListMembersRequest) (*GroupServiceListMembersResponse, error)
	// AddMember adds a user to a group with an optional maintainer role
	AddMember(context.Context, *GroupServiceAddMemberRequest) (*GroupServiceAddMemberResponse, error)
	// RemoveMember removes a user from a group
	RemoveMember(context.Context, *GroupServiceRemoveMemberRequest) (*GroupServiceRemoveMemberResponse, error)
	mustEmbedUnimplementedGroupServiceServer()
}

// UnimplementedGroupServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupServiceServer struct {
}

func (UnimplementedGroupServiceServer) Create(context.Context, *GroupServiceCreateRequest) (*GroupServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGroupServiceServer) Get(context.Context, *GroupServiceGetRequest) (*GroupServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGroupServiceServer) List(context.Context, *GroupServiceListRequest) (*GroupServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGroupServiceServer) Update(context.Context, *GroupServiceUpdateRequest) (*GroupServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGroupServiceServer) Delete(context.Context, *GroupServiceDeleteRequest) (*GroupServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGroupServiceServer) ListMembers(context.Context, *GroupServiceListMembersRequest) (*GroupServiceListMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMembers not implemented")
}
func (UnimplementedGroupServiceServer) AddMember(context.Context, *GroupServiceAddMemberRequest) (*GroupServiceAddMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedGroupServiceServer) RemoveMember(context.Context, *GroupServiceRemoveMemberRequest) (*GroupServiceRemoveMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (UnimplementedGroupServiceServer) mustEmbedUnimplementedGroupServiceServer() {}

// UnsafeGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupServiceServer will
// result in compilation errors.
type UnsafeGroupServiceServer interface {
	mustEmbedUnimplementedGroupServiceServer()
}

func RegisterGroupServiceServer(s grpc.ServiceRegistrar, srv GroupServiceServer) {
	s.RegisterService(&GroupService_ServiceDesc, srv)
}

func _GroupService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Create(ctx, req.(*GroupServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Get(ctx, req.(*GroupServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).List(ctx, req.(*GroupServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Update(ctx, req.(*GroupServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Delete(ctx, req.(*GroupServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_ListMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupServiceListMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).ListMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_ListMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).ListMembers(ctx, req.(*GroupServiceListMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupServiceAddMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_AddMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).AddMember(ctx, req.(*GroupServiceAddMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupServiceRemoveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupService_RemoveMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).RemoveMember(ctx, req.(*GroupServiceRemoveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupService_ServiceDesc is the grpc.ServiceDesc for GroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controlplane.v1.GroupService",
	HandlerType: (*GroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GroupService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GroupService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GroupService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GroupService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GroupService_Delete_Handler,
		},
		{
			MethodName: "ListMembers",
			Handler:    _GroupService_ListMembers_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _GroupService_AddMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _GroupService_RemoveMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controlplane/v1/group.proto",
}
