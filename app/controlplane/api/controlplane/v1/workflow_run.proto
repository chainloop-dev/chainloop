//
// Copyright 2024 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package controlplane.v1;

import "buf/validate/validate.proto";
import "controlplane/v1/pagination.proto";
import "controlplane/v1/response_messages.proto";
import "workflowcontract/v1/crafting_schema.proto";

option go_package = "github.com/chainloop-dev/chainloop/app/controlplane/api/controlplane/v1;v1";

// This service is used by the CLI to generate attestation
service AttestationService {
  rpc GetContract(AttestationServiceGetContractRequest) returns (AttestationServiceGetContractResponse);
  rpc Init(AttestationServiceInitRequest) returns (AttestationServiceInitResponse);
  rpc Store(AttestationServiceStoreRequest) returns (AttestationServiceStoreResponse);
  // There is another endpoint to get credentials via casCredentialsService.Get
  // This one is kept since it leverages robot-accounts in the context of a workflow
  rpc GetUploadCreds(AttestationServiceGetUploadCredsRequest) returns (AttestationServiceGetUploadCredsResponse);
  rpc Cancel(AttestationServiceCancelRequest) returns (AttestationServiceCancelResponse);

  // Get policies from remote providers
  rpc GetPolicy(AttestationServiceGetPolicyRequest) returns (AttestationServiceGetPolicyResponse);
  rpc GetPolicyGroup(AttestationServiceGetPolicyGroupRequest) returns (AttestationServiceGetPolicyGroupResponse);
}

// Administrative service for the operator
service WorkflowRunService {
  rpc List(WorkflowRunServiceListRequest) returns (WorkflowRunServiceListResponse);
  rpc View(WorkflowRunServiceViewRequest) returns (WorkflowRunServiceViewResponse);
}

message AttestationServiceGetPolicyRequest {
  // Provider name. If not set, the default provider will be used
  string provider = 1;

  // Policy name (it must exist in the provider)
  string policy_name = 2 [(buf.validate.field).string.min_len = 1];

  // The org owning this policy
  string org_name = 3;
}

message AttestationServiceGetPolicyResponse {
  workflowcontract.v1.Policy policy = 1;
  // FQDN of the policy in the provider
  RemotePolicyReference reference = 2;
}

message RemotePolicyReference {
  string url = 1;
  string digest = 2;
}

message AttestationServiceGetPolicyGroupRequest {
  // Provider name. If not set, the default provider will be used
  string provider = 1;

  // Group name (it must exist in the provider)
  string group_name = 2 [(buf.validate.field).string.min_len = 1];

  // The org owning this group
  string org_name = 3;
}

message AttestationServiceGetPolicyGroupResponse {
  workflowcontract.v1.PolicyGroup group = 1;
  // FQDN of the policy in the provider
  RemotePolicyReference reference = 2;
}

message AttestationServiceGetContractRequest {
  int32 contract_revision = 1;
  // This parameter is not needed by Robot Account since they have the workflowID embedded.
  // API Tokens will send the parameter explicitly
  string workflow_name = 2;
}

message AttestationServiceGetContractResponse {
  Result result = 1;

  message Result {
    WorkflowItem workflow = 1;
    WorkflowContractVersionItem contract = 2;
  }
}

message AttestationServiceInitRequest {
  int32 contract_revision = 1;
  string job_url = 2;
  workflowcontract.v1.CraftingSchema.Runner.RunnerType runner = 3;
  string workflow_name = 4;
}

message AttestationServiceInitResponse {
  Result result = 1;

  message Result {
    WorkflowRunItem workflow_run = 2;
    // organization name
    string organization = 3;
  }
}

message AttestationServiceStoreRequest {
  // encoded DSEE envelope
  bytes attestation = 1 [(buf.validate.field).bytes.min_len = 1];
  string workflow_run_id = 2 [(buf.validate.field).string = {min_len: 1}];
}

message AttestationServiceStoreResponse {
  Result result = 1;

  message Result {
    // attestation digest
    string digest = 2;
  }
}

message AttestationServiceCancelRequest {
  string workflow_run_id = 1 [(buf.validate.field).string = {min_len: 1}];
  TriggerType trigger = 2 [(buf.validate.field).enum = {
    not_in: [0]
  }];
  string reason = 3;

  enum TriggerType {
    TRIGGER_TYPE_UNSPECIFIED = 0;
    TRIGGER_TYPE_FAILURE = 1;
    TRIGGER_TYPE_CANCELLATION = 2;
  }
}

message AttestationServiceCancelResponse {}

message WorkflowRunServiceListRequest {
  // Filters
  // by workflow
  string workflow_name = 1 [(buf.validate.field) = {
    ignore_empty: true
    cel: {
      message: "must contain only lowercase letters, numbers, and hyphens."
      expression: "this.matches('^[a-z0-9]([-a-z0-9]*[a-z0-9])?$')"
      id: "name.dns-1123"
    }
  }];
  // by run status
  RunStatus status = 3;
  // pagination options
  CursorPaginationRequest pagination = 2;
}

message WorkflowRunServiceListResponse {
  repeated WorkflowRunItem result = 1;
  CursorPaginationResponse pagination = 2;
}

message WorkflowRunServiceViewRequest {
  // It can search by either ID or digest
  oneof ref {
    option (buf.validate.oneof).required = true;

    string id = 1 [(buf.validate.field).string.uuid = true];
    string digest = 2 [(buf.validate.field).string = {min_len: 1}];
  }
}

message WorkflowRunServiceViewResponse {
  Result result = 1;

  message Result {
    WorkflowRunItem workflow_run = 1;
    AttestationItem attestation = 2;
  }
}

message AttestationServiceGetUploadCredsRequest {
  string workflow_run_id = 1;
}

message AttestationServiceGetUploadCredsResponse {
  Result result = 1;

  message Result {
    string token = 2;
    CASBackendItem backend = 3;
  }
}
