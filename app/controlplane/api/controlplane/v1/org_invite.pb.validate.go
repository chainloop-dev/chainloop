// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: controlplane/v1/org_invite.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _org_invite_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on OrgInviteServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgInviteServiceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgInviteServiceCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OrgInviteServiceCreateRequestMultiError, or nil if none found.
func (m *OrgInviteServiceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgInviteServiceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetOrganizationId()); err != nil {
		err = OrgInviteServiceCreateRequestValidationError{
			field:  "OrganizationId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetReceiverEmail()); err != nil {
		err = OrgInviteServiceCreateRequestValidationError{
			field:  "ReceiverEmail",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrgInviteServiceCreateRequestMultiError(errors)
	}

	return nil
}

func (m *OrgInviteServiceCreateRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *OrgInviteServiceCreateRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

func (m *OrgInviteServiceCreateRequest) _validateUuid(uuid string) error {
	if matched := _org_invite_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OrgInviteServiceCreateRequestMultiError is an error wrapping multiple
// validation errors returned by OrgInviteServiceCreateRequest.ValidateAll()
// if the designated constraints aren't met.
type OrgInviteServiceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgInviteServiceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgInviteServiceCreateRequestMultiError) AllErrors() []error { return m }

// OrgInviteServiceCreateRequestValidationError is the validation error
// returned by OrgInviteServiceCreateRequest.Validate if the designated
// constraints aren't met.
type OrgInviteServiceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgInviteServiceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgInviteServiceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgInviteServiceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgInviteServiceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgInviteServiceCreateRequestValidationError) ErrorName() string {
	return "OrgInviteServiceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrgInviteServiceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgInviteServiceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgInviteServiceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgInviteServiceCreateRequestValidationError{}

// Validate checks the field values on OrgInviteServiceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgInviteServiceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgInviteServiceCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OrgInviteServiceCreateResponseMultiError, or nil if none found.
func (m *OrgInviteServiceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgInviteServiceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgInviteServiceCreateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgInviteServiceCreateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgInviteServiceCreateResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrgInviteServiceCreateResponseMultiError(errors)
	}

	return nil
}

// OrgInviteServiceCreateResponseMultiError is an error wrapping multiple
// validation errors returned by OrgInviteServiceCreateResponse.ValidateAll()
// if the designated constraints aren't met.
type OrgInviteServiceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgInviteServiceCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgInviteServiceCreateResponseMultiError) AllErrors() []error { return m }

// OrgInviteServiceCreateResponseValidationError is the validation error
// returned by OrgInviteServiceCreateResponse.Validate if the designated
// constraints aren't met.
type OrgInviteServiceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgInviteServiceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgInviteServiceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgInviteServiceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgInviteServiceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgInviteServiceCreateResponseValidationError) ErrorName() string {
	return "OrgInviteServiceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrgInviteServiceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgInviteServiceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgInviteServiceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgInviteServiceCreateResponseValidationError{}

// Validate checks the field values on OrgInviteItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrgInviteItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgInviteItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrgInviteItemMultiError, or
// nil if none found.
func (m *OrgInviteItem) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgInviteItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgInviteItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgInviteItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgInviteItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ReceiverEmail

	// no validation rules for OrganizationId

	// no validation rules for SenderId

	// no validation rules for Status

	if len(errors) > 0 {
		return OrgInviteItemMultiError(errors)
	}

	return nil
}

// OrgInviteItemMultiError is an error wrapping multiple validation errors
// returned by OrgInviteItem.ValidateAll() if the designated constraints
// aren't met.
type OrgInviteItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgInviteItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgInviteItemMultiError) AllErrors() []error { return m }

// OrgInviteItemValidationError is the validation error returned by
// OrgInviteItem.Validate if the designated constraints aren't met.
type OrgInviteItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgInviteItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgInviteItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgInviteItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgInviteItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgInviteItemValidationError) ErrorName() string { return "OrgInviteItemValidationError" }

// Error satisfies the builtin error interface
func (e OrgInviteItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgInviteItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgInviteItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgInviteItemValidationError{}
