//
// Copyright 2023 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: controlplane/v1/org_invitation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrgInvitationService_Create_FullMethodName   = "/controlplane.v1.OrgInvitationService/Create"
	OrgInvitationService_Revoke_FullMethodName   = "/controlplane.v1.OrgInvitationService/Revoke"
	OrgInvitationService_ListSent_FullMethodName = "/controlplane.v1.OrgInvitationService/ListSent"
)

// OrgInvitationServiceClient is the client API for OrgInvitationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgInvitationServiceClient interface {
	// Create an invitation for a user to join an organization.
	Create(ctx context.Context, in *OrgInvitationServiceCreateRequest, opts ...grpc.CallOption) (*OrgInvitationServiceCreateResponse, error)
	// Revoke an invitation.
	Revoke(ctx context.Context, in *OrgInvitationServiceRevokeRequest, opts ...grpc.CallOption) (*OrgInvitationServiceRevokeResponse, error)
	// List all invitations in the current org
	ListSent(ctx context.Context, in *OrgInvitationServiceListSentRequest, opts ...grpc.CallOption) (*OrgInvitationServiceListSentResponse, error)
}

type orgInvitationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgInvitationServiceClient(cc grpc.ClientConnInterface) OrgInvitationServiceClient {
	return &orgInvitationServiceClient{cc}
}

func (c *orgInvitationServiceClient) Create(ctx context.Context, in *OrgInvitationServiceCreateRequest, opts ...grpc.CallOption) (*OrgInvitationServiceCreateResponse, error) {
	out := new(OrgInvitationServiceCreateResponse)
	err := c.cc.Invoke(ctx, OrgInvitationService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgInvitationServiceClient) Revoke(ctx context.Context, in *OrgInvitationServiceRevokeRequest, opts ...grpc.CallOption) (*OrgInvitationServiceRevokeResponse, error) {
	out := new(OrgInvitationServiceRevokeResponse)
	err := c.cc.Invoke(ctx, OrgInvitationService_Revoke_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgInvitationServiceClient) ListSent(ctx context.Context, in *OrgInvitationServiceListSentRequest, opts ...grpc.CallOption) (*OrgInvitationServiceListSentResponse, error) {
	out := new(OrgInvitationServiceListSentResponse)
	err := c.cc.Invoke(ctx, OrgInvitationService_ListSent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgInvitationServiceServer is the server API for OrgInvitationService service.
// All implementations must embed UnimplementedOrgInvitationServiceServer
// for forward compatibility
type OrgInvitationServiceServer interface {
	// Create an invitation for a user to join an organization.
	Create(context.Context, *OrgInvitationServiceCreateRequest) (*OrgInvitationServiceCreateResponse, error)
	// Revoke an invitation.
	Revoke(context.Context, *OrgInvitationServiceRevokeRequest) (*OrgInvitationServiceRevokeResponse, error)
	// List all invitations in the current org
	ListSent(context.Context, *OrgInvitationServiceListSentRequest) (*OrgInvitationServiceListSentResponse, error)
	mustEmbedUnimplementedOrgInvitationServiceServer()
}

// UnimplementedOrgInvitationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrgInvitationServiceServer struct {
}

func (UnimplementedOrgInvitationServiceServer) Create(context.Context, *OrgInvitationServiceCreateRequest) (*OrgInvitationServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrgInvitationServiceServer) Revoke(context.Context, *OrgInvitationServiceRevokeRequest) (*OrgInvitationServiceRevokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}
func (UnimplementedOrgInvitationServiceServer) ListSent(context.Context, *OrgInvitationServiceListSentRequest) (*OrgInvitationServiceListSentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSent not implemented")
}
func (UnimplementedOrgInvitationServiceServer) mustEmbedUnimplementedOrgInvitationServiceServer() {}

// UnsafeOrgInvitationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgInvitationServiceServer will
// result in compilation errors.
type UnsafeOrgInvitationServiceServer interface {
	mustEmbedUnimplementedOrgInvitationServiceServer()
}

func RegisterOrgInvitationServiceServer(s grpc.ServiceRegistrar, srv OrgInvitationServiceServer) {
	s.RegisterService(&OrgInvitationService_ServiceDesc, srv)
}

func _OrgInvitationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgInvitationServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgInvitationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrgInvitationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgInvitationServiceServer).Create(ctx, req.(*OrgInvitationServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgInvitationService_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgInvitationServiceRevokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgInvitationServiceServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrgInvitationService_Revoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgInvitationServiceServer).Revoke(ctx, req.(*OrgInvitationServiceRevokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgInvitationService_ListSent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgInvitationServiceListSentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgInvitationServiceServer).ListSent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrgInvitationService_ListSent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgInvitationServiceServer).ListSent(ctx, req.(*OrgInvitationServiceListSentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrgInvitationService_ServiceDesc is the grpc.ServiceDesc for OrgInvitationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrgInvitationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controlplane.v1.OrgInvitationService",
	HandlerType: (*OrgInvitationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _OrgInvitationService_Create_Handler,
		},
		{
			MethodName: "Revoke",
			Handler:    _OrgInvitationService_Revoke_Handler,
		},
		{
			MethodName: "ListSent",
			Handler:    _OrgInvitationService_ListSent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controlplane/v1/org_invitation.proto",
}
