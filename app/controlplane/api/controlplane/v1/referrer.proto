//
// Copyright 2023 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package controlplane.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

option go_package = "github.com/chainloop-dev/chainloop/app/controlplane/api/controlplane/v1;v1";

service ReferrerService {
  // DiscoverPrivate returns the referrer item for a given digest in the organizations of the logged-in user
  rpc DiscoverPrivate(ReferrerServiceDiscoverPrivateRequest) returns (ReferrerServiceDiscoverPrivateResponse);
  // DiscoverPublicShared returns the referrer item for a given digest in the public shared index
  rpc DiscoverPublicShared(DiscoverPublicSharedRequest) returns (DiscoverPublicSharedResponse) {
    option (google.api.http) = {get: "/discover/{digest}"};
  }
}

message ReferrerServiceDiscoverPrivateRequest {
  string digest = 1 [(validate.rules).string = {min_len: 1}];
  // Optional kind of referrer, i.e CONTAINER_IMAGE, GIT_HEAD, ...
  // Used to filter and resolve ambiguities
  string kind = 2;
}

message DiscoverPublicSharedRequest {
  string digest = 1 [(validate.rules).string = {min_len: 1}];
  // Optional kind of referrer, i.e CONTAINER_IMAGE, GIT_HEAD, ...
  // Used to filter and resolve ambiguities
  string kind = 2;
}

message DiscoverPublicSharedResponse {
  ReferrerItem result = 1;
}

message ReferrerServiceDiscoverPrivateResponse {
  ReferrerItem result = 1;
}

message ReferrerItem {
  // Digest of the referrer, i.e sha256:deadbeef or sha1:beefdead
  string digest = 1;
  // Kind of referrer, i.e CONTAINER_IMAGE, GIT_HEAD, ...
  string kind = 2;
  // Whether the referrer is downloadable or not from CAS
  bool downloadable = 3;
  // Whether the referrer is public since it belongs to a public workflow
  bool public = 6;
  repeated ReferrerItem references = 4;
  google.protobuf.Timestamp created_at = 5;

  map<string, string> metadata = 7;
  map<string, string> annotations = 8;
}
