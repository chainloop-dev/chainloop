// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: controlplane/v1/integrations.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _integrations_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on IntegrationsServiceRegisterRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntegrationsServiceRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationsServiceRegisterRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IntegrationsServiceRegisterRequestMultiError, or nil if none found.
func (m *IntegrationsServiceRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := IntegrationsServiceRegisterRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPluginId()) < 1 {
		err := IntegrationsServiceRegisterRequestValidationError{
			field:  "PluginId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetConfig() == nil {
		err := IntegrationsServiceRegisterRequestValidationError{
			field:  "Config",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationsServiceRegisterRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationsServiceRegisterRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationsServiceRegisterRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return IntegrationsServiceRegisterRequestMultiError(errors)
	}

	return nil
}

// IntegrationsServiceRegisterRequestMultiError is an error wrapping multiple
// validation errors returned by
// IntegrationsServiceRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceRegisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceRegisterRequestMultiError) AllErrors() []error { return m }

// IntegrationsServiceRegisterRequestValidationError is the validation error
// returned by IntegrationsServiceRegisterRequest.Validate if the designated
// constraints aren't met.
type IntegrationsServiceRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceRegisterRequestValidationError) ErrorName() string {
	return "IntegrationsServiceRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceRegisterRequestValidationError{}

// Validate checks the field values on IntegrationsServiceRegisterResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntegrationsServiceRegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationsServiceRegisterResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IntegrationsServiceRegisterResponseMultiError, or nil if none found.
func (m *IntegrationsServiceRegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceRegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationsServiceRegisterResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationsServiceRegisterResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationsServiceRegisterResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IntegrationsServiceRegisterResponseMultiError(errors)
	}

	return nil
}

// IntegrationsServiceRegisterResponseMultiError is an error wrapping multiple
// validation errors returned by
// IntegrationsServiceRegisterResponse.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceRegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceRegisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceRegisterResponseMultiError) AllErrors() []error { return m }

// IntegrationsServiceRegisterResponseValidationError is the validation error
// returned by IntegrationsServiceRegisterResponse.Validate if the designated
// constraints aren't met.
type IntegrationsServiceRegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceRegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceRegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceRegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceRegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceRegisterResponseValidationError) ErrorName() string {
	return "IntegrationsServiceRegisterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceRegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceRegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceRegisterResponseValidationError{}

// Validate checks the field values on IntegrationsServiceAttachRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntegrationsServiceAttachRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationsServiceAttachRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IntegrationsServiceAttachRequestMultiError, or nil if none found.
func (m *IntegrationsServiceAttachRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceAttachRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetWorkflowId()); err != nil {
		err = IntegrationsServiceAttachRequestValidationError{
			field:  "WorkflowId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetIntegrationId()); err != nil {
		err = IntegrationsServiceAttachRequestValidationError{
			field:  "IntegrationId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetConfig() == nil {
		err := IntegrationsServiceAttachRequestValidationError{
			field:  "Config",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationsServiceAttachRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationsServiceAttachRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationsServiceAttachRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IntegrationsServiceAttachRequestMultiError(errors)
	}

	return nil
}

func (m *IntegrationsServiceAttachRequest) _validateUuid(uuid string) error {
	if matched := _integrations_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IntegrationsServiceAttachRequestMultiError is an error wrapping multiple
// validation errors returned by
// IntegrationsServiceAttachRequest.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceAttachRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceAttachRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceAttachRequestMultiError) AllErrors() []error { return m }

// IntegrationsServiceAttachRequestValidationError is the validation error
// returned by IntegrationsServiceAttachRequest.Validate if the designated
// constraints aren't met.
type IntegrationsServiceAttachRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceAttachRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceAttachRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceAttachRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceAttachRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceAttachRequestValidationError) ErrorName() string {
	return "IntegrationsServiceAttachRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceAttachRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceAttachRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceAttachRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceAttachRequestValidationError{}

// Validate checks the field values on IntegrationsServiceAttachResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntegrationsServiceAttachResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationsServiceAttachResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IntegrationsServiceAttachResponseMultiError, or nil if none found.
func (m *IntegrationsServiceAttachResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceAttachResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationsServiceAttachResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationsServiceAttachResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationsServiceAttachResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IntegrationsServiceAttachResponseMultiError(errors)
	}

	return nil
}

// IntegrationsServiceAttachResponseMultiError is an error wrapping multiple
// validation errors returned by
// IntegrationsServiceAttachResponse.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceAttachResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceAttachResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceAttachResponseMultiError) AllErrors() []error { return m }

// IntegrationsServiceAttachResponseValidationError is the validation error
// returned by IntegrationsServiceAttachResponse.Validate if the designated
// constraints aren't met.
type IntegrationsServiceAttachResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceAttachResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceAttachResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceAttachResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceAttachResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceAttachResponseValidationError) ErrorName() string {
	return "IntegrationsServiceAttachResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceAttachResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceAttachResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceAttachResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceAttachResponseValidationError{}

// Validate checks the field values on IntegrationsServiceListAvailableRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IntegrationsServiceListAvailableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IntegrationsServiceListAvailableRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// IntegrationsServiceListAvailableRequestMultiError, or nil if none found.
func (m *IntegrationsServiceListAvailableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceListAvailableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IntegrationsServiceListAvailableRequestMultiError(errors)
	}

	return nil
}

// IntegrationsServiceListAvailableRequestMultiError is an error wrapping
// multiple validation errors returned by
// IntegrationsServiceListAvailableRequest.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceListAvailableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceListAvailableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceListAvailableRequestMultiError) AllErrors() []error { return m }

// IntegrationsServiceListAvailableRequestValidationError is the validation
// error returned by IntegrationsServiceListAvailableRequest.Validate if the
// designated constraints aren't met.
type IntegrationsServiceListAvailableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceListAvailableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceListAvailableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceListAvailableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceListAvailableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceListAvailableRequestValidationError) ErrorName() string {
	return "IntegrationsServiceListAvailableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceListAvailableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceListAvailableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceListAvailableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceListAvailableRequestValidationError{}

// Validate checks the field values on IntegrationsServiceListAvailableResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IntegrationsServiceListAvailableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IntegrationsServiceListAvailableResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IntegrationsServiceListAvailableResponseMultiError, or nil if none found.
func (m *IntegrationsServiceListAvailableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceListAvailableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntegrationsServiceListAvailableResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntegrationsServiceListAvailableResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntegrationsServiceListAvailableResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IntegrationsServiceListAvailableResponseMultiError(errors)
	}

	return nil
}

// IntegrationsServiceListAvailableResponseMultiError is an error wrapping
// multiple validation errors returned by
// IntegrationsServiceListAvailableResponse.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceListAvailableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceListAvailableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceListAvailableResponseMultiError) AllErrors() []error { return m }

// IntegrationsServiceListAvailableResponseValidationError is the validation
// error returned by IntegrationsServiceListAvailableResponse.Validate if the
// designated constraints aren't met.
type IntegrationsServiceListAvailableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceListAvailableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceListAvailableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceListAvailableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceListAvailableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceListAvailableResponseValidationError) ErrorName() string {
	return "IntegrationsServiceListAvailableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceListAvailableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceListAvailableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceListAvailableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceListAvailableResponseValidationError{}

// Validate checks the field values on IntegrationAvailableItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntegrationAvailableItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationAvailableItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntegrationAvailableItemMultiError, or nil if none found.
func (m *IntegrationAvailableItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationAvailableItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Version

	// no validation rules for Description

	switch v := m.Type.(type) {
	case *IntegrationAvailableItem_Fanout:
		if v == nil {
			err := IntegrationAvailableItemValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFanout()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntegrationAvailableItemValidationError{
						field:  "Fanout",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntegrationAvailableItemValidationError{
						field:  "Fanout",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFanout()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntegrationAvailableItemValidationError{
					field:  "Fanout",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return IntegrationAvailableItemMultiError(errors)
	}

	return nil
}

// IntegrationAvailableItemMultiError is an error wrapping multiple validation
// errors returned by IntegrationAvailableItem.ValidateAll() if the designated
// constraints aren't met.
type IntegrationAvailableItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationAvailableItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationAvailableItemMultiError) AllErrors() []error { return m }

// IntegrationAvailableItemValidationError is the validation error returned by
// IntegrationAvailableItem.Validate if the designated constraints aren't met.
type IntegrationAvailableItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationAvailableItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationAvailableItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationAvailableItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationAvailableItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationAvailableItemValidationError) ErrorName() string {
	return "IntegrationAvailableItemValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationAvailableItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationAvailableItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationAvailableItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationAvailableItemValidationError{}

// Validate checks the field values on PluginFanout with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PluginFanout) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PluginFanout with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PluginFanoutMultiError, or
// nil if none found.
func (m *PluginFanout) ValidateAll() error {
	return m.validate(true)
}

func (m *PluginFanout) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RegistrationSchema

	// no validation rules for AttachmentSchema

	if len(errors) > 0 {
		return PluginFanoutMultiError(errors)
	}

	return nil
}

// PluginFanoutMultiError is an error wrapping multiple validation errors
// returned by PluginFanout.ValidateAll() if the designated constraints aren't met.
type PluginFanoutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PluginFanoutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PluginFanoutMultiError) AllErrors() []error { return m }

// PluginFanoutValidationError is the validation error returned by
// PluginFanout.Validate if the designated constraints aren't met.
type PluginFanoutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PluginFanoutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PluginFanoutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PluginFanoutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PluginFanoutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PluginFanoutValidationError) ErrorName() string { return "PluginFanoutValidationError" }

// Error satisfies the builtin error interface
func (e PluginFanoutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPluginFanout.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PluginFanoutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PluginFanoutValidationError{}

// Validate checks the field values on
// IntegrationsServiceListRegistrationsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntegrationsServiceListRegistrationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IntegrationsServiceListRegistrationsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IntegrationsServiceListRegistrationsRequestMultiError, or nil if none found.
func (m *IntegrationsServiceListRegistrationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceListRegistrationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IntegrationsServiceListRegistrationsRequestMultiError(errors)
	}

	return nil
}

// IntegrationsServiceListRegistrationsRequestMultiError is an error wrapping
// multiple validation errors returned by
// IntegrationsServiceListRegistrationsRequest.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceListRegistrationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceListRegistrationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceListRegistrationsRequestMultiError) AllErrors() []error { return m }

// IntegrationsServiceListRegistrationsRequestValidationError is the validation
// error returned by IntegrationsServiceListRegistrationsRequest.Validate if
// the designated constraints aren't met.
type IntegrationsServiceListRegistrationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceListRegistrationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceListRegistrationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceListRegistrationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceListRegistrationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceListRegistrationsRequestValidationError) ErrorName() string {
	return "IntegrationsServiceListRegistrationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceListRegistrationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceListRegistrationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceListRegistrationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceListRegistrationsRequestValidationError{}

// Validate checks the field values on
// IntegrationsServiceListRegistrationsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntegrationsServiceListRegistrationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IntegrationsServiceListRegistrationsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// IntegrationsServiceListRegistrationsResponseMultiError, or nil if none found.
func (m *IntegrationsServiceListRegistrationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceListRegistrationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntegrationsServiceListRegistrationsResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntegrationsServiceListRegistrationsResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntegrationsServiceListRegistrationsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return IntegrationsServiceListRegistrationsResponseMultiError(errors)
	}

	return nil
}

// IntegrationsServiceListRegistrationsResponseMultiError is an error wrapping
// multiple validation errors returned by
// IntegrationsServiceListRegistrationsResponse.ValidateAll() if the
// designated constraints aren't met.
type IntegrationsServiceListRegistrationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceListRegistrationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceListRegistrationsResponseMultiError) AllErrors() []error { return m }

// IntegrationsServiceListRegistrationsResponseValidationError is the
// validation error returned by
// IntegrationsServiceListRegistrationsResponse.Validate if the designated
// constraints aren't met.
type IntegrationsServiceListRegistrationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceListRegistrationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceListRegistrationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceListRegistrationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceListRegistrationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceListRegistrationsResponseValidationError) ErrorName() string {
	return "IntegrationsServiceListRegistrationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceListRegistrationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceListRegistrationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceListRegistrationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceListRegistrationsResponseValidationError{}

// Validate checks the field values on
// IntegrationsServiceDescribeRegistrationRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntegrationsServiceDescribeRegistrationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IntegrationsServiceDescribeRegistrationRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// IntegrationsServiceDescribeRegistrationRequestMultiError, or nil if none found.
func (m *IntegrationsServiceDescribeRegistrationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceDescribeRegistrationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = IntegrationsServiceDescribeRegistrationRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IntegrationsServiceDescribeRegistrationRequestMultiError(errors)
	}

	return nil
}

func (m *IntegrationsServiceDescribeRegistrationRequest) _validateUuid(uuid string) error {
	if matched := _integrations_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IntegrationsServiceDescribeRegistrationRequestMultiError is an error
// wrapping multiple validation errors returned by
// IntegrationsServiceDescribeRegistrationRequest.ValidateAll() if the
// designated constraints aren't met.
type IntegrationsServiceDescribeRegistrationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceDescribeRegistrationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceDescribeRegistrationRequestMultiError) AllErrors() []error { return m }

// IntegrationsServiceDescribeRegistrationRequestValidationError is the
// validation error returned by
// IntegrationsServiceDescribeRegistrationRequest.Validate if the designated
// constraints aren't met.
type IntegrationsServiceDescribeRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceDescribeRegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceDescribeRegistrationRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IntegrationsServiceDescribeRegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceDescribeRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceDescribeRegistrationRequestValidationError) ErrorName() string {
	return "IntegrationsServiceDescribeRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceDescribeRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceDescribeRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceDescribeRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceDescribeRegistrationRequestValidationError{}

// Validate checks the field values on
// IntegrationsServiceDescribeRegistrationResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntegrationsServiceDescribeRegistrationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// IntegrationsServiceDescribeRegistrationResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// IntegrationsServiceDescribeRegistrationResponseMultiError, or nil if none found.
func (m *IntegrationsServiceDescribeRegistrationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceDescribeRegistrationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationsServiceDescribeRegistrationResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationsServiceDescribeRegistrationResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationsServiceDescribeRegistrationResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IntegrationsServiceDescribeRegistrationResponseMultiError(errors)
	}

	return nil
}

// IntegrationsServiceDescribeRegistrationResponseMultiError is an error
// wrapping multiple validation errors returned by
// IntegrationsServiceDescribeRegistrationResponse.ValidateAll() if the
// designated constraints aren't met.
type IntegrationsServiceDescribeRegistrationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceDescribeRegistrationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceDescribeRegistrationResponseMultiError) AllErrors() []error { return m }

// IntegrationsServiceDescribeRegistrationResponseValidationError is the
// validation error returned by
// IntegrationsServiceDescribeRegistrationResponse.Validate if the designated
// constraints aren't met.
type IntegrationsServiceDescribeRegistrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceDescribeRegistrationResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e IntegrationsServiceDescribeRegistrationResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e IntegrationsServiceDescribeRegistrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceDescribeRegistrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceDescribeRegistrationResponseValidationError) ErrorName() string {
	return "IntegrationsServiceDescribeRegistrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceDescribeRegistrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceDescribeRegistrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceDescribeRegistrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceDescribeRegistrationResponseValidationError{}

// Validate checks the field values on IntegrationsServiceDetachRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntegrationsServiceDetachRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationsServiceDetachRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// IntegrationsServiceDetachRequestMultiError, or nil if none found.
func (m *IntegrationsServiceDetachRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceDetachRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = IntegrationsServiceDetachRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IntegrationsServiceDetachRequestMultiError(errors)
	}

	return nil
}

func (m *IntegrationsServiceDetachRequest) _validateUuid(uuid string) error {
	if matched := _integrations_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IntegrationsServiceDetachRequestMultiError is an error wrapping multiple
// validation errors returned by
// IntegrationsServiceDetachRequest.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceDetachRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceDetachRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceDetachRequestMultiError) AllErrors() []error { return m }

// IntegrationsServiceDetachRequestValidationError is the validation error
// returned by IntegrationsServiceDetachRequest.Validate if the designated
// constraints aren't met.
type IntegrationsServiceDetachRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceDetachRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceDetachRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceDetachRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceDetachRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceDetachRequestValidationError) ErrorName() string {
	return "IntegrationsServiceDetachRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceDetachRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceDetachRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceDetachRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceDetachRequestValidationError{}

// Validate checks the field values on IntegrationsServiceDetachResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IntegrationsServiceDetachResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationsServiceDetachResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IntegrationsServiceDetachResponseMultiError, or nil if none found.
func (m *IntegrationsServiceDetachResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceDetachResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IntegrationsServiceDetachResponseMultiError(errors)
	}

	return nil
}

// IntegrationsServiceDetachResponseMultiError is an error wrapping multiple
// validation errors returned by
// IntegrationsServiceDetachResponse.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceDetachResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceDetachResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceDetachResponseMultiError) AllErrors() []error { return m }

// IntegrationsServiceDetachResponseValidationError is the validation error
// returned by IntegrationsServiceDetachResponse.Validate if the designated
// constraints aren't met.
type IntegrationsServiceDetachResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceDetachResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceDetachResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceDetachResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceDetachResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceDetachResponseValidationError) ErrorName() string {
	return "IntegrationsServiceDetachResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceDetachResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceDetachResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceDetachResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceDetachResponseValidationError{}

// Validate checks the field values on ListAttachmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAttachmentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAttachmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAttachmentsRequestMultiError, or nil if none found.
func (m *ListAttachmentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAttachmentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowId

	if len(errors) > 0 {
		return ListAttachmentsRequestMultiError(errors)
	}

	return nil
}

// ListAttachmentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListAttachmentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAttachmentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAttachmentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAttachmentsRequestMultiError) AllErrors() []error { return m }

// ListAttachmentsRequestValidationError is the validation error returned by
// ListAttachmentsRequest.Validate if the designated constraints aren't met.
type ListAttachmentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttachmentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttachmentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttachmentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttachmentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttachmentsRequestValidationError) ErrorName() string {
	return "ListAttachmentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttachmentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttachmentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttachmentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttachmentsRequestValidationError{}

// Validate checks the field values on ListAttachmentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAttachmentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAttachmentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAttachmentsResponseMultiError, or nil if none found.
func (m *ListAttachmentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAttachmentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAttachmentsResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAttachmentsResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAttachmentsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAttachmentsResponseMultiError(errors)
	}

	return nil
}

// ListAttachmentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListAttachmentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAttachmentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAttachmentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAttachmentsResponseMultiError) AllErrors() []error { return m }

// ListAttachmentsResponseValidationError is the validation error returned by
// ListAttachmentsResponse.Validate if the designated constraints aren't met.
type ListAttachmentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAttachmentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAttachmentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAttachmentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAttachmentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAttachmentsResponseValidationError) ErrorName() string {
	return "ListAttachmentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAttachmentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAttachmentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAttachmentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAttachmentsResponseValidationError{}

// Validate checks the field values on RegisteredIntegrationItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisteredIntegrationItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisteredIntegrationItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisteredIntegrationItemMultiError, or nil if none found.
func (m *RegisteredIntegrationItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisteredIntegrationItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Kind

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisteredIntegrationItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisteredIntegrationItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisteredIntegrationItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Config

	if len(errors) > 0 {
		return RegisteredIntegrationItemMultiError(errors)
	}

	return nil
}

// RegisteredIntegrationItemMultiError is an error wrapping multiple validation
// errors returned by RegisteredIntegrationItem.ValidateAll() if the
// designated constraints aren't met.
type RegisteredIntegrationItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisteredIntegrationItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisteredIntegrationItemMultiError) AllErrors() []error { return m }

// RegisteredIntegrationItemValidationError is the validation error returned by
// RegisteredIntegrationItem.Validate if the designated constraints aren't met.
type RegisteredIntegrationItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisteredIntegrationItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisteredIntegrationItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisteredIntegrationItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisteredIntegrationItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisteredIntegrationItemValidationError) ErrorName() string {
	return "RegisteredIntegrationItemValidationError"
}

// Error satisfies the builtin error interface
func (e RegisteredIntegrationItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisteredIntegrationItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisteredIntegrationItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisteredIntegrationItemValidationError{}

// Validate checks the field values on IntegrationAttachmentItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntegrationAttachmentItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationAttachmentItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntegrationAttachmentItemMultiError, or nil if none found.
func (m *IntegrationAttachmentItem) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationAttachmentItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationAttachmentItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationAttachmentItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationAttachmentItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Config

	if all {
		switch v := interface{}(m.GetIntegration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationAttachmentItemValidationError{
					field:  "Integration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationAttachmentItemValidationError{
					field:  "Integration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIntegration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationAttachmentItemValidationError{
				field:  "Integration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntegrationAttachmentItemValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntegrationAttachmentItemValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntegrationAttachmentItemValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IntegrationAttachmentItemMultiError(errors)
	}

	return nil
}

// IntegrationAttachmentItemMultiError is an error wrapping multiple validation
// errors returned by IntegrationAttachmentItem.ValidateAll() if the
// designated constraints aren't met.
type IntegrationAttachmentItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationAttachmentItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationAttachmentItemMultiError) AllErrors() []error { return m }

// IntegrationAttachmentItemValidationError is the validation error returned by
// IntegrationAttachmentItem.Validate if the designated constraints aren't met.
type IntegrationAttachmentItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationAttachmentItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationAttachmentItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationAttachmentItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationAttachmentItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationAttachmentItemValidationError) ErrorName() string {
	return "IntegrationAttachmentItemValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationAttachmentItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationAttachmentItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationAttachmentItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationAttachmentItemValidationError{}

// Validate checks the field values on IntegrationsServiceDeregisterRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IntegrationsServiceDeregisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationsServiceDeregisterRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IntegrationsServiceDeregisterRequestMultiError, or nil if none found.
func (m *IntegrationsServiceDeregisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceDeregisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = IntegrationsServiceDeregisterRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IntegrationsServiceDeregisterRequestMultiError(errors)
	}

	return nil
}

func (m *IntegrationsServiceDeregisterRequest) _validateUuid(uuid string) error {
	if matched := _integrations_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IntegrationsServiceDeregisterRequestMultiError is an error wrapping multiple
// validation errors returned by
// IntegrationsServiceDeregisterRequest.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceDeregisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceDeregisterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceDeregisterRequestMultiError) AllErrors() []error { return m }

// IntegrationsServiceDeregisterRequestValidationError is the validation error
// returned by IntegrationsServiceDeregisterRequest.Validate if the designated
// constraints aren't met.
type IntegrationsServiceDeregisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceDeregisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceDeregisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceDeregisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceDeregisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceDeregisterRequestValidationError) ErrorName() string {
	return "IntegrationsServiceDeregisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceDeregisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceDeregisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceDeregisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceDeregisterRequestValidationError{}

// Validate checks the field values on IntegrationsServiceDeregisterResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IntegrationsServiceDeregisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntegrationsServiceDeregisterResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IntegrationsServiceDeregisterResponseMultiError, or nil if none found.
func (m *IntegrationsServiceDeregisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IntegrationsServiceDeregisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IntegrationsServiceDeregisterResponseMultiError(errors)
	}

	return nil
}

// IntegrationsServiceDeregisterResponseMultiError is an error wrapping
// multiple validation errors returned by
// IntegrationsServiceDeregisterResponse.ValidateAll() if the designated
// constraints aren't met.
type IntegrationsServiceDeregisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntegrationsServiceDeregisterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntegrationsServiceDeregisterResponseMultiError) AllErrors() []error { return m }

// IntegrationsServiceDeregisterResponseValidationError is the validation error
// returned by IntegrationsServiceDeregisterResponse.Validate if the
// designated constraints aren't met.
type IntegrationsServiceDeregisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntegrationsServiceDeregisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntegrationsServiceDeregisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntegrationsServiceDeregisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntegrationsServiceDeregisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntegrationsServiceDeregisterResponseValidationError) ErrorName() string {
	return "IntegrationsServiceDeregisterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IntegrationsServiceDeregisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntegrationsServiceDeregisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntegrationsServiceDeregisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntegrationsServiceDeregisterResponseValidationError{}
