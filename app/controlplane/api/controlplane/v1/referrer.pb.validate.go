// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: controlplane/v1/referrer.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReferrerServiceDiscoverPrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ReferrerServiceDiscoverPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReferrerServiceDiscoverPrivateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReferrerServiceDiscoverPrivateRequestMultiError, or nil if none found.
func (m *ReferrerServiceDiscoverPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReferrerServiceDiscoverPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDigest()) < 1 {
		err := ReferrerServiceDiscoverPrivateRequestValidationError{
			field:  "Digest",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Kind

	if len(errors) > 0 {
		return ReferrerServiceDiscoverPrivateRequestMultiError(errors)
	}

	return nil
}

// ReferrerServiceDiscoverPrivateRequestMultiError is an error wrapping
// multiple validation errors returned by
// ReferrerServiceDiscoverPrivateRequest.ValidateAll() if the designated
// constraints aren't met.
type ReferrerServiceDiscoverPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReferrerServiceDiscoverPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReferrerServiceDiscoverPrivateRequestMultiError) AllErrors() []error { return m }

// ReferrerServiceDiscoverPrivateRequestValidationError is the validation error
// returned by ReferrerServiceDiscoverPrivateRequest.Validate if the
// designated constraints aren't met.
type ReferrerServiceDiscoverPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReferrerServiceDiscoverPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReferrerServiceDiscoverPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReferrerServiceDiscoverPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReferrerServiceDiscoverPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReferrerServiceDiscoverPrivateRequestValidationError) ErrorName() string {
	return "ReferrerServiceDiscoverPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReferrerServiceDiscoverPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReferrerServiceDiscoverPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReferrerServiceDiscoverPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReferrerServiceDiscoverPrivateRequestValidationError{}

// Validate checks the field values on DiscoverPublicSharedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscoverPublicSharedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoverPublicSharedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscoverPublicSharedRequestMultiError, or nil if none found.
func (m *DiscoverPublicSharedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoverPublicSharedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDigest()) < 1 {
		err := DiscoverPublicSharedRequestValidationError{
			field:  "Digest",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Kind

	if len(errors) > 0 {
		return DiscoverPublicSharedRequestMultiError(errors)
	}

	return nil
}

// DiscoverPublicSharedRequestMultiError is an error wrapping multiple
// validation errors returned by DiscoverPublicSharedRequest.ValidateAll() if
// the designated constraints aren't met.
type DiscoverPublicSharedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoverPublicSharedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoverPublicSharedRequestMultiError) AllErrors() []error { return m }

// DiscoverPublicSharedRequestValidationError is the validation error returned
// by DiscoverPublicSharedRequest.Validate if the designated constraints
// aren't met.
type DiscoverPublicSharedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoverPublicSharedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoverPublicSharedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoverPublicSharedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoverPublicSharedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoverPublicSharedRequestValidationError) ErrorName() string {
	return "DiscoverPublicSharedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoverPublicSharedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoverPublicSharedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoverPublicSharedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoverPublicSharedRequestValidationError{}

// Validate checks the field values on DiscoverPublicSharedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscoverPublicSharedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoverPublicSharedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscoverPublicSharedResponseMultiError, or nil if none found.
func (m *DiscoverPublicSharedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoverPublicSharedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscoverPublicSharedResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscoverPublicSharedResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscoverPublicSharedResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiscoverPublicSharedResponseMultiError(errors)
	}

	return nil
}

// DiscoverPublicSharedResponseMultiError is an error wrapping multiple
// validation errors returned by DiscoverPublicSharedResponse.ValidateAll() if
// the designated constraints aren't met.
type DiscoverPublicSharedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoverPublicSharedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoverPublicSharedResponseMultiError) AllErrors() []error { return m }

// DiscoverPublicSharedResponseValidationError is the validation error returned
// by DiscoverPublicSharedResponse.Validate if the designated constraints
// aren't met.
type DiscoverPublicSharedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoverPublicSharedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoverPublicSharedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoverPublicSharedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoverPublicSharedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoverPublicSharedResponseValidationError) ErrorName() string {
	return "DiscoverPublicSharedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoverPublicSharedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoverPublicSharedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoverPublicSharedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoverPublicSharedResponseValidationError{}

// Validate checks the field values on ReferrerServiceDiscoverPrivateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ReferrerServiceDiscoverPrivateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ReferrerServiceDiscoverPrivateResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ReferrerServiceDiscoverPrivateResponseMultiError, or nil if none found.
func (m *ReferrerServiceDiscoverPrivateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReferrerServiceDiscoverPrivateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReferrerServiceDiscoverPrivateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReferrerServiceDiscoverPrivateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReferrerServiceDiscoverPrivateResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReferrerServiceDiscoverPrivateResponseMultiError(errors)
	}

	return nil
}

// ReferrerServiceDiscoverPrivateResponseMultiError is an error wrapping
// multiple validation errors returned by
// ReferrerServiceDiscoverPrivateResponse.ValidateAll() if the designated
// constraints aren't met.
type ReferrerServiceDiscoverPrivateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReferrerServiceDiscoverPrivateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReferrerServiceDiscoverPrivateResponseMultiError) AllErrors() []error { return m }

// ReferrerServiceDiscoverPrivateResponseValidationError is the validation
// error returned by ReferrerServiceDiscoverPrivateResponse.Validate if the
// designated constraints aren't met.
type ReferrerServiceDiscoverPrivateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReferrerServiceDiscoverPrivateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReferrerServiceDiscoverPrivateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReferrerServiceDiscoverPrivateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReferrerServiceDiscoverPrivateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReferrerServiceDiscoverPrivateResponseValidationError) ErrorName() string {
	return "ReferrerServiceDiscoverPrivateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReferrerServiceDiscoverPrivateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReferrerServiceDiscoverPrivateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReferrerServiceDiscoverPrivateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReferrerServiceDiscoverPrivateResponseValidationError{}

// Validate checks the field values on ReferrerItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReferrerItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReferrerItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReferrerItemMultiError, or
// nil if none found.
func (m *ReferrerItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ReferrerItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Digest

	// no validation rules for Kind

	// no validation rules for Downloadable

	// no validation rules for Public

	for idx, item := range m.GetReferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReferrerItemValidationError{
						field:  fmt.Sprintf("References[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReferrerItemValidationError{
						field:  fmt.Sprintf("References[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReferrerItemValidationError{
					field:  fmt.Sprintf("References[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReferrerItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReferrerItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReferrerItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReferrerItemMultiError(errors)
	}

	return nil
}

// ReferrerItemMultiError is an error wrapping multiple validation errors
// returned by ReferrerItem.ValidateAll() if the designated constraints aren't met.
type ReferrerItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReferrerItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReferrerItemMultiError) AllErrors() []error { return m }

// ReferrerItemValidationError is the validation error returned by
// ReferrerItem.Validate if the designated constraints aren't met.
type ReferrerItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReferrerItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReferrerItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReferrerItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReferrerItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReferrerItemValidationError) ErrorName() string { return "ReferrerItemValidationError" }

// Error satisfies the builtin error interface
func (e ReferrerItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReferrerItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReferrerItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReferrerItemValidationError{}
