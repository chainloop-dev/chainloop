//
// Copyright 2023 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package controlplane.v1;

option go_package = "github.com/chainloop-dev/chainloop/app/controlplane/api/controlplane/v1;v1";
import "validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "controlplane/v1/response_messages.proto";

service IntegrationsService {
	// Integrations available and loaded in the controlplane ready to be used during registration
	rpc ListAvailable (IntegrationsServiceListAvailableRequest) returns (IntegrationsServiceListAvailableResponse);

	// Registration Related operations
	// Register a new integration in the organization
	rpc Register (IntegrationsServiceRegisterRequest) returns (IntegrationsServiceRegisterResponse);
	// Delete registered integrations
	rpc Deregister (IntegrationsServiceDeregisterRequest) returns (IntegrationsServiceDeregisterResponse);
	// List registered integrations
	rpc ListRegistrations (IntegrationsServiceListRegistrationsRequest) returns (IntegrationsServiceListRegistrationsResponse);

	// Attachment Related operations
	// Attach an integration to a workflow
	rpc Attach (IntegrationsServiceAttachRequest) returns (IntegrationsServiceAttachResponse);
	// Detach integration from a workflow
	rpc Detach (IntegrationsServiceDetachRequest) returns (IntegrationsServiceDetachResponse);
	// List attachments
	rpc ListAttachments (ListAttachmentsRequest) returns (ListAttachmentsResponse);
}

message IntegrationsServiceRegisterRequest {
	// Kind of integration to register
	// This should match the ID of an existing extension
	string extension_id = 1 [(validate.rules).string.min_len = 1];
	// Arbitrary configuration for the integration
	google.protobuf.Struct config = 3 [(validate.rules).message.required = true];
	// Description of the registration, used for display purposes
	string description = 4;
}

message IntegrationsServiceRegisterResponse {
	RegisteredIntegrationItem result = 1;
}

message IntegrationsServiceAttachRequest{
	// UUID of the workflow to attach
	string workflow_id = 1 [(validate.rules).string.uuid = true];
	// UUID of the integration registration to attach
	string integration_id = 2 [(validate.rules).string.uuid = true];
	// Arbitrary configuration for the integration
	google.protobuf.Struct config = 4 [(validate.rules).message.required = true];
}

message IntegrationsServiceAttachResponse{
	IntegrationAttachmentItem result = 1;
}

message IntegrationsServiceListAvailableRequest{}
message IntegrationsServiceListAvailableResponse{
	repeated Integration result = 1;

	message Integration {
		// Integration identifier
		string id = 1;
		string version = 2;
		// Registration and attachment JSON schemas
		bytes registration_schema = 3;
		bytes attachment_schema = 4;
		// List of materials that the integration is subscribed to
		repeated string subscribed_materials = 5;
		// Weather the integration is subscribed to attestations
		bool subscribed_attestation = 6;
	}
}

message IntegrationsServiceListRegistrationsRequest{}
message IntegrationsServiceListRegistrationsResponse{
	repeated RegisteredIntegrationItem result = 1;
}

message IntegrationsServiceDetachRequest{
  string id = 1 [(validate.rules).string.uuid = true];
}

message IntegrationsServiceDetachResponse {}

message ListAttachmentsRequest{
  // Filter by workflow
  string workflow_id = 1;
}

message ListAttachmentsResponse{
	repeated IntegrationAttachmentItem result = 1;
}

message RegisteredIntegrationItem {
	string id = 1;
	string kind = 2;
	// Description of the registration, used for display purposes
	string description = 4;
	google.protobuf.Timestamp created_at = 3;
	// Arbitrary configuration for the integration
	bytes config = 5;
}

message IntegrationAttachmentItem {
	string id = 1;
	google.protobuf.Timestamp created_at = 2;
	// Arbitrary configuration for the attachment
	bytes config = 3;
	RegisteredIntegrationItem integration = 4;
	WorkflowItem workflow = 5;
}

message IntegrationsServiceDeregisterRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message IntegrationsServiceDeregisterResponse {}