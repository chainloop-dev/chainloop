//
// Copyright 2023 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package controlplane.v1;

option go_package = "github.com/chainloop-dev/chainloop/app/controlplane/api/controlplane/v1;v1";
import "validate/validate.proto";
import "google/protobuf/timestamp.proto";
import "controlplane/v1/response_messages.proto";

service IntegrationsService {
	// ORG related CRUD
	rpc AddDependencyTrack (AddDependencyTrackRequest) returns (AddDependencyTrackResponse);
	rpc List (IntegrationsServiceListRequest) returns (IntegrationsServiceListResponse);
	rpc Delete (IntegrationsServiceDeleteRequest) returns (IntegrationsServiceDeleteResponse);

	// Workflow Related operations
	// Attach to a workflow
	rpc Attach (IntegrationsServiceAttachRequest) returns (IntegrationsServiceAttachResponse);

	// Detach integration from a workflow
	rpc Detach (IntegrationsServiceDetachRequest) returns (IntegrationsServiceDetachResponse);
	
	rpc ListAttachments (ListAttachmentsRequest) returns (ListAttachmentsResponse);
}

message AddDependencyTrackRequest {
	IntegrationConfig.DependencyTrack config = 1 [(validate.rules).message.required = true];
	string api_key = 2 [(validate.rules).string.min_len = 1];
}

message AddDependencyTrackResponse {
	IntegrationItem result = 1;
}

message IntegrationsServiceListRequest{}
message IntegrationsServiceListResponse{
	repeated IntegrationItem result = 1;
}

message IntegrationsServiceAttachRequest{
  string workflow_id = 1 [(validate.rules).string.uuid = true];
  string integration_id = 2 [(validate.rules).string.uuid = true];
  IntegrationAttachmentConfig config = 3 [(validate.rules).message.required = true];
}

message IntegrationsServiceAttachResponse{
	IntegrationAttachmentItem result = 1;
}

message IntegrationsServiceDetachRequest{
  string id = 1 [(validate.rules).string.uuid = true];
}

message IntegrationsServiceDetachResponse {}

message ListAttachmentsRequest{
  // Filter by workflow
  string workflow_id = 1;
}

message ListAttachmentsResponse{
	repeated IntegrationAttachmentItem result = 1;
}

message IntegrationItem {
	string id = 1;
	string kind = 2;
	google.protobuf.Timestamp created_at = 3;
	IntegrationConfig config = 4;
}

message IntegrationAttachmentItem {
	string id = 1;
	google.protobuf.Timestamp created_at = 2;
	IntegrationAttachmentConfig config = 3;
	IntegrationItem integration = 4;
	WorkflowItem workflow = 5;
}

// Configuration used when a Integration is created in an organization
message IntegrationConfig {
	oneof config {
		DependencyTrack dependency_track = 1;
	}

	message DependencyTrack {
		string domain = 1 [(validate.rules).string.min_len = 1];
		// Support the option to automatically create projects if requested
		bool allow_auto_create = 2;
	}
}

// Configuration used when a Integration is attached to a Workflow
message IntegrationAttachmentConfig {
	oneof config {
		DependencyTrack dependency_track = 1;
	}

	message DependencyTrack {
		oneof project {
			option (validate.required) = true;
			// The integration might either use a pre-configured projectID
			string project_id = 1;
			// name of the project ot be auto created
			string project_name = 2;
		}
	}
}

message IntegrationsServiceDeleteRequest {
  string id = 1 [(validate.rules).string.uuid = true];
}

message IntegrationsServiceDeleteResponse {}