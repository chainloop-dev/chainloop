//
// Copyright 2024 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: controlplane/v1/workflow_run.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AttestationService_GetContract_FullMethodName    = "/controlplane.v1.AttestationService/GetContract"
	AttestationService_Init_FullMethodName           = "/controlplane.v1.AttestationService/Init"
	AttestationService_Store_FullMethodName          = "/controlplane.v1.AttestationService/Store"
	AttestationService_GetUploadCreds_FullMethodName = "/controlplane.v1.AttestationService/GetUploadCreds"
	AttestationService_Cancel_FullMethodName         = "/controlplane.v1.AttestationService/Cancel"
)

// AttestationServiceClient is the client API for AttestationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttestationServiceClient interface {
	GetContract(ctx context.Context, in *AttestationServiceGetContractRequest, opts ...grpc.CallOption) (*AttestationServiceGetContractResponse, error)
	Init(ctx context.Context, in *AttestationServiceInitRequest, opts ...grpc.CallOption) (*AttestationServiceInitResponse, error)
	Store(ctx context.Context, in *AttestationServiceStoreRequest, opts ...grpc.CallOption) (*AttestationServiceStoreResponse, error)
	// There is another endpoint to get credentials via casCredentialsService.Get
	// This one is kept since it leverages robot-accounts in the context of a workflow
	GetUploadCreds(ctx context.Context, in *AttestationServiceGetUploadCredsRequest, opts ...grpc.CallOption) (*AttestationServiceGetUploadCredsResponse, error)
	Cancel(ctx context.Context, in *AttestationServiceCancelRequest, opts ...grpc.CallOption) (*AttestationServiceCancelResponse, error)
}

type attestationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttestationServiceClient(cc grpc.ClientConnInterface) AttestationServiceClient {
	return &attestationServiceClient{cc}
}

func (c *attestationServiceClient) GetContract(ctx context.Context, in *AttestationServiceGetContractRequest, opts ...grpc.CallOption) (*AttestationServiceGetContractResponse, error) {
	out := new(AttestationServiceGetContractResponse)
	err := c.cc.Invoke(ctx, AttestationService_GetContract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationServiceClient) Init(ctx context.Context, in *AttestationServiceInitRequest, opts ...grpc.CallOption) (*AttestationServiceInitResponse, error) {
	out := new(AttestationServiceInitResponse)
	err := c.cc.Invoke(ctx, AttestationService_Init_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationServiceClient) Store(ctx context.Context, in *AttestationServiceStoreRequest, opts ...grpc.CallOption) (*AttestationServiceStoreResponse, error) {
	out := new(AttestationServiceStoreResponse)
	err := c.cc.Invoke(ctx, AttestationService_Store_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationServiceClient) GetUploadCreds(ctx context.Context, in *AttestationServiceGetUploadCredsRequest, opts ...grpc.CallOption) (*AttestationServiceGetUploadCredsResponse, error) {
	out := new(AttestationServiceGetUploadCredsResponse)
	err := c.cc.Invoke(ctx, AttestationService_GetUploadCreds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attestationServiceClient) Cancel(ctx context.Context, in *AttestationServiceCancelRequest, opts ...grpc.CallOption) (*AttestationServiceCancelResponse, error) {
	out := new(AttestationServiceCancelResponse)
	err := c.cc.Invoke(ctx, AttestationService_Cancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttestationServiceServer is the server API for AttestationService service.
// All implementations must embed UnimplementedAttestationServiceServer
// for forward compatibility
type AttestationServiceServer interface {
	GetContract(context.Context, *AttestationServiceGetContractRequest) (*AttestationServiceGetContractResponse, error)
	Init(context.Context, *AttestationServiceInitRequest) (*AttestationServiceInitResponse, error)
	Store(context.Context, *AttestationServiceStoreRequest) (*AttestationServiceStoreResponse, error)
	// There is another endpoint to get credentials via casCredentialsService.Get
	// This one is kept since it leverages robot-accounts in the context of a workflow
	GetUploadCreds(context.Context, *AttestationServiceGetUploadCredsRequest) (*AttestationServiceGetUploadCredsResponse, error)
	Cancel(context.Context, *AttestationServiceCancelRequest) (*AttestationServiceCancelResponse, error)
	mustEmbedUnimplementedAttestationServiceServer()
}

// UnimplementedAttestationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAttestationServiceServer struct {
}

func (UnimplementedAttestationServiceServer) GetContract(context.Context, *AttestationServiceGetContractRequest) (*AttestationServiceGetContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContract not implemented")
}
func (UnimplementedAttestationServiceServer) Init(context.Context, *AttestationServiceInitRequest) (*AttestationServiceInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedAttestationServiceServer) Store(context.Context, *AttestationServiceStoreRequest) (*AttestationServiceStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedAttestationServiceServer) GetUploadCreds(context.Context, *AttestationServiceGetUploadCredsRequest) (*AttestationServiceGetUploadCredsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadCreds not implemented")
}
func (UnimplementedAttestationServiceServer) Cancel(context.Context, *AttestationServiceCancelRequest) (*AttestationServiceCancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedAttestationServiceServer) mustEmbedUnimplementedAttestationServiceServer() {}

// UnsafeAttestationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttestationServiceServer will
// result in compilation errors.
type UnsafeAttestationServiceServer interface {
	mustEmbedUnimplementedAttestationServiceServer()
}

func RegisterAttestationServiceServer(s grpc.ServiceRegistrar, srv AttestationServiceServer) {
	s.RegisterService(&AttestationService_ServiceDesc, srv)
}

func _AttestationService_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttestationServiceGetContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationServiceServer).GetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttestationService_GetContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationServiceServer).GetContract(ctx, req.(*AttestationServiceGetContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttestationServiceInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttestationService_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationServiceServer).Init(ctx, req.(*AttestationServiceInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationService_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttestationServiceStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationServiceServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttestationService_Store_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationServiceServer).Store(ctx, req.(*AttestationServiceStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationService_GetUploadCreds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttestationServiceGetUploadCredsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationServiceServer).GetUploadCreds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttestationService_GetUploadCreds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationServiceServer).GetUploadCreds(ctx, req.(*AttestationServiceGetUploadCredsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttestationService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttestationServiceCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttestationServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttestationService_Cancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttestationServiceServer).Cancel(ctx, req.(*AttestationServiceCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttestationService_ServiceDesc is the grpc.ServiceDesc for AttestationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttestationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controlplane.v1.AttestationService",
	HandlerType: (*AttestationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContract",
			Handler:    _AttestationService_GetContract_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _AttestationService_Init_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _AttestationService_Store_Handler,
		},
		{
			MethodName: "GetUploadCreds",
			Handler:    _AttestationService_GetUploadCreds_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _AttestationService_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controlplane/v1/workflow_run.proto",
}

const (
	WorkflowRunService_List_FullMethodName = "/controlplane.v1.WorkflowRunService/List"
	WorkflowRunService_View_FullMethodName = "/controlplane.v1.WorkflowRunService/View"
)

// WorkflowRunServiceClient is the client API for WorkflowRunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowRunServiceClient interface {
	List(ctx context.Context, in *WorkflowRunServiceListRequest, opts ...grpc.CallOption) (*WorkflowRunServiceListResponse, error)
	View(ctx context.Context, in *WorkflowRunServiceViewRequest, opts ...grpc.CallOption) (*WorkflowRunServiceViewResponse, error)
}

type workflowRunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowRunServiceClient(cc grpc.ClientConnInterface) WorkflowRunServiceClient {
	return &workflowRunServiceClient{cc}
}

func (c *workflowRunServiceClient) List(ctx context.Context, in *WorkflowRunServiceListRequest, opts ...grpc.CallOption) (*WorkflowRunServiceListResponse, error) {
	out := new(WorkflowRunServiceListResponse)
	err := c.cc.Invoke(ctx, WorkflowRunService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowRunServiceClient) View(ctx context.Context, in *WorkflowRunServiceViewRequest, opts ...grpc.CallOption) (*WorkflowRunServiceViewResponse, error) {
	out := new(WorkflowRunServiceViewResponse)
	err := c.cc.Invoke(ctx, WorkflowRunService_View_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowRunServiceServer is the server API for WorkflowRunService service.
// All implementations must embed UnimplementedWorkflowRunServiceServer
// for forward compatibility
type WorkflowRunServiceServer interface {
	List(context.Context, *WorkflowRunServiceListRequest) (*WorkflowRunServiceListResponse, error)
	View(context.Context, *WorkflowRunServiceViewRequest) (*WorkflowRunServiceViewResponse, error)
	mustEmbedUnimplementedWorkflowRunServiceServer()
}

// UnimplementedWorkflowRunServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowRunServiceServer struct {
}

func (UnimplementedWorkflowRunServiceServer) List(context.Context, *WorkflowRunServiceListRequest) (*WorkflowRunServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWorkflowRunServiceServer) View(context.Context, *WorkflowRunServiceViewRequest) (*WorkflowRunServiceViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedWorkflowRunServiceServer) mustEmbedUnimplementedWorkflowRunServiceServer() {}

// UnsafeWorkflowRunServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowRunServiceServer will
// result in compilation errors.
type UnsafeWorkflowRunServiceServer interface {
	mustEmbedUnimplementedWorkflowRunServiceServer()
}

func RegisterWorkflowRunServiceServer(s grpc.ServiceRegistrar, srv WorkflowRunServiceServer) {
	s.RegisterService(&WorkflowRunService_ServiceDesc, srv)
}

func _WorkflowRunService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRunServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowRunServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowRunService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowRunServiceServer).List(ctx, req.(*WorkflowRunServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowRunService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowRunServiceViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowRunServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkflowRunService_View_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowRunServiceServer).View(ctx, req.(*WorkflowRunServiceViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowRunService_ServiceDesc is the grpc.ServiceDesc for WorkflowRunService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowRunService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controlplane.v1.WorkflowRunService",
	HandlerType: (*WorkflowRunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _WorkflowRunService_List_Handler,
		},
		{
			MethodName: "View",
			Handler:    _WorkflowRunService_View_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controlplane/v1/workflow_run.proto",
}
