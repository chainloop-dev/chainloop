// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: controlplane/v1/workflow.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _workflow_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on WorkflowServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowServiceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowServiceCreateRequestMultiError, or nil if none found.
func (m *WorkflowServiceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowServiceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := WorkflowServiceCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := WorkflowServiceCreateRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SchemaId

	// no validation rules for Team

	// no validation rules for Description

	if len(errors) > 0 {
		return WorkflowServiceCreateRequestMultiError(errors)
	}

	return nil
}

// WorkflowServiceCreateRequestMultiError is an error wrapping multiple
// validation errors returned by WorkflowServiceCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type WorkflowServiceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowServiceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowServiceCreateRequestMultiError) AllErrors() []error { return m }

// WorkflowServiceCreateRequestValidationError is the validation error returned
// by WorkflowServiceCreateRequest.Validate if the designated constraints
// aren't met.
type WorkflowServiceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowServiceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowServiceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowServiceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowServiceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowServiceCreateRequestValidationError) ErrorName() string {
	return "WorkflowServiceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowServiceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowServiceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowServiceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowServiceCreateRequestValidationError{}

// Validate checks the field values on WorkflowServiceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowServiceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowServiceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowServiceUpdateRequestMultiError, or nil if none found.
func (m *WorkflowServiceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowServiceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = WorkflowServiceUpdateRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Project != nil {
		// no validation rules for Project
	}

	if m.Team != nil {
		// no validation rules for Team
	}

	if m.Public != nil {
		// no validation rules for Public
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return WorkflowServiceUpdateRequestMultiError(errors)
	}

	return nil
}

func (m *WorkflowServiceUpdateRequest) _validateUuid(uuid string) error {
	if matched := _workflow_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// WorkflowServiceUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by WorkflowServiceUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type WorkflowServiceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowServiceUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowServiceUpdateRequestMultiError) AllErrors() []error { return m }

// WorkflowServiceUpdateRequestValidationError is the validation error returned
// by WorkflowServiceUpdateRequest.Validate if the designated constraints
// aren't met.
type WorkflowServiceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowServiceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowServiceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowServiceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowServiceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowServiceUpdateRequestValidationError) ErrorName() string {
	return "WorkflowServiceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowServiceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowServiceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowServiceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowServiceUpdateRequestValidationError{}

// Validate checks the field values on WorkflowServiceUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowServiceUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowServiceUpdateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WorkflowServiceUpdateResponseMultiError, or nil if none found.
func (m *WorkflowServiceUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowServiceUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowServiceUpdateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowServiceUpdateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowServiceUpdateResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowServiceUpdateResponseMultiError(errors)
	}

	return nil
}

// WorkflowServiceUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by WorkflowServiceUpdateResponse.ValidateAll()
// if the designated constraints aren't met.
type WorkflowServiceUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowServiceUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowServiceUpdateResponseMultiError) AllErrors() []error { return m }

// WorkflowServiceUpdateResponseValidationError is the validation error
// returned by WorkflowServiceUpdateResponse.Validate if the designated
// constraints aren't met.
type WorkflowServiceUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowServiceUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowServiceUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowServiceUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowServiceUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowServiceUpdateResponseValidationError) ErrorName() string {
	return "WorkflowServiceUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowServiceUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowServiceUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowServiceUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowServiceUpdateResponseValidationError{}

// Validate checks the field values on WorkflowServiceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowServiceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowServiceCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WorkflowServiceCreateResponseMultiError, or nil if none found.
func (m *WorkflowServiceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowServiceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowServiceCreateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowServiceCreateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowServiceCreateResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowServiceCreateResponseMultiError(errors)
	}

	return nil
}

// WorkflowServiceCreateResponseMultiError is an error wrapping multiple
// validation errors returned by WorkflowServiceCreateResponse.ValidateAll()
// if the designated constraints aren't met.
type WorkflowServiceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowServiceCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowServiceCreateResponseMultiError) AllErrors() []error { return m }

// WorkflowServiceCreateResponseValidationError is the validation error
// returned by WorkflowServiceCreateResponse.Validate if the designated
// constraints aren't met.
type WorkflowServiceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowServiceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowServiceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowServiceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowServiceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowServiceCreateResponseValidationError) ErrorName() string {
	return "WorkflowServiceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowServiceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowServiceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowServiceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowServiceCreateResponseValidationError{}

// Validate checks the field values on WorkflowServiceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowServiceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowServiceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowServiceDeleteRequestMultiError, or nil if none found.
func (m *WorkflowServiceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowServiceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = WorkflowServiceDeleteRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WorkflowServiceDeleteRequestMultiError(errors)
	}

	return nil
}

func (m *WorkflowServiceDeleteRequest) _validateUuid(uuid string) error {
	if matched := _workflow_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// WorkflowServiceDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by WorkflowServiceDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type WorkflowServiceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowServiceDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowServiceDeleteRequestMultiError) AllErrors() []error { return m }

// WorkflowServiceDeleteRequestValidationError is the validation error returned
// by WorkflowServiceDeleteRequest.Validate if the designated constraints
// aren't met.
type WorkflowServiceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowServiceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowServiceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowServiceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowServiceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowServiceDeleteRequestValidationError) ErrorName() string {
	return "WorkflowServiceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowServiceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowServiceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowServiceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowServiceDeleteRequestValidationError{}

// Validate checks the field values on WorkflowServiceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowServiceDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowServiceDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WorkflowServiceDeleteResponseMultiError, or nil if none found.
func (m *WorkflowServiceDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowServiceDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WorkflowServiceDeleteResponseMultiError(errors)
	}

	return nil
}

// WorkflowServiceDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by WorkflowServiceDeleteResponse.ValidateAll()
// if the designated constraints aren't met.
type WorkflowServiceDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowServiceDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowServiceDeleteResponseMultiError) AllErrors() []error { return m }

// WorkflowServiceDeleteResponseValidationError is the validation error
// returned by WorkflowServiceDeleteResponse.Validate if the designated
// constraints aren't met.
type WorkflowServiceDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowServiceDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowServiceDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowServiceDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowServiceDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowServiceDeleteResponseValidationError) ErrorName() string {
	return "WorkflowServiceDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowServiceDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowServiceDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowServiceDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowServiceDeleteResponseValidationError{}

// Validate checks the field values on WorkflowServiceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowServiceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowServiceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowServiceListRequestMultiError, or nil if none found.
func (m *WorkflowServiceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowServiceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WorkflowServiceListRequestMultiError(errors)
	}

	return nil
}

// WorkflowServiceListRequestMultiError is an error wrapping multiple
// validation errors returned by WorkflowServiceListRequest.ValidateAll() if
// the designated constraints aren't met.
type WorkflowServiceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowServiceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowServiceListRequestMultiError) AllErrors() []error { return m }

// WorkflowServiceListRequestValidationError is the validation error returned
// by WorkflowServiceListRequest.Validate if the designated constraints aren't met.
type WorkflowServiceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowServiceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowServiceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowServiceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowServiceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowServiceListRequestValidationError) ErrorName() string {
	return "WorkflowServiceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowServiceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowServiceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowServiceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowServiceListRequestValidationError{}

// Validate checks the field values on WorkflowServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowServiceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowServiceListResponseMultiError, or nil if none found.
func (m *WorkflowServiceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowServiceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkflowServiceListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkflowServiceListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowServiceListResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WorkflowServiceListResponseMultiError(errors)
	}

	return nil
}

// WorkflowServiceListResponseMultiError is an error wrapping multiple
// validation errors returned by WorkflowServiceListResponse.ValidateAll() if
// the designated constraints aren't met.
type WorkflowServiceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowServiceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowServiceListResponseMultiError) AllErrors() []error { return m }

// WorkflowServiceListResponseValidationError is the validation error returned
// by WorkflowServiceListResponse.Validate if the designated constraints
// aren't met.
type WorkflowServiceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowServiceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowServiceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowServiceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowServiceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowServiceListResponseValidationError) ErrorName() string {
	return "WorkflowServiceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowServiceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowServiceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowServiceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowServiceListResponseValidationError{}

// Validate checks the field values on WorkflowServiceViewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowServiceViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowServiceViewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowServiceViewRequestMultiError, or nil if none found.
func (m *WorkflowServiceViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowServiceViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = WorkflowServiceViewRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WorkflowServiceViewRequestMultiError(errors)
	}

	return nil
}

func (m *WorkflowServiceViewRequest) _validateUuid(uuid string) error {
	if matched := _workflow_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// WorkflowServiceViewRequestMultiError is an error wrapping multiple
// validation errors returned by WorkflowServiceViewRequest.ValidateAll() if
// the designated constraints aren't met.
type WorkflowServiceViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowServiceViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowServiceViewRequestMultiError) AllErrors() []error { return m }

// WorkflowServiceViewRequestValidationError is the validation error returned
// by WorkflowServiceViewRequest.Validate if the designated constraints aren't met.
type WorkflowServiceViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowServiceViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowServiceViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowServiceViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowServiceViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowServiceViewRequestValidationError) ErrorName() string {
	return "WorkflowServiceViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowServiceViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowServiceViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowServiceViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowServiceViewRequestValidationError{}

// Validate checks the field values on WorkflowServiceViewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowServiceViewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowServiceViewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkflowServiceViewResponseMultiError, or nil if none found.
func (m *WorkflowServiceViewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowServiceViewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowServiceViewResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowServiceViewResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowServiceViewResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowServiceViewResponseMultiError(errors)
	}

	return nil
}

// WorkflowServiceViewResponseMultiError is an error wrapping multiple
// validation errors returned by WorkflowServiceViewResponse.ValidateAll() if
// the designated constraints aren't met.
type WorkflowServiceViewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowServiceViewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowServiceViewResponseMultiError) AllErrors() []error { return m }

// WorkflowServiceViewResponseValidationError is the validation error returned
// by WorkflowServiceViewResponse.Validate if the designated constraints
// aren't met.
type WorkflowServiceViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowServiceViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowServiceViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowServiceViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowServiceViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowServiceViewResponseValidationError) ErrorName() string {
	return "WorkflowServiceViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowServiceViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowServiceViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowServiceViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowServiceViewResponseValidationError{}
