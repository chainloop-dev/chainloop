//
// Copyright 2023 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package controlplane.v1;

option go_package = "github.com/chainloop-dev/chainloop/app/controlplane/api/controlplane/v1;v1";

import "google/protobuf/timestamp.proto";
import "workflowcontract/v1/crafting_schema.proto";
import "errors/errors.proto";

message WorkflowItem {
  string id = 1;
  string name = 2;
  string project = 3;
  string team = 4;
  google.protobuf.Timestamp created_at = 5;
  int32 runs_count = 6;

  WorkflowRunItem last_run = 7;
  string contract_id = 8;
  // A public workflow means that any user can
  // - access to all its workflow runs
  // - their attestation and materials
  bool public = 9;
}

message WorkflowRunItem {
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp finished_at = 3;
  string state = 4;
  string reason = 5;
  WorkflowItem workflow = 6;
  string job_url = 7;
  // string runner_type = 8;
  workflowcontract.v1.CraftingSchema.Runner.RunnerType runner_type = 8;
  WorkflowContractVersionItem contract_version = 9;
}

message AttestationItem {
  // encoded DSEE envelope
  bytes envelope = 3;
  // sha256sum of the envelope in json format, used as a key in the CAS backend
  string digest_in_cas_backend = 7;

  // denormalized envelope/statement content
  repeated EnvVariable env_vars = 4;
  repeated Material materials = 5;
  map<string, string> annotations = 6;

  message EnvVariable {
    string name = 1; 
    string value = 2; 
  }

  message Material {
    string name = 1; 
    // This might be the raw value, the container image name, the filename and so on
    string value = 2; 
    // filename of the artifact that was either uploaded or injected inline in "value"
    string filename = 8;
    // Material type, i.e ARTIFACT
    string type = 3; 
    map<string, string> annotations = 4;
    string hash = 5; 
    // it's been uploaded to an actual CAS backend
    bool uploaded_to_cas = 6;
    // the content instead if inline
    bool embedded_inline = 7;
  }
}

message WorkflowContractItem {
  string id = 1;
  string name = 2;
  google.protobuf.Timestamp created_at = 3;
  int32 latest_revision = 4;
  // Workflows associated with this contract
  repeated string workflow_ids = 5;
}

message WorkflowContractVersionItem {
  string id = 1;
  int32 revision = 2;
  google.protobuf.Timestamp created_at = 3;
  oneof contract {
    workflowcontract.v1.CraftingSchema v1 = 4;
  }
}

message User {
  string id = 1;
  string email = 2;
  google.protobuf.Timestamp created_at = 3;
}

message OrgMembershipItem {
  string id = 1;
  OrgItem org = 2;
  bool current = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

message OrgItem {
  string id = 1;
  string name = 2;
  google.protobuf.Timestamp created_at = 3;
}

message CASBackendItem {
  string id = 1;
  // e.g. myregistry.io/myrepo s3 bucket and so on
  string location = 2;
  string description = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp validated_at = 5;
  ValidationStatus validation_status = 6;
  // OCI, S3, ...
  string provider = 7;
  // Wether it's the default backend in the organization
  bool default = 8;
  // Limits for this backend
  Limits limits = 9;
  // Is it an inline backend?
  // inline means that the content is stored in the attestation itself
  bool is_inline = 10;

  message Limits {
    // Max number of bytes allowed to be stored in this backend
    int64 max_bytes = 1;
  }

  enum ValidationStatus {
    VALIDATION_STATUS_UNSPECIFIED = 0;
    VALIDATION_STATUS_OK = 1;
    VALIDATION_STATUS_INVALID = 2;
  }
}

enum AllowListError {
  option (errors.default_code) = 500;
  ALLOW_LIST_ERROR_UNSPECIFIED = 0;
  ALLOW_LIST_ERROR_NOT_IN_LIST = 1 [(errors.code) = 403];
}
