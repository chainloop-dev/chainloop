// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             (unknown)
// source: controlplane/v1/referrer.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationReferrerServiceDiscover = "/controlplane.v1.ReferrerService/Discover"

type ReferrerServiceHTTPServer interface {
	Discover(context.Context, *ReferrerServiceDiscoverRequest) (*ReferrerServiceDiscoverResponse, error)
}

func RegisterReferrerServiceHTTPServer(s *http.Server, srv ReferrerServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/discover/{digest}", _ReferrerService_Discover0_HTTP_Handler(srv))
}

func _ReferrerService_Discover0_HTTP_Handler(srv ReferrerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReferrerServiceDiscoverRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationReferrerServiceDiscover)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Discover(ctx, req.(*ReferrerServiceDiscoverRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReferrerServiceDiscoverResponse)
		return ctx.Result(200, reply)
	}
}

type ReferrerServiceHTTPClient interface {
	Discover(ctx context.Context, req *ReferrerServiceDiscoverRequest, opts ...http.CallOption) (rsp *ReferrerServiceDiscoverResponse, err error)
}

type ReferrerServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewReferrerServiceHTTPClient(client *http.Client) ReferrerServiceHTTPClient {
	return &ReferrerServiceHTTPClientImpl{client}
}

func (c *ReferrerServiceHTTPClientImpl) Discover(ctx context.Context, in *ReferrerServiceDiscoverRequest, opts ...http.CallOption) (*ReferrerServiceDiscoverResponse, error) {
	var out ReferrerServiceDiscoverResponse
	pattern := "/discover/{digest}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationReferrerServiceDiscover))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
