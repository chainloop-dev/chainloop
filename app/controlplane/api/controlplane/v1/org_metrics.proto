//
// Copyright 2024 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package controlplane.v1;

import "controlplane/v1/response_messages.proto";
import "buf/validate/validate.proto";
import "workflowcontract/v1/crafting_schema.proto";

option go_package = "github.com/chainloop-dev/chainloop/app/controlplane/api/controlplane/v1;v1";

service OrgMetricsService {
  rpc Totals(OrgMetricsServiceTotalsRequest) returns (OrgMetricsServiceTotalsResponse);
  rpc TopWorkflowsByRunsCount(TopWorkflowsByRunsCountRequest) returns (TopWorkflowsByRunsCountResponse);
  rpc DailyRunsCount(DailyRunsCountRequest) returns (DailyRunsCountResponse);
}

// Get the dayly count of runs by status
message DailyRunsCountRequest {
  optional string workflow_id = 1 [(buf.validate.field).string.uuid = true];

  MetricsTimeWindow time_window = 2 [(buf.validate.field).enum = {
    not_in: [0]
  }];
}

message DailyRunsCountResponse {
  repeated TotalByDay result = 1;

  message TotalByDay {
    // string format: "YYYY-MM-DD"
    string date = 1;
    MetricsStatusCount metrics = 2;
  }
}

message OrgMetricsServiceTotalsRequest {
  MetricsTimeWindow time_window = 1 [(buf.validate.field).enum = {
    not_in: [0]
  }];
}

message OrgMetricsServiceTotalsResponse {
  Result result = 1;

  message Result {
    int32 runs_total = 1;
    repeated MetricsStatusCount runs_total_by_status = 2;
    repeated MetricsRunnerCount runs_total_by_runner_type = 3;
  }
}

message MetricsStatusCount {
  int32 count = 1;
  RunStatus status = 2;
}

message MetricsRunnerCount {
  int32 count = 1;
  workflowcontract.v1.CraftingSchema.Runner.RunnerType runner_type = 2;
}

message TopWorkflowsByRunsCountRequest {
  // top x number of runs to return
  int32 num_workflows = 1 [(buf.validate.field).int32 = {
    gte: 1,
    lte: 20
  }];
  MetricsTimeWindow time_window = 2 [(buf.validate.field).enum = {
    not_in: [0]
  }];
}

message TopWorkflowsByRunsCountResponse {
  repeated TotalByStatus result = 1;

  message TotalByStatus {
    WorkflowItem workflow = 1;
    repeated MetricsStatusCount runs_total_by_status = 2;
  }
}

enum MetricsTimeWindow {
  METRICS_TIME_WINDOW_UNSPECIFIED = 0;
  METRICS_TIME_WINDOW_LAST_DAY = 1;
  METRICS_TIME_WINDOW_LAST_7_DAYS = 2;
  METRICS_TIME_WINDOW_LAST_30_DAYS = 3;
  METRICS_TIME_WINDOW_LAST_90_DAYS = 4;
}
