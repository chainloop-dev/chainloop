// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: controlplane/v1/api_token.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _api_token_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on APITokenServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APITokenServiceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITokenServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APITokenServiceCreateRequestMultiError, or nil if none found.
func (m *APITokenServiceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APITokenServiceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := APITokenServiceCreateRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.ExpiresIn != nil {

		if all {
			switch v := interface{}(m.GetExpiresIn()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APITokenServiceCreateRequestValidationError{
						field:  "ExpiresIn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APITokenServiceCreateRequestValidationError{
						field:  "ExpiresIn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpiresIn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APITokenServiceCreateRequestValidationError{
					field:  "ExpiresIn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return APITokenServiceCreateRequestMultiError(errors)
	}

	return nil
}

// APITokenServiceCreateRequestMultiError is an error wrapping multiple
// validation errors returned by APITokenServiceCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type APITokenServiceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITokenServiceCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITokenServiceCreateRequestMultiError) AllErrors() []error { return m }

// APITokenServiceCreateRequestValidationError is the validation error returned
// by APITokenServiceCreateRequest.Validate if the designated constraints
// aren't met.
type APITokenServiceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITokenServiceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITokenServiceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITokenServiceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITokenServiceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITokenServiceCreateRequestValidationError) ErrorName() string {
	return "APITokenServiceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e APITokenServiceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITokenServiceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITokenServiceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITokenServiceCreateRequestValidationError{}

// Validate checks the field values on APITokenServiceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APITokenServiceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITokenServiceCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// APITokenServiceCreateResponseMultiError, or nil if none found.
func (m *APITokenServiceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *APITokenServiceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, APITokenServiceCreateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, APITokenServiceCreateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return APITokenServiceCreateResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return APITokenServiceCreateResponseMultiError(errors)
	}

	return nil
}

// APITokenServiceCreateResponseMultiError is an error wrapping multiple
// validation errors returned by APITokenServiceCreateResponse.ValidateAll()
// if the designated constraints aren't met.
type APITokenServiceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITokenServiceCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITokenServiceCreateResponseMultiError) AllErrors() []error { return m }

// APITokenServiceCreateResponseValidationError is the validation error
// returned by APITokenServiceCreateResponse.Validate if the designated
// constraints aren't met.
type APITokenServiceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITokenServiceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITokenServiceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITokenServiceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITokenServiceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITokenServiceCreateResponseValidationError) ErrorName() string {
	return "APITokenServiceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e APITokenServiceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITokenServiceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITokenServiceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITokenServiceCreateResponseValidationError{}

// Validate checks the field values on APITokenServiceRevokeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APITokenServiceRevokeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITokenServiceRevokeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APITokenServiceRevokeRequestMultiError, or nil if none found.
func (m *APITokenServiceRevokeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APITokenServiceRevokeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = APITokenServiceRevokeRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return APITokenServiceRevokeRequestMultiError(errors)
	}

	return nil
}

func (m *APITokenServiceRevokeRequest) _validateUuid(uuid string) error {
	if matched := _api_token_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// APITokenServiceRevokeRequestMultiError is an error wrapping multiple
// validation errors returned by APITokenServiceRevokeRequest.ValidateAll() if
// the designated constraints aren't met.
type APITokenServiceRevokeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITokenServiceRevokeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITokenServiceRevokeRequestMultiError) AllErrors() []error { return m }

// APITokenServiceRevokeRequestValidationError is the validation error returned
// by APITokenServiceRevokeRequest.Validate if the designated constraints
// aren't met.
type APITokenServiceRevokeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITokenServiceRevokeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITokenServiceRevokeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITokenServiceRevokeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITokenServiceRevokeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITokenServiceRevokeRequestValidationError) ErrorName() string {
	return "APITokenServiceRevokeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e APITokenServiceRevokeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITokenServiceRevokeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITokenServiceRevokeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITokenServiceRevokeRequestValidationError{}

// Validate checks the field values on APITokenServiceRevokeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APITokenServiceRevokeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITokenServiceRevokeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// APITokenServiceRevokeResponseMultiError, or nil if none found.
func (m *APITokenServiceRevokeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *APITokenServiceRevokeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return APITokenServiceRevokeResponseMultiError(errors)
	}

	return nil
}

// APITokenServiceRevokeResponseMultiError is an error wrapping multiple
// validation errors returned by APITokenServiceRevokeResponse.ValidateAll()
// if the designated constraints aren't met.
type APITokenServiceRevokeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITokenServiceRevokeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITokenServiceRevokeResponseMultiError) AllErrors() []error { return m }

// APITokenServiceRevokeResponseValidationError is the validation error
// returned by APITokenServiceRevokeResponse.Validate if the designated
// constraints aren't met.
type APITokenServiceRevokeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITokenServiceRevokeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITokenServiceRevokeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITokenServiceRevokeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITokenServiceRevokeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITokenServiceRevokeResponseValidationError) ErrorName() string {
	return "APITokenServiceRevokeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e APITokenServiceRevokeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITokenServiceRevokeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITokenServiceRevokeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITokenServiceRevokeResponseValidationError{}

// Validate checks the field values on APITokenServiceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APITokenServiceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITokenServiceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APITokenServiceListRequestMultiError, or nil if none found.
func (m *APITokenServiceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *APITokenServiceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IncludeRevoked

	if len(errors) > 0 {
		return APITokenServiceListRequestMultiError(errors)
	}

	return nil
}

// APITokenServiceListRequestMultiError is an error wrapping multiple
// validation errors returned by APITokenServiceListRequest.ValidateAll() if
// the designated constraints aren't met.
type APITokenServiceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITokenServiceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITokenServiceListRequestMultiError) AllErrors() []error { return m }

// APITokenServiceListRequestValidationError is the validation error returned
// by APITokenServiceListRequest.Validate if the designated constraints aren't met.
type APITokenServiceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITokenServiceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITokenServiceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITokenServiceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITokenServiceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITokenServiceListRequestValidationError) ErrorName() string {
	return "APITokenServiceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e APITokenServiceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITokenServiceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITokenServiceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITokenServiceListRequestValidationError{}

// Validate checks the field values on APITokenServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *APITokenServiceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITokenServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// APITokenServiceListResponseMultiError, or nil if none found.
func (m *APITokenServiceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *APITokenServiceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, APITokenServiceListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, APITokenServiceListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return APITokenServiceListResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return APITokenServiceListResponseMultiError(errors)
	}

	return nil
}

// APITokenServiceListResponseMultiError is an error wrapping multiple
// validation errors returned by APITokenServiceListResponse.ValidateAll() if
// the designated constraints aren't met.
type APITokenServiceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITokenServiceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITokenServiceListResponseMultiError) AllErrors() []error { return m }

// APITokenServiceListResponseValidationError is the validation error returned
// by APITokenServiceListResponse.Validate if the designated constraints
// aren't met.
type APITokenServiceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITokenServiceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITokenServiceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITokenServiceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITokenServiceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITokenServiceListResponseValidationError) ErrorName() string {
	return "APITokenServiceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e APITokenServiceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITokenServiceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITokenServiceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITokenServiceListResponseValidationError{}

// Validate checks the field values on APITokenItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *APITokenItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on APITokenItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in APITokenItemMultiError, or
// nil if none found.
func (m *APITokenItem) ValidateAll() error {
	return m.validate(true)
}

func (m *APITokenItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for OrganizationId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, APITokenItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, APITokenItemValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return APITokenItemValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRevokedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, APITokenItemValidationError{
					field:  "RevokedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, APITokenItemValidationError{
					field:  "RevokedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRevokedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return APITokenItemValidationError{
				field:  "RevokedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiresAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, APITokenItemValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, APITokenItemValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return APITokenItemValidationError{
				field:  "ExpiresAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return APITokenItemMultiError(errors)
	}

	return nil
}

// APITokenItemMultiError is an error wrapping multiple validation errors
// returned by APITokenItem.ValidateAll() if the designated constraints aren't met.
type APITokenItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITokenItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITokenItemMultiError) AllErrors() []error { return m }

// APITokenItemValidationError is the validation error returned by
// APITokenItem.Validate if the designated constraints aren't met.
type APITokenItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITokenItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITokenItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITokenItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITokenItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITokenItemValidationError) ErrorName() string { return "APITokenItemValidationError" }

// Error satisfies the builtin error interface
func (e APITokenItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITokenItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITokenItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITokenItemValidationError{}

// Validate checks the field values on
// APITokenServiceCreateResponse_APITokenFull with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *APITokenServiceCreateResponse_APITokenFull) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// APITokenServiceCreateResponse_APITokenFull with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// APITokenServiceCreateResponse_APITokenFullMultiError, or nil if none found.
func (m *APITokenServiceCreateResponse_APITokenFull) ValidateAll() error {
	return m.validate(true)
}

func (m *APITokenServiceCreateResponse_APITokenFull) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, APITokenServiceCreateResponse_APITokenFullValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, APITokenServiceCreateResponse_APITokenFullValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return APITokenServiceCreateResponse_APITokenFullValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Jwt

	if len(errors) > 0 {
		return APITokenServiceCreateResponse_APITokenFullMultiError(errors)
	}

	return nil
}

// APITokenServiceCreateResponse_APITokenFullMultiError is an error wrapping
// multiple validation errors returned by
// APITokenServiceCreateResponse_APITokenFull.ValidateAll() if the designated
// constraints aren't met.
type APITokenServiceCreateResponse_APITokenFullMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m APITokenServiceCreateResponse_APITokenFullMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m APITokenServiceCreateResponse_APITokenFullMultiError) AllErrors() []error { return m }

// APITokenServiceCreateResponse_APITokenFullValidationError is the validation
// error returned by APITokenServiceCreateResponse_APITokenFull.Validate if
// the designated constraints aren't met.
type APITokenServiceCreateResponse_APITokenFullValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e APITokenServiceCreateResponse_APITokenFullValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e APITokenServiceCreateResponse_APITokenFullValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e APITokenServiceCreateResponse_APITokenFullValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e APITokenServiceCreateResponse_APITokenFullValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e APITokenServiceCreateResponse_APITokenFullValidationError) ErrorName() string {
	return "APITokenServiceCreateResponse_APITokenFullValidationError"
}

// Error satisfies the builtin error interface
func (e APITokenServiceCreateResponse_APITokenFullValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAPITokenServiceCreateResponse_APITokenFull.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = APITokenServiceCreateResponse_APITokenFullValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = APITokenServiceCreateResponse_APITokenFullValidationError{}
