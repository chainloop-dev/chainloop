//
// Copyright 2024 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package controlplane.v1;

import "buf/validate/validate.proto";
import "controlplane/v1/response_messages.proto";
import "workflowcontract/v1/crafting_schema.proto";

option go_package = "github.com/chainloop-dev/chainloop/app/controlplane/api/controlplane/v1;v1";

service WorkflowContractService {
  rpc List(WorkflowContractServiceListRequest) returns (WorkflowContractServiceListResponse);
  rpc Create(WorkflowContractServiceCreateRequest) returns (WorkflowContractServiceCreateResponse);
  rpc Update(WorkflowContractServiceUpdateRequest) returns (WorkflowContractServiceUpdateResponse);
  rpc Describe(WorkflowContractServiceDescribeRequest) returns (WorkflowContractServiceDescribeResponse);
  rpc Delete(WorkflowContractServiceDeleteRequest) returns (WorkflowContractServiceDeleteResponse);
}

message WorkflowContractServiceListRequest {}

message WorkflowContractServiceListResponse {
  repeated WorkflowContractItem result = 1;
}

message WorkflowContractServiceCreateRequest {
  string name = 1 [(buf.validate.field).string = {min_len: 1}];
  // Ready to support multiple schema versions
  oneof contract {
    workflowcontract.v1.CraftingSchema v1 = 2;
  }

  optional string description = 3;
}

message WorkflowContractServiceCreateResponse {
  WorkflowContractItem result = 1;
}

message WorkflowContractServiceUpdateRequest {
  // TODO: remove once the id is fully removed
  // Checks that either name or id is provided
  // NOTE: we did not use oneof in this case because we don't want to break compatibility with other clients
  // and we'll drop the id field in the future
  option (buf.validate.message).cel = {
    id: "either-name-or-id-required",
    message: "either name or id are required",
    expression: "has(this.id) || has(this.name)"
  };

  // Maintained for backward compatibility until we mover all identifiers to name
  // Moving forward, the contract name will be used as the identifier
  string id = 1 [
    deprecated = true,
    (buf.validate.field) = {
      string: {uuid: true},
      ignore_empty: true,
    }
  ];

  // Name is the identifier of the contract
  string name = 2 [(buf.validate.field) = {
    ignore_empty: true,
    // NOTE: validations can not be shared yet https://github.com/bufbuild/protovalidate/issues/51
    cel: {
      message: "name must be a valid DNS-1123 subdomain",
      expression: "this.matches('^[a-z0-9]([-a-z0-9]*[a-z0-9])?$')",
      id: "name.dns-1123",
    },
  }];

  oneof contract {
    workflowcontract.v1.CraftingSchema v1 = 3;
  }

  optional string description = 4;
}

message WorkflowContractServiceUpdateResponse {
  Result result = 1;
  message Result {
    WorkflowContractItem contract = 1;
    WorkflowContractVersionItem revision = 2;
  }
}

message WorkflowContractServiceDescribeRequest {
  string id = 1 [(buf.validate.field).string.uuid = true];
  int32 revision = 2;
}

message WorkflowContractServiceDescribeResponse {
  Result result = 1;
  message Result {
    WorkflowContractItem contract = 1;
    WorkflowContractVersionItem revision = 2;
  }
}

message WorkflowContractServiceDeleteRequest {
  string id = 1 [(buf.validate.field).string.uuid = true];
}

message WorkflowContractServiceDeleteResponse {}
