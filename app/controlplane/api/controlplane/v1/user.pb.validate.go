// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: controlplane/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _user_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UserServiceListMembershipsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UserServiceListMembershipsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserServiceListMembershipsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UserServiceListMembershipsRequestMultiError, or nil if none found.
func (m *UserServiceListMembershipsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserServiceListMembershipsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserServiceListMembershipsRequestMultiError(errors)
	}

	return nil
}

// UserServiceListMembershipsRequestMultiError is an error wrapping multiple
// validation errors returned by
// UserServiceListMembershipsRequest.ValidateAll() if the designated
// constraints aren't met.
type UserServiceListMembershipsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserServiceListMembershipsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserServiceListMembershipsRequestMultiError) AllErrors() []error { return m }

// UserServiceListMembershipsRequestValidationError is the validation error
// returned by UserServiceListMembershipsRequest.Validate if the designated
// constraints aren't met.
type UserServiceListMembershipsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserServiceListMembershipsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserServiceListMembershipsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserServiceListMembershipsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserServiceListMembershipsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserServiceListMembershipsRequestValidationError) ErrorName() string {
	return "UserServiceListMembershipsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserServiceListMembershipsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserServiceListMembershipsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserServiceListMembershipsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserServiceListMembershipsRequestValidationError{}

// Validate checks the field values on UserServiceListMembershipsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UserServiceListMembershipsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserServiceListMembershipsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UserServiceListMembershipsResponseMultiError, or nil if none found.
func (m *UserServiceListMembershipsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserServiceListMembershipsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserServiceListMembershipsResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserServiceListMembershipsResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserServiceListMembershipsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserServiceListMembershipsResponseMultiError(errors)
	}

	return nil
}

// UserServiceListMembershipsResponseMultiError is an error wrapping multiple
// validation errors returned by
// UserServiceListMembershipsResponse.ValidateAll() if the designated
// constraints aren't met.
type UserServiceListMembershipsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserServiceListMembershipsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserServiceListMembershipsResponseMultiError) AllErrors() []error { return m }

// UserServiceListMembershipsResponseValidationError is the validation error
// returned by UserServiceListMembershipsResponse.Validate if the designated
// constraints aren't met.
type UserServiceListMembershipsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserServiceListMembershipsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserServiceListMembershipsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserServiceListMembershipsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserServiceListMembershipsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserServiceListMembershipsResponseValidationError) ErrorName() string {
	return "UserServiceListMembershipsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserServiceListMembershipsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserServiceListMembershipsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserServiceListMembershipsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserServiceListMembershipsResponseValidationError{}

// Validate checks the field values on SetCurrentMembershipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetCurrentMembershipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetCurrentMembershipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetCurrentMembershipRequestMultiError, or nil if none found.
func (m *SetCurrentMembershipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetCurrentMembershipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetMembershipId()); err != nil {
		err = SetCurrentMembershipRequestValidationError{
			field:  "MembershipId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetCurrentMembershipRequestMultiError(errors)
	}

	return nil
}

func (m *SetCurrentMembershipRequest) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SetCurrentMembershipRequestMultiError is an error wrapping multiple
// validation errors returned by SetCurrentMembershipRequest.ValidateAll() if
// the designated constraints aren't met.
type SetCurrentMembershipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetCurrentMembershipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetCurrentMembershipRequestMultiError) AllErrors() []error { return m }

// SetCurrentMembershipRequestValidationError is the validation error returned
// by SetCurrentMembershipRequest.Validate if the designated constraints
// aren't met.
type SetCurrentMembershipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCurrentMembershipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCurrentMembershipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCurrentMembershipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCurrentMembershipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCurrentMembershipRequestValidationError) ErrorName() string {
	return "SetCurrentMembershipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetCurrentMembershipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCurrentMembershipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCurrentMembershipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCurrentMembershipRequestValidationError{}

// Validate checks the field values on SetCurrentMembershipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetCurrentMembershipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetCurrentMembershipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetCurrentMembershipResponseMultiError, or nil if none found.
func (m *SetCurrentMembershipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetCurrentMembershipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetCurrentMembershipResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetCurrentMembershipResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCurrentMembershipResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetCurrentMembershipResponseMultiError(errors)
	}

	return nil
}

// SetCurrentMembershipResponseMultiError is an error wrapping multiple
// validation errors returned by SetCurrentMembershipResponse.ValidateAll() if
// the designated constraints aren't met.
type SetCurrentMembershipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetCurrentMembershipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetCurrentMembershipResponseMultiError) AllErrors() []error { return m }

// SetCurrentMembershipResponseValidationError is the validation error returned
// by SetCurrentMembershipResponse.Validate if the designated constraints
// aren't met.
type SetCurrentMembershipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCurrentMembershipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCurrentMembershipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCurrentMembershipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCurrentMembershipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCurrentMembershipResponseValidationError) ErrorName() string {
	return "SetCurrentMembershipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetCurrentMembershipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCurrentMembershipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCurrentMembershipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCurrentMembershipResponseValidationError{}

// Validate checks the field values on DeleteMembershipRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMembershipRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMembershipRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMembershipRequestMultiError, or nil if none found.
func (m *DeleteMembershipRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMembershipRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetMembershipId()); err != nil {
		err = DeleteMembershipRequestValidationError{
			field:  "MembershipId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteMembershipRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteMembershipRequest) _validateUuid(uuid string) error {
	if matched := _user_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteMembershipRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMembershipRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMembershipRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMembershipRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMembershipRequestMultiError) AllErrors() []error { return m }

// DeleteMembershipRequestValidationError is the validation error returned by
// DeleteMembershipRequest.Validate if the designated constraints aren't met.
type DeleteMembershipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMembershipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMembershipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMembershipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMembershipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMembershipRequestValidationError) ErrorName() string {
	return "DeleteMembershipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMembershipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMembershipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMembershipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMembershipRequestValidationError{}

// Validate checks the field values on DeleteMembershipResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMembershipResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMembershipResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMembershipResponseMultiError, or nil if none found.
func (m *DeleteMembershipResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMembershipResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMembershipResponseMultiError(errors)
	}

	return nil
}

// DeleteMembershipResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMembershipResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMembershipResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMembershipResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMembershipResponseMultiError) AllErrors() []error { return m }

// DeleteMembershipResponseValidationError is the validation error returned by
// DeleteMembershipResponse.Validate if the designated constraints aren't met.
type DeleteMembershipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMembershipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMembershipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMembershipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMembershipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMembershipResponseValidationError) ErrorName() string {
	return "DeleteMembershipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMembershipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMembershipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMembershipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMembershipResponseValidationError{}
