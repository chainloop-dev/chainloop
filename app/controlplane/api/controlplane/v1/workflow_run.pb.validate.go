// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: controlplane/v1/workflow_run.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1 "github.com/chainloop-dev/chainloop/app/controlplane/api/workflowcontract/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1.CraftingSchema_Runner_RunnerType(0)
)

// define the regex for a UUID once up-front
var _workflow_run_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AttestationServiceGetContractRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AttestationServiceGetContractRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttestationServiceGetContractRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AttestationServiceGetContractRequestMultiError, or nil if none found.
func (m *AttestationServiceGetContractRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationServiceGetContractRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContractRevision

	if len(errors) > 0 {
		return AttestationServiceGetContractRequestMultiError(errors)
	}

	return nil
}

// AttestationServiceGetContractRequestMultiError is an error wrapping multiple
// validation errors returned by
// AttestationServiceGetContractRequest.ValidateAll() if the designated
// constraints aren't met.
type AttestationServiceGetContractRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationServiceGetContractRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationServiceGetContractRequestMultiError) AllErrors() []error { return m }

// AttestationServiceGetContractRequestValidationError is the validation error
// returned by AttestationServiceGetContractRequest.Validate if the designated
// constraints aren't met.
type AttestationServiceGetContractRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationServiceGetContractRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationServiceGetContractRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationServiceGetContractRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationServiceGetContractRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationServiceGetContractRequestValidationError) ErrorName() string {
	return "AttestationServiceGetContractRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AttestationServiceGetContractRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationServiceGetContractRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationServiceGetContractRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationServiceGetContractRequestValidationError{}

// Validate checks the field values on AttestationServiceGetContractResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AttestationServiceGetContractResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttestationServiceGetContractResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AttestationServiceGetContractResponseMultiError, or nil if none found.
func (m *AttestationServiceGetContractResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationServiceGetContractResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttestationServiceGetContractResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttestationServiceGetContractResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttestationServiceGetContractResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttestationServiceGetContractResponseMultiError(errors)
	}

	return nil
}

// AttestationServiceGetContractResponseMultiError is an error wrapping
// multiple validation errors returned by
// AttestationServiceGetContractResponse.ValidateAll() if the designated
// constraints aren't met.
type AttestationServiceGetContractResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationServiceGetContractResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationServiceGetContractResponseMultiError) AllErrors() []error { return m }

// AttestationServiceGetContractResponseValidationError is the validation error
// returned by AttestationServiceGetContractResponse.Validate if the
// designated constraints aren't met.
type AttestationServiceGetContractResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationServiceGetContractResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationServiceGetContractResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationServiceGetContractResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationServiceGetContractResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationServiceGetContractResponseValidationError) ErrorName() string {
	return "AttestationServiceGetContractResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AttestationServiceGetContractResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationServiceGetContractResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationServiceGetContractResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationServiceGetContractResponseValidationError{}

// Validate checks the field values on AttestationServiceInitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttestationServiceInitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttestationServiceInitRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AttestationServiceInitRequestMultiError, or nil if none found.
func (m *AttestationServiceInitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationServiceInitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ContractRevision

	// no validation rules for JobUrl

	// no validation rules for Runner

	if len(errors) > 0 {
		return AttestationServiceInitRequestMultiError(errors)
	}

	return nil
}

// AttestationServiceInitRequestMultiError is an error wrapping multiple
// validation errors returned by AttestationServiceInitRequest.ValidateAll()
// if the designated constraints aren't met.
type AttestationServiceInitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationServiceInitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationServiceInitRequestMultiError) AllErrors() []error { return m }

// AttestationServiceInitRequestValidationError is the validation error
// returned by AttestationServiceInitRequest.Validate if the designated
// constraints aren't met.
type AttestationServiceInitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationServiceInitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationServiceInitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationServiceInitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationServiceInitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationServiceInitRequestValidationError) ErrorName() string {
	return "AttestationServiceInitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AttestationServiceInitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationServiceInitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationServiceInitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationServiceInitRequestValidationError{}

// Validate checks the field values on AttestationServiceInitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttestationServiceInitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttestationServiceInitResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AttestationServiceInitResponseMultiError, or nil if none found.
func (m *AttestationServiceInitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationServiceInitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttestationServiceInitResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttestationServiceInitResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttestationServiceInitResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttestationServiceInitResponseMultiError(errors)
	}

	return nil
}

// AttestationServiceInitResponseMultiError is an error wrapping multiple
// validation errors returned by AttestationServiceInitResponse.ValidateAll()
// if the designated constraints aren't met.
type AttestationServiceInitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationServiceInitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationServiceInitResponseMultiError) AllErrors() []error { return m }

// AttestationServiceInitResponseValidationError is the validation error
// returned by AttestationServiceInitResponse.Validate if the designated
// constraints aren't met.
type AttestationServiceInitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationServiceInitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationServiceInitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationServiceInitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationServiceInitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationServiceInitResponseValidationError) ErrorName() string {
	return "AttestationServiceInitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AttestationServiceInitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationServiceInitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationServiceInitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationServiceInitResponseValidationError{}

// Validate checks the field values on AttestationServiceStoreRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttestationServiceStoreRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttestationServiceStoreRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AttestationServiceStoreRequestMultiError, or nil if none found.
func (m *AttestationServiceStoreRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationServiceStoreRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetAttestation()) < 1 {
		err := AttestationServiceStoreRequestValidationError{
			field:  "Attestation",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkflowRunId()) < 1 {
		err := AttestationServiceStoreRequestValidationError{
			field:  "WorkflowRunId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AttestationServiceStoreRequestMultiError(errors)
	}

	return nil
}

// AttestationServiceStoreRequestMultiError is an error wrapping multiple
// validation errors returned by AttestationServiceStoreRequest.ValidateAll()
// if the designated constraints aren't met.
type AttestationServiceStoreRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationServiceStoreRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationServiceStoreRequestMultiError) AllErrors() []error { return m }

// AttestationServiceStoreRequestValidationError is the validation error
// returned by AttestationServiceStoreRequest.Validate if the designated
// constraints aren't met.
type AttestationServiceStoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationServiceStoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationServiceStoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationServiceStoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationServiceStoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationServiceStoreRequestValidationError) ErrorName() string {
	return "AttestationServiceStoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AttestationServiceStoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationServiceStoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationServiceStoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationServiceStoreRequestValidationError{}

// Validate checks the field values on AttestationServiceStoreResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttestationServiceStoreResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttestationServiceStoreResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AttestationServiceStoreResponseMultiError, or nil if none found.
func (m *AttestationServiceStoreResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationServiceStoreResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttestationServiceStoreResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttestationServiceStoreResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttestationServiceStoreResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttestationServiceStoreResponseMultiError(errors)
	}

	return nil
}

// AttestationServiceStoreResponseMultiError is an error wrapping multiple
// validation errors returned by AttestationServiceStoreResponse.ValidateAll()
// if the designated constraints aren't met.
type AttestationServiceStoreResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationServiceStoreResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationServiceStoreResponseMultiError) AllErrors() []error { return m }

// AttestationServiceStoreResponseValidationError is the validation error
// returned by AttestationServiceStoreResponse.Validate if the designated
// constraints aren't met.
type AttestationServiceStoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationServiceStoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationServiceStoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationServiceStoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationServiceStoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationServiceStoreResponseValidationError) ErrorName() string {
	return "AttestationServiceStoreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AttestationServiceStoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationServiceStoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationServiceStoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationServiceStoreResponseValidationError{}

// Validate checks the field values on AttestationServiceCancelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttestationServiceCancelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttestationServiceCancelRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AttestationServiceCancelRequestMultiError, or nil if none found.
func (m *AttestationServiceCancelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationServiceCancelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetWorkflowRunId()) < 1 {
		err := AttestationServiceCancelRequestValidationError{
			field:  "WorkflowRunId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AttestationServiceCancelRequest_Trigger_NotInLookup[m.GetTrigger()]; ok {
		err := AttestationServiceCancelRequestValidationError{
			field:  "Trigger",
			reason: "value must not be in list [TRIGGER_TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Reason

	if len(errors) > 0 {
		return AttestationServiceCancelRequestMultiError(errors)
	}

	return nil
}

// AttestationServiceCancelRequestMultiError is an error wrapping multiple
// validation errors returned by AttestationServiceCancelRequest.ValidateAll()
// if the designated constraints aren't met.
type AttestationServiceCancelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationServiceCancelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationServiceCancelRequestMultiError) AllErrors() []error { return m }

// AttestationServiceCancelRequestValidationError is the validation error
// returned by AttestationServiceCancelRequest.Validate if the designated
// constraints aren't met.
type AttestationServiceCancelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationServiceCancelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationServiceCancelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationServiceCancelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationServiceCancelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationServiceCancelRequestValidationError) ErrorName() string {
	return "AttestationServiceCancelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AttestationServiceCancelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationServiceCancelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationServiceCancelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationServiceCancelRequestValidationError{}

var _AttestationServiceCancelRequest_Trigger_NotInLookup = map[AttestationServiceCancelRequest_TriggerType]struct{}{
	0: {},
}

// Validate checks the field values on AttestationServiceCancelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AttestationServiceCancelResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttestationServiceCancelResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AttestationServiceCancelResponseMultiError, or nil if none found.
func (m *AttestationServiceCancelResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationServiceCancelResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AttestationServiceCancelResponseMultiError(errors)
	}

	return nil
}

// AttestationServiceCancelResponseMultiError is an error wrapping multiple
// validation errors returned by
// AttestationServiceCancelResponse.ValidateAll() if the designated
// constraints aren't met.
type AttestationServiceCancelResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationServiceCancelResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationServiceCancelResponseMultiError) AllErrors() []error { return m }

// AttestationServiceCancelResponseValidationError is the validation error
// returned by AttestationServiceCancelResponse.Validate if the designated
// constraints aren't met.
type AttestationServiceCancelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationServiceCancelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationServiceCancelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationServiceCancelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationServiceCancelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationServiceCancelResponseValidationError) ErrorName() string {
	return "AttestationServiceCancelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AttestationServiceCancelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationServiceCancelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationServiceCancelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationServiceCancelResponseValidationError{}

// Validate checks the field values on WorkflowRunServiceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowRunServiceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowRunServiceListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WorkflowRunServiceListRequestMultiError, or nil if none found.
func (m *WorkflowRunServiceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowRunServiceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowId

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowRunServiceListRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowRunServiceListRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowRunServiceListRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowRunServiceListRequestMultiError(errors)
	}

	return nil
}

// WorkflowRunServiceListRequestMultiError is an error wrapping multiple
// validation errors returned by WorkflowRunServiceListRequest.ValidateAll()
// if the designated constraints aren't met.
type WorkflowRunServiceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowRunServiceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowRunServiceListRequestMultiError) AllErrors() []error { return m }

// WorkflowRunServiceListRequestValidationError is the validation error
// returned by WorkflowRunServiceListRequest.Validate if the designated
// constraints aren't met.
type WorkflowRunServiceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowRunServiceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowRunServiceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowRunServiceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowRunServiceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowRunServiceListRequestValidationError) ErrorName() string {
	return "WorkflowRunServiceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowRunServiceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowRunServiceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowRunServiceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowRunServiceListRequestValidationError{}

// Validate checks the field values on WorkflowRunServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowRunServiceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowRunServiceListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WorkflowRunServiceListResponseMultiError, or nil if none found.
func (m *WorkflowRunServiceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowRunServiceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkflowRunServiceListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkflowRunServiceListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkflowRunServiceListResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowRunServiceListResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowRunServiceListResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowRunServiceListResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowRunServiceListResponseMultiError(errors)
	}

	return nil
}

// WorkflowRunServiceListResponseMultiError is an error wrapping multiple
// validation errors returned by WorkflowRunServiceListResponse.ValidateAll()
// if the designated constraints aren't met.
type WorkflowRunServiceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowRunServiceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowRunServiceListResponseMultiError) AllErrors() []error { return m }

// WorkflowRunServiceListResponseValidationError is the validation error
// returned by WorkflowRunServiceListResponse.Validate if the designated
// constraints aren't met.
type WorkflowRunServiceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowRunServiceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowRunServiceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowRunServiceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowRunServiceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowRunServiceListResponseValidationError) ErrorName() string {
	return "WorkflowRunServiceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowRunServiceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowRunServiceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowRunServiceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowRunServiceListResponseValidationError{}

// Validate checks the field values on WorkflowRunServiceViewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowRunServiceViewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowRunServiceViewRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WorkflowRunServiceViewRequestMultiError, or nil if none found.
func (m *WorkflowRunServiceViewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowRunServiceViewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofRefPresent := false
	switch v := m.Ref.(type) {
	case *WorkflowRunServiceViewRequest_Id:
		if v == nil {
			err := WorkflowRunServiceViewRequestValidationError{
				field:  "Ref",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofRefPresent = true

		if err := m._validateUuid(m.GetId()); err != nil {
			err = WorkflowRunServiceViewRequestValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *WorkflowRunServiceViewRequest_Digest:
		if v == nil {
			err := WorkflowRunServiceViewRequestValidationError{
				field:  "Ref",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofRefPresent = true

		if utf8.RuneCountInString(m.GetDigest()) < 1 {
			err := WorkflowRunServiceViewRequestValidationError{
				field:  "Digest",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofRefPresent {
		err := WorkflowRunServiceViewRequestValidationError{
			field:  "Ref",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WorkflowRunServiceViewRequestMultiError(errors)
	}

	return nil
}

func (m *WorkflowRunServiceViewRequest) _validateUuid(uuid string) error {
	if matched := _workflow_run_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// WorkflowRunServiceViewRequestMultiError is an error wrapping multiple
// validation errors returned by WorkflowRunServiceViewRequest.ValidateAll()
// if the designated constraints aren't met.
type WorkflowRunServiceViewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowRunServiceViewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowRunServiceViewRequestMultiError) AllErrors() []error { return m }

// WorkflowRunServiceViewRequestValidationError is the validation error
// returned by WorkflowRunServiceViewRequest.Validate if the designated
// constraints aren't met.
type WorkflowRunServiceViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowRunServiceViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowRunServiceViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowRunServiceViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowRunServiceViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowRunServiceViewRequestValidationError) ErrorName() string {
	return "WorkflowRunServiceViewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowRunServiceViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowRunServiceViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowRunServiceViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowRunServiceViewRequestValidationError{}

// Validate checks the field values on WorkflowRunServiceViewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorkflowRunServiceViewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowRunServiceViewResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// WorkflowRunServiceViewResponseMultiError, or nil if none found.
func (m *WorkflowRunServiceViewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowRunServiceViewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowRunServiceViewResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowRunServiceViewResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowRunServiceViewResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowRunServiceViewResponseMultiError(errors)
	}

	return nil
}

// WorkflowRunServiceViewResponseMultiError is an error wrapping multiple
// validation errors returned by WorkflowRunServiceViewResponse.ValidateAll()
// if the designated constraints aren't met.
type WorkflowRunServiceViewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowRunServiceViewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowRunServiceViewResponseMultiError) AllErrors() []error { return m }

// WorkflowRunServiceViewResponseValidationError is the validation error
// returned by WorkflowRunServiceViewResponse.Validate if the designated
// constraints aren't met.
type WorkflowRunServiceViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowRunServiceViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowRunServiceViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowRunServiceViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowRunServiceViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowRunServiceViewResponseValidationError) ErrorName() string {
	return "WorkflowRunServiceViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowRunServiceViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowRunServiceViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowRunServiceViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowRunServiceViewResponseValidationError{}

// Validate checks the field values on AttestationServiceGetUploadCredsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AttestationServiceGetUploadCredsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AttestationServiceGetUploadCredsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AttestationServiceGetUploadCredsRequestMultiError, or nil if none found.
func (m *AttestationServiceGetUploadCredsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationServiceGetUploadCredsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WorkflowRunId

	if len(errors) > 0 {
		return AttestationServiceGetUploadCredsRequestMultiError(errors)
	}

	return nil
}

// AttestationServiceGetUploadCredsRequestMultiError is an error wrapping
// multiple validation errors returned by
// AttestationServiceGetUploadCredsRequest.ValidateAll() if the designated
// constraints aren't met.
type AttestationServiceGetUploadCredsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationServiceGetUploadCredsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationServiceGetUploadCredsRequestMultiError) AllErrors() []error { return m }

// AttestationServiceGetUploadCredsRequestValidationError is the validation
// error returned by AttestationServiceGetUploadCredsRequest.Validate if the
// designated constraints aren't met.
type AttestationServiceGetUploadCredsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationServiceGetUploadCredsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationServiceGetUploadCredsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationServiceGetUploadCredsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationServiceGetUploadCredsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationServiceGetUploadCredsRequestValidationError) ErrorName() string {
	return "AttestationServiceGetUploadCredsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AttestationServiceGetUploadCredsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationServiceGetUploadCredsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationServiceGetUploadCredsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationServiceGetUploadCredsRequestValidationError{}

// Validate checks the field values on AttestationServiceGetUploadCredsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AttestationServiceGetUploadCredsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AttestationServiceGetUploadCredsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AttestationServiceGetUploadCredsResponseMultiError, or nil if none found.
func (m *AttestationServiceGetUploadCredsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationServiceGetUploadCredsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttestationServiceGetUploadCredsResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttestationServiceGetUploadCredsResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttestationServiceGetUploadCredsResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttestationServiceGetUploadCredsResponseMultiError(errors)
	}

	return nil
}

// AttestationServiceGetUploadCredsResponseMultiError is an error wrapping
// multiple validation errors returned by
// AttestationServiceGetUploadCredsResponse.ValidateAll() if the designated
// constraints aren't met.
type AttestationServiceGetUploadCredsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationServiceGetUploadCredsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationServiceGetUploadCredsResponseMultiError) AllErrors() []error { return m }

// AttestationServiceGetUploadCredsResponseValidationError is the validation
// error returned by AttestationServiceGetUploadCredsResponse.Validate if the
// designated constraints aren't met.
type AttestationServiceGetUploadCredsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationServiceGetUploadCredsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationServiceGetUploadCredsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationServiceGetUploadCredsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationServiceGetUploadCredsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationServiceGetUploadCredsResponseValidationError) ErrorName() string {
	return "AttestationServiceGetUploadCredsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AttestationServiceGetUploadCredsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationServiceGetUploadCredsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationServiceGetUploadCredsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationServiceGetUploadCredsResponseValidationError{}

// Validate checks the field values on
// AttestationServiceGetContractResponse_Result with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AttestationServiceGetContractResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AttestationServiceGetContractResponse_Result with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// AttestationServiceGetContractResponse_ResultMultiError, or nil if none found.
func (m *AttestationServiceGetContractResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationServiceGetContractResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttestationServiceGetContractResponse_ResultValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttestationServiceGetContractResponse_ResultValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttestationServiceGetContractResponse_ResultValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContract()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttestationServiceGetContractResponse_ResultValidationError{
					field:  "Contract",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttestationServiceGetContractResponse_ResultValidationError{
					field:  "Contract",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContract()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttestationServiceGetContractResponse_ResultValidationError{
				field:  "Contract",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttestationServiceGetContractResponse_ResultMultiError(errors)
	}

	return nil
}

// AttestationServiceGetContractResponse_ResultMultiError is an error wrapping
// multiple validation errors returned by
// AttestationServiceGetContractResponse_Result.ValidateAll() if the
// designated constraints aren't met.
type AttestationServiceGetContractResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationServiceGetContractResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationServiceGetContractResponse_ResultMultiError) AllErrors() []error { return m }

// AttestationServiceGetContractResponse_ResultValidationError is the
// validation error returned by
// AttestationServiceGetContractResponse_Result.Validate if the designated
// constraints aren't met.
type AttestationServiceGetContractResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationServiceGetContractResponse_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationServiceGetContractResponse_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationServiceGetContractResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationServiceGetContractResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationServiceGetContractResponse_ResultValidationError) ErrorName() string {
	return "AttestationServiceGetContractResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e AttestationServiceGetContractResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationServiceGetContractResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationServiceGetContractResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationServiceGetContractResponse_ResultValidationError{}

// Validate checks the field values on AttestationServiceInitResponse_Result
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AttestationServiceInitResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttestationServiceInitResponse_Result
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AttestationServiceInitResponse_ResultMultiError, or nil if none found.
func (m *AttestationServiceInitResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationServiceInitResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflowRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttestationServiceInitResponse_ResultValidationError{
					field:  "WorkflowRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttestationServiceInitResponse_ResultValidationError{
					field:  "WorkflowRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttestationServiceInitResponse_ResultValidationError{
				field:  "WorkflowRun",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttestationServiceInitResponse_ResultMultiError(errors)
	}

	return nil
}

// AttestationServiceInitResponse_ResultMultiError is an error wrapping
// multiple validation errors returned by
// AttestationServiceInitResponse_Result.ValidateAll() if the designated
// constraints aren't met.
type AttestationServiceInitResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationServiceInitResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationServiceInitResponse_ResultMultiError) AllErrors() []error { return m }

// AttestationServiceInitResponse_ResultValidationError is the validation error
// returned by AttestationServiceInitResponse_Result.Validate if the
// designated constraints aren't met.
type AttestationServiceInitResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationServiceInitResponse_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationServiceInitResponse_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationServiceInitResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationServiceInitResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationServiceInitResponse_ResultValidationError) ErrorName() string {
	return "AttestationServiceInitResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e AttestationServiceInitResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationServiceInitResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationServiceInitResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationServiceInitResponse_ResultValidationError{}

// Validate checks the field values on AttestationServiceStoreResponse_Result
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AttestationServiceStoreResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AttestationServiceStoreResponse_Result with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AttestationServiceStoreResponse_ResultMultiError, or nil if none found.
func (m *AttestationServiceStoreResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationServiceStoreResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Digest

	if len(errors) > 0 {
		return AttestationServiceStoreResponse_ResultMultiError(errors)
	}

	return nil
}

// AttestationServiceStoreResponse_ResultMultiError is an error wrapping
// multiple validation errors returned by
// AttestationServiceStoreResponse_Result.ValidateAll() if the designated
// constraints aren't met.
type AttestationServiceStoreResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationServiceStoreResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationServiceStoreResponse_ResultMultiError) AllErrors() []error { return m }

// AttestationServiceStoreResponse_ResultValidationError is the validation
// error returned by AttestationServiceStoreResponse_Result.Validate if the
// designated constraints aren't met.
type AttestationServiceStoreResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationServiceStoreResponse_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttestationServiceStoreResponse_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttestationServiceStoreResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationServiceStoreResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationServiceStoreResponse_ResultValidationError) ErrorName() string {
	return "AttestationServiceStoreResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e AttestationServiceStoreResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationServiceStoreResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationServiceStoreResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationServiceStoreResponse_ResultValidationError{}

// Validate checks the field values on WorkflowRunServiceViewResponse_Result
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *WorkflowRunServiceViewResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkflowRunServiceViewResponse_Result
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// WorkflowRunServiceViewResponse_ResultMultiError, or nil if none found.
func (m *WorkflowRunServiceViewResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkflowRunServiceViewResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflowRun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowRunServiceViewResponse_ResultValidationError{
					field:  "WorkflowRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowRunServiceViewResponse_ResultValidationError{
					field:  "WorkflowRun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflowRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowRunServiceViewResponse_ResultValidationError{
				field:  "WorkflowRun",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAttestation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkflowRunServiceViewResponse_ResultValidationError{
					field:  "Attestation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkflowRunServiceViewResponse_ResultValidationError{
					field:  "Attestation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttestation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkflowRunServiceViewResponse_ResultValidationError{
				field:  "Attestation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkflowRunServiceViewResponse_ResultMultiError(errors)
	}

	return nil
}

// WorkflowRunServiceViewResponse_ResultMultiError is an error wrapping
// multiple validation errors returned by
// WorkflowRunServiceViewResponse_Result.ValidateAll() if the designated
// constraints aren't met.
type WorkflowRunServiceViewResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkflowRunServiceViewResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkflowRunServiceViewResponse_ResultMultiError) AllErrors() []error { return m }

// WorkflowRunServiceViewResponse_ResultValidationError is the validation error
// returned by WorkflowRunServiceViewResponse_Result.Validate if the
// designated constraints aren't met.
type WorkflowRunServiceViewResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkflowRunServiceViewResponse_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkflowRunServiceViewResponse_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkflowRunServiceViewResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkflowRunServiceViewResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkflowRunServiceViewResponse_ResultValidationError) ErrorName() string {
	return "WorkflowRunServiceViewResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e WorkflowRunServiceViewResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkflowRunServiceViewResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkflowRunServiceViewResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkflowRunServiceViewResponse_ResultValidationError{}

// Validate checks the field values on
// AttestationServiceGetUploadCredsResponse_Result with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AttestationServiceGetUploadCredsResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AttestationServiceGetUploadCredsResponse_Result with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// AttestationServiceGetUploadCredsResponse_ResultMultiError, or nil if none found.
func (m *AttestationServiceGetUploadCredsResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *AttestationServiceGetUploadCredsResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetBackend()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttestationServiceGetUploadCredsResponse_ResultValidationError{
					field:  "Backend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttestationServiceGetUploadCredsResponse_ResultValidationError{
					field:  "Backend",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBackend()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttestationServiceGetUploadCredsResponse_ResultValidationError{
				field:  "Backend",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttestationServiceGetUploadCredsResponse_ResultMultiError(errors)
	}

	return nil
}

// AttestationServiceGetUploadCredsResponse_ResultMultiError is an error
// wrapping multiple validation errors returned by
// AttestationServiceGetUploadCredsResponse_Result.ValidateAll() if the
// designated constraints aren't met.
type AttestationServiceGetUploadCredsResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttestationServiceGetUploadCredsResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttestationServiceGetUploadCredsResponse_ResultMultiError) AllErrors() []error { return m }

// AttestationServiceGetUploadCredsResponse_ResultValidationError is the
// validation error returned by
// AttestationServiceGetUploadCredsResponse_Result.Validate if the designated
// constraints aren't met.
type AttestationServiceGetUploadCredsResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttestationServiceGetUploadCredsResponse_ResultValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e AttestationServiceGetUploadCredsResponse_ResultValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e AttestationServiceGetUploadCredsResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttestationServiceGetUploadCredsResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttestationServiceGetUploadCredsResponse_ResultValidationError) ErrorName() string {
	return "AttestationServiceGetUploadCredsResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e AttestationServiceGetUploadCredsResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttestationServiceGetUploadCredsResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttestationServiceGetUploadCredsResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttestationServiceGetUploadCredsResponse_ResultValidationError{}
