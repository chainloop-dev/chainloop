// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: controlplane/v1/org_metrics.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OrgMetricsServiceTotalsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgMetricsServiceTotalsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgMetricsServiceTotalsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OrgMetricsServiceTotalsRequestMultiError, or nil if none found.
func (m *OrgMetricsServiceTotalsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgMetricsServiceTotalsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _OrgMetricsServiceTotalsRequest_TimeWindow_NotInLookup[m.GetTimeWindow()]; ok {
		err := OrgMetricsServiceTotalsRequestValidationError{
			field:  "TimeWindow",
			reason: "value must not be in list [METRICS_TIME_WINDOW_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrgMetricsServiceTotalsRequestMultiError(errors)
	}

	return nil
}

// OrgMetricsServiceTotalsRequestMultiError is an error wrapping multiple
// validation errors returned by OrgMetricsServiceTotalsRequest.ValidateAll()
// if the designated constraints aren't met.
type OrgMetricsServiceTotalsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgMetricsServiceTotalsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgMetricsServiceTotalsRequestMultiError) AllErrors() []error { return m }

// OrgMetricsServiceTotalsRequestValidationError is the validation error
// returned by OrgMetricsServiceTotalsRequest.Validate if the designated
// constraints aren't met.
type OrgMetricsServiceTotalsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgMetricsServiceTotalsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgMetricsServiceTotalsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgMetricsServiceTotalsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgMetricsServiceTotalsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgMetricsServiceTotalsRequestValidationError) ErrorName() string {
	return "OrgMetricsServiceTotalsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OrgMetricsServiceTotalsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgMetricsServiceTotalsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgMetricsServiceTotalsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgMetricsServiceTotalsRequestValidationError{}

var _OrgMetricsServiceTotalsRequest_TimeWindow_NotInLookup = map[MetricsTimeWindow]struct{}{
	0: {},
}

// Validate checks the field values on TopWorkflowsByRunsCountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TopWorkflowsByRunsCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopWorkflowsByRunsCountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TopWorkflowsByRunsCountRequestMultiError, or nil if none found.
func (m *TopWorkflowsByRunsCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TopWorkflowsByRunsCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetNumWorkflows(); val < 1 || val > 20 {
		err := TopWorkflowsByRunsCountRequestValidationError{
			field:  "NumWorkflows",
			reason: "value must be inside range [1, 20]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _TopWorkflowsByRunsCountRequest_TimeWindow_NotInLookup[m.GetTimeWindow()]; ok {
		err := TopWorkflowsByRunsCountRequestValidationError{
			field:  "TimeWindow",
			reason: "value must not be in list [METRICS_TIME_WINDOW_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TopWorkflowsByRunsCountRequestMultiError(errors)
	}

	return nil
}

// TopWorkflowsByRunsCountRequestMultiError is an error wrapping multiple
// validation errors returned by TopWorkflowsByRunsCountRequest.ValidateAll()
// if the designated constraints aren't met.
type TopWorkflowsByRunsCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopWorkflowsByRunsCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopWorkflowsByRunsCountRequestMultiError) AllErrors() []error { return m }

// TopWorkflowsByRunsCountRequestValidationError is the validation error
// returned by TopWorkflowsByRunsCountRequest.Validate if the designated
// constraints aren't met.
type TopWorkflowsByRunsCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopWorkflowsByRunsCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopWorkflowsByRunsCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopWorkflowsByRunsCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopWorkflowsByRunsCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopWorkflowsByRunsCountRequestValidationError) ErrorName() string {
	return "TopWorkflowsByRunsCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TopWorkflowsByRunsCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopWorkflowsByRunsCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopWorkflowsByRunsCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopWorkflowsByRunsCountRequestValidationError{}

var _TopWorkflowsByRunsCountRequest_TimeWindow_NotInLookup = map[MetricsTimeWindow]struct{}{
	0: {},
}

// Validate checks the field values on TopWorkflowsByRunsCountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TopWorkflowsByRunsCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopWorkflowsByRunsCountResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TopWorkflowsByRunsCountResponseMultiError, or nil if none found.
func (m *TopWorkflowsByRunsCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TopWorkflowsByRunsCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TopWorkflowsByRunsCountResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TopWorkflowsByRunsCountResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TopWorkflowsByRunsCountResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TopWorkflowsByRunsCountResponseMultiError(errors)
	}

	return nil
}

// TopWorkflowsByRunsCountResponseMultiError is an error wrapping multiple
// validation errors returned by TopWorkflowsByRunsCountResponse.ValidateAll()
// if the designated constraints aren't met.
type TopWorkflowsByRunsCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopWorkflowsByRunsCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopWorkflowsByRunsCountResponseMultiError) AllErrors() []error { return m }

// TopWorkflowsByRunsCountResponseValidationError is the validation error
// returned by TopWorkflowsByRunsCountResponse.Validate if the designated
// constraints aren't met.
type TopWorkflowsByRunsCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopWorkflowsByRunsCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopWorkflowsByRunsCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopWorkflowsByRunsCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopWorkflowsByRunsCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopWorkflowsByRunsCountResponseValidationError) ErrorName() string {
	return "TopWorkflowsByRunsCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TopWorkflowsByRunsCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopWorkflowsByRunsCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopWorkflowsByRunsCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopWorkflowsByRunsCountResponseValidationError{}

// Validate checks the field values on OrgMetricsServiceTotalsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrgMetricsServiceTotalsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgMetricsServiceTotalsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// OrgMetricsServiceTotalsResponseMultiError, or nil if none found.
func (m *OrgMetricsServiceTotalsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgMetricsServiceTotalsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrgMetricsServiceTotalsResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrgMetricsServiceTotalsResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrgMetricsServiceTotalsResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrgMetricsServiceTotalsResponseMultiError(errors)
	}

	return nil
}

// OrgMetricsServiceTotalsResponseMultiError is an error wrapping multiple
// validation errors returned by OrgMetricsServiceTotalsResponse.ValidateAll()
// if the designated constraints aren't met.
type OrgMetricsServiceTotalsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgMetricsServiceTotalsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgMetricsServiceTotalsResponseMultiError) AllErrors() []error { return m }

// OrgMetricsServiceTotalsResponseValidationError is the validation error
// returned by OrgMetricsServiceTotalsResponse.Validate if the designated
// constraints aren't met.
type OrgMetricsServiceTotalsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgMetricsServiceTotalsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgMetricsServiceTotalsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgMetricsServiceTotalsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgMetricsServiceTotalsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgMetricsServiceTotalsResponseValidationError) ErrorName() string {
	return "OrgMetricsServiceTotalsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrgMetricsServiceTotalsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgMetricsServiceTotalsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgMetricsServiceTotalsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgMetricsServiceTotalsResponseValidationError{}

// Validate checks the field values on
// TopWorkflowsByRunsCountResponse_TotalByStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TopWorkflowsByRunsCountResponse_TotalByStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// TopWorkflowsByRunsCountResponse_TotalByStatus with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// TopWorkflowsByRunsCountResponse_TotalByStatusMultiError, or nil if none found.
func (m *TopWorkflowsByRunsCountResponse_TotalByStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *TopWorkflowsByRunsCountResponse_TotalByStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkflow()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TopWorkflowsByRunsCountResponse_TotalByStatusValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TopWorkflowsByRunsCountResponse_TotalByStatusValidationError{
					field:  "Workflow",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkflow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TopWorkflowsByRunsCountResponse_TotalByStatusValidationError{
				field:  "Workflow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RunsTotalByStatus

	if len(errors) > 0 {
		return TopWorkflowsByRunsCountResponse_TotalByStatusMultiError(errors)
	}

	return nil
}

// TopWorkflowsByRunsCountResponse_TotalByStatusMultiError is an error wrapping
// multiple validation errors returned by
// TopWorkflowsByRunsCountResponse_TotalByStatus.ValidateAll() if the
// designated constraints aren't met.
type TopWorkflowsByRunsCountResponse_TotalByStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopWorkflowsByRunsCountResponse_TotalByStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopWorkflowsByRunsCountResponse_TotalByStatusMultiError) AllErrors() []error { return m }

// TopWorkflowsByRunsCountResponse_TotalByStatusValidationError is the
// validation error returned by
// TopWorkflowsByRunsCountResponse_TotalByStatus.Validate if the designated
// constraints aren't met.
type TopWorkflowsByRunsCountResponse_TotalByStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopWorkflowsByRunsCountResponse_TotalByStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopWorkflowsByRunsCountResponse_TotalByStatusValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e TopWorkflowsByRunsCountResponse_TotalByStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopWorkflowsByRunsCountResponse_TotalByStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopWorkflowsByRunsCountResponse_TotalByStatusValidationError) ErrorName() string {
	return "TopWorkflowsByRunsCountResponse_TotalByStatusValidationError"
}

// Error satisfies the builtin error interface
func (e TopWorkflowsByRunsCountResponse_TotalByStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopWorkflowsByRunsCountResponse_TotalByStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopWorkflowsByRunsCountResponse_TotalByStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopWorkflowsByRunsCountResponse_TotalByStatusValidationError{}

// Validate checks the field values on OrgMetricsServiceTotalsResponse_Result
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *OrgMetricsServiceTotalsResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// OrgMetricsServiceTotalsResponse_Result with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// OrgMetricsServiceTotalsResponse_ResultMultiError, or nil if none found.
func (m *OrgMetricsServiceTotalsResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgMetricsServiceTotalsResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RunsTotal

	// no validation rules for RunsTotalByStatus

	// no validation rules for RunsTotalByRunnerType

	if len(errors) > 0 {
		return OrgMetricsServiceTotalsResponse_ResultMultiError(errors)
	}

	return nil
}

// OrgMetricsServiceTotalsResponse_ResultMultiError is an error wrapping
// multiple validation errors returned by
// OrgMetricsServiceTotalsResponse_Result.ValidateAll() if the designated
// constraints aren't met.
type OrgMetricsServiceTotalsResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgMetricsServiceTotalsResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgMetricsServiceTotalsResponse_ResultMultiError) AllErrors() []error { return m }

// OrgMetricsServiceTotalsResponse_ResultValidationError is the validation
// error returned by OrgMetricsServiceTotalsResponse_Result.Validate if the
// designated constraints aren't met.
type OrgMetricsServiceTotalsResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgMetricsServiceTotalsResponse_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgMetricsServiceTotalsResponse_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgMetricsServiceTotalsResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgMetricsServiceTotalsResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgMetricsServiceTotalsResponse_ResultValidationError) ErrorName() string {
	return "OrgMetricsServiceTotalsResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e OrgMetricsServiceTotalsResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgMetricsServiceTotalsResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgMetricsServiceTotalsResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgMetricsServiceTotalsResponse_ResultValidationError{}
