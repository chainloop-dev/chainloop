// Code generated by ent, DO NOT EDIT.

package ocirepository

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/biz"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the ocirepository type in the database.
	Label = "oci_repository"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRepo holds the string denoting the repo field in the database.
	FieldRepo = "repo"
	// FieldSecretName holds the string denoting the secret_name field in the database.
	FieldSecretName = "secret_name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldValidationStatus holds the string denoting the validation_status field in the database.
	FieldValidationStatus = "validation_status"
	// FieldValidatedAt holds the string denoting the validated_at field in the database.
	FieldValidatedAt = "validated_at"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// Table holds the table name of the ocirepository in the database.
	Table = "oci_repositories"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "oci_repositories"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "organization_oci_repositories"
)

// Columns holds all SQL columns for ocirepository fields.
var Columns = []string{
	FieldID,
	FieldRepo,
	FieldSecretName,
	FieldCreatedAt,
	FieldValidationStatus,
	FieldValidatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "oci_repositories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"organization_oci_repositories",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultValidatedAt holds the default value on creation for the "validated_at" field.
	DefaultValidatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

const DefaultValidationStatus biz.OCIRepoValidationStatus = "OK"

// ValidationStatusValidator is a validator for the "validation_status" field enum values. It is called by the builders before save.
func ValidationStatusValidator(vs biz.OCIRepoValidationStatus) error {
	switch vs {
	case "OK", "Invalid":
		return nil
	default:
		return fmt.Errorf("ocirepository: invalid enum value for validation_status field: %q", vs)
	}
}

// OrderOption defines the ordering options for the OCIRepository queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRepo orders the results by the repo field.
func ByRepo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRepo, opts...).ToFunc()
}

// BySecretName orders the results by the secret_name field.
func BySecretName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecretName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByValidationStatus orders the results by the validation_status field.
func ByValidationStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidationStatus, opts...).ToFunc()
}

// ByValidatedAt orders the results by the validated_at field.
func ByValidatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidatedAt, opts...).ToFunc()
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
	)
}
