// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/biz"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/casbackend"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/robotaccount"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/workflow"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/workflowcontractversion"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/workflowrun"
	"github.com/google/uuid"
	"github.com/secure-systems-lab/go-securesystemslib/dsse"
)

// WorkflowRunCreate is the builder for creating a WorkflowRun entity.
type WorkflowRunCreate struct {
	config
	mutation *WorkflowRunMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (wrc *WorkflowRunCreate) SetCreatedAt(t time.Time) *WorkflowRunCreate {
	wrc.mutation.SetCreatedAt(t)
	return wrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wrc *WorkflowRunCreate) SetNillableCreatedAt(t *time.Time) *WorkflowRunCreate {
	if t != nil {
		wrc.SetCreatedAt(*t)
	}
	return wrc
}

// SetFinishedAt sets the "finished_at" field.
func (wrc *WorkflowRunCreate) SetFinishedAt(t time.Time) *WorkflowRunCreate {
	wrc.mutation.SetFinishedAt(t)
	return wrc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (wrc *WorkflowRunCreate) SetNillableFinishedAt(t *time.Time) *WorkflowRunCreate {
	if t != nil {
		wrc.SetFinishedAt(*t)
	}
	return wrc
}

// SetState sets the "state" field.
func (wrc *WorkflowRunCreate) SetState(brs biz.WorkflowRunStatus) *WorkflowRunCreate {
	wrc.mutation.SetState(brs)
	return wrc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (wrc *WorkflowRunCreate) SetNillableState(brs *biz.WorkflowRunStatus) *WorkflowRunCreate {
	if brs != nil {
		wrc.SetState(*brs)
	}
	return wrc
}

// SetReason sets the "reason" field.
func (wrc *WorkflowRunCreate) SetReason(s string) *WorkflowRunCreate {
	wrc.mutation.SetReason(s)
	return wrc
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (wrc *WorkflowRunCreate) SetNillableReason(s *string) *WorkflowRunCreate {
	if s != nil {
		wrc.SetReason(*s)
	}
	return wrc
}

// SetRunURL sets the "run_url" field.
func (wrc *WorkflowRunCreate) SetRunURL(s string) *WorkflowRunCreate {
	wrc.mutation.SetRunURL(s)
	return wrc
}

// SetNillableRunURL sets the "run_url" field if the given value is not nil.
func (wrc *WorkflowRunCreate) SetNillableRunURL(s *string) *WorkflowRunCreate {
	if s != nil {
		wrc.SetRunURL(*s)
	}
	return wrc
}

// SetRunnerType sets the "runner_type" field.
func (wrc *WorkflowRunCreate) SetRunnerType(s string) *WorkflowRunCreate {
	wrc.mutation.SetRunnerType(s)
	return wrc
}

// SetNillableRunnerType sets the "runner_type" field if the given value is not nil.
func (wrc *WorkflowRunCreate) SetNillableRunnerType(s *string) *WorkflowRunCreate {
	if s != nil {
		wrc.SetRunnerType(*s)
	}
	return wrc
}

// SetAttestation sets the "attestation" field.
func (wrc *WorkflowRunCreate) SetAttestation(d *dsse.Envelope) *WorkflowRunCreate {
	wrc.mutation.SetAttestation(d)
	return wrc
}

// SetAttestationDigest sets the "attestation_digest" field.
func (wrc *WorkflowRunCreate) SetAttestationDigest(s string) *WorkflowRunCreate {
	wrc.mutation.SetAttestationDigest(s)
	return wrc
}

// SetNillableAttestationDigest sets the "attestation_digest" field if the given value is not nil.
func (wrc *WorkflowRunCreate) SetNillableAttestationDigest(s *string) *WorkflowRunCreate {
	if s != nil {
		wrc.SetAttestationDigest(*s)
	}
	return wrc
}

// SetAttestationState sets the "attestation_state" field.
func (wrc *WorkflowRunCreate) SetAttestationState(b []byte) *WorkflowRunCreate {
	wrc.mutation.SetAttestationState(b)
	return wrc
}

// SetID sets the "id" field.
func (wrc *WorkflowRunCreate) SetID(u uuid.UUID) *WorkflowRunCreate {
	wrc.mutation.SetID(u)
	return wrc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wrc *WorkflowRunCreate) SetNillableID(u *uuid.UUID) *WorkflowRunCreate {
	if u != nil {
		wrc.SetID(*u)
	}
	return wrc
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (wrc *WorkflowRunCreate) SetWorkflowID(id uuid.UUID) *WorkflowRunCreate {
	wrc.mutation.SetWorkflowID(id)
	return wrc
}

// SetNillableWorkflowID sets the "workflow" edge to the Workflow entity by ID if the given value is not nil.
func (wrc *WorkflowRunCreate) SetNillableWorkflowID(id *uuid.UUID) *WorkflowRunCreate {
	if id != nil {
		wrc = wrc.SetWorkflowID(*id)
	}
	return wrc
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (wrc *WorkflowRunCreate) SetWorkflow(w *Workflow) *WorkflowRunCreate {
	return wrc.SetWorkflowID(w.ID)
}

// SetRobotaccountID sets the "robotaccount" edge to the RobotAccount entity by ID.
func (wrc *WorkflowRunCreate) SetRobotaccountID(id uuid.UUID) *WorkflowRunCreate {
	wrc.mutation.SetRobotaccountID(id)
	return wrc
}

// SetNillableRobotaccountID sets the "robotaccount" edge to the RobotAccount entity by ID if the given value is not nil.
func (wrc *WorkflowRunCreate) SetNillableRobotaccountID(id *uuid.UUID) *WorkflowRunCreate {
	if id != nil {
		wrc = wrc.SetRobotaccountID(*id)
	}
	return wrc
}

// SetRobotaccount sets the "robotaccount" edge to the RobotAccount entity.
func (wrc *WorkflowRunCreate) SetRobotaccount(r *RobotAccount) *WorkflowRunCreate {
	return wrc.SetRobotaccountID(r.ID)
}

// SetContractVersionID sets the "contract_version" edge to the WorkflowContractVersion entity by ID.
func (wrc *WorkflowRunCreate) SetContractVersionID(id uuid.UUID) *WorkflowRunCreate {
	wrc.mutation.SetContractVersionID(id)
	return wrc
}

// SetNillableContractVersionID sets the "contract_version" edge to the WorkflowContractVersion entity by ID if the given value is not nil.
func (wrc *WorkflowRunCreate) SetNillableContractVersionID(id *uuid.UUID) *WorkflowRunCreate {
	if id != nil {
		wrc = wrc.SetContractVersionID(*id)
	}
	return wrc
}

// SetContractVersion sets the "contract_version" edge to the WorkflowContractVersion entity.
func (wrc *WorkflowRunCreate) SetContractVersion(w *WorkflowContractVersion) *WorkflowRunCreate {
	return wrc.SetContractVersionID(w.ID)
}

// AddCasBackendIDs adds the "cas_backends" edge to the CASBackend entity by IDs.
func (wrc *WorkflowRunCreate) AddCasBackendIDs(ids ...uuid.UUID) *WorkflowRunCreate {
	wrc.mutation.AddCasBackendIDs(ids...)
	return wrc
}

// AddCasBackends adds the "cas_backends" edges to the CASBackend entity.
func (wrc *WorkflowRunCreate) AddCasBackends(c ...*CASBackend) *WorkflowRunCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wrc.AddCasBackendIDs(ids...)
}

// Mutation returns the WorkflowRunMutation object of the builder.
func (wrc *WorkflowRunCreate) Mutation() *WorkflowRunMutation {
	return wrc.mutation
}

// Save creates the WorkflowRun in the database.
func (wrc *WorkflowRunCreate) Save(ctx context.Context) (*WorkflowRun, error) {
	wrc.defaults()
	return withHooks(ctx, wrc.sqlSave, wrc.mutation, wrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wrc *WorkflowRunCreate) SaveX(ctx context.Context) *WorkflowRun {
	v, err := wrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wrc *WorkflowRunCreate) Exec(ctx context.Context) error {
	_, err := wrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wrc *WorkflowRunCreate) ExecX(ctx context.Context) {
	if err := wrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wrc *WorkflowRunCreate) defaults() {
	if _, ok := wrc.mutation.CreatedAt(); !ok {
		v := workflowrun.DefaultCreatedAt()
		wrc.mutation.SetCreatedAt(v)
	}
	if _, ok := wrc.mutation.State(); !ok {
		v := workflowrun.DefaultState
		wrc.mutation.SetState(v)
	}
	if _, ok := wrc.mutation.ID(); !ok {
		v := workflowrun.DefaultID()
		wrc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wrc *WorkflowRunCreate) check() error {
	if _, ok := wrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkflowRun.created_at"`)}
	}
	if _, ok := wrc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "WorkflowRun.state"`)}
	}
	if v, ok := wrc.mutation.State(); ok {
		if err := workflowrun.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "WorkflowRun.state": %w`, err)}
		}
	}
	return nil
}

func (wrc *WorkflowRunCreate) sqlSave(ctx context.Context) (*WorkflowRun, error) {
	if err := wrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wrc.mutation.id = &_node.ID
	wrc.mutation.done = true
	return _node, nil
}

func (wrc *WorkflowRunCreate) createSpec() (*WorkflowRun, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkflowRun{config: wrc.config}
		_spec = sqlgraph.NewCreateSpec(workflowrun.Table, sqlgraph.NewFieldSpec(workflowrun.FieldID, field.TypeUUID))
	)
	if id, ok := wrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wrc.mutation.CreatedAt(); ok {
		_spec.SetField(workflowrun.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wrc.mutation.FinishedAt(); ok {
		_spec.SetField(workflowrun.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = value
	}
	if value, ok := wrc.mutation.State(); ok {
		_spec.SetField(workflowrun.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := wrc.mutation.Reason(); ok {
		_spec.SetField(workflowrun.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := wrc.mutation.RunURL(); ok {
		_spec.SetField(workflowrun.FieldRunURL, field.TypeString, value)
		_node.RunURL = value
	}
	if value, ok := wrc.mutation.RunnerType(); ok {
		_spec.SetField(workflowrun.FieldRunnerType, field.TypeString, value)
		_node.RunnerType = value
	}
	if value, ok := wrc.mutation.Attestation(); ok {
		_spec.SetField(workflowrun.FieldAttestation, field.TypeJSON, value)
		_node.Attestation = value
	}
	if value, ok := wrc.mutation.AttestationDigest(); ok {
		_spec.SetField(workflowrun.FieldAttestationDigest, field.TypeString, value)
		_node.AttestationDigest = value
	}
	if value, ok := wrc.mutation.AttestationState(); ok {
		_spec.SetField(workflowrun.FieldAttestationState, field.TypeBytes, value)
		_node.AttestationState = value
	}
	if nodes := wrc.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowrun.WorkflowTable,
			Columns: []string{workflowrun.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflow.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workflow_workflowruns = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wrc.mutation.RobotaccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowrun.RobotaccountTable,
			Columns: []string{workflowrun.RobotaccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(robotaccount.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.robot_account_workflowruns = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wrc.mutation.ContractVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workflowrun.ContractVersionTable,
			Columns: []string{workflowrun.ContractVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowcontractversion.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.workflow_run_contract_version = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wrc.mutation.CasBackendsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workflowrun.CasBackendsTable,
			Columns: workflowrun.CasBackendsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(casbackend.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkflowRunCreateBulk is the builder for creating many WorkflowRun entities in bulk.
type WorkflowRunCreateBulk struct {
	config
	builders []*WorkflowRunCreate
}

// Save creates the WorkflowRun entities in the database.
func (wrcb *WorkflowRunCreateBulk) Save(ctx context.Context) ([]*WorkflowRun, error) {
	specs := make([]*sqlgraph.CreateSpec, len(wrcb.builders))
	nodes := make([]*WorkflowRun, len(wrcb.builders))
	mutators := make([]Mutator, len(wrcb.builders))
	for i := range wrcb.builders {
		func(i int, root context.Context) {
			builder := wrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkflowRunMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wrcb *WorkflowRunCreateBulk) SaveX(ctx context.Context) []*WorkflowRun {
	v, err := wrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wrcb *WorkflowRunCreateBulk) Exec(ctx context.Context) error {
	_, err := wrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wrcb *WorkflowRunCreateBulk) ExecX(ctx context.Context) {
	if err := wrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
