// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/biz"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/predicate"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/robotaccount"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/workflow"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/workflowcontractversion"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/workflowrun"
	"github.com/google/uuid"
	"github.com/secure-systems-lab/go-securesystemslib/dsse"
)

// WorkflowRunUpdate is the builder for updating WorkflowRun entities.
type WorkflowRunUpdate struct {
	config
	hooks    []Hook
	mutation *WorkflowRunMutation
}

// Where appends a list predicates to the WorkflowRunUpdate builder.
func (wru *WorkflowRunUpdate) Where(ps ...predicate.WorkflowRun) *WorkflowRunUpdate {
	wru.mutation.Where(ps...)
	return wru
}

// SetFinishedAt sets the "finished_at" field.
func (wru *WorkflowRunUpdate) SetFinishedAt(t time.Time) *WorkflowRunUpdate {
	wru.mutation.SetFinishedAt(t)
	return wru
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (wru *WorkflowRunUpdate) SetNillableFinishedAt(t *time.Time) *WorkflowRunUpdate {
	if t != nil {
		wru.SetFinishedAt(*t)
	}
	return wru
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (wru *WorkflowRunUpdate) ClearFinishedAt() *WorkflowRunUpdate {
	wru.mutation.ClearFinishedAt()
	return wru
}

// SetState sets the "state" field.
func (wru *WorkflowRunUpdate) SetState(brs biz.WorkflowRunStatus) *WorkflowRunUpdate {
	wru.mutation.SetState(brs)
	return wru
}

// SetNillableState sets the "state" field if the given value is not nil.
func (wru *WorkflowRunUpdate) SetNillableState(brs *biz.WorkflowRunStatus) *WorkflowRunUpdate {
	if brs != nil {
		wru.SetState(*brs)
	}
	return wru
}

// SetReason sets the "reason" field.
func (wru *WorkflowRunUpdate) SetReason(s string) *WorkflowRunUpdate {
	wru.mutation.SetReason(s)
	return wru
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (wru *WorkflowRunUpdate) SetNillableReason(s *string) *WorkflowRunUpdate {
	if s != nil {
		wru.SetReason(*s)
	}
	return wru
}

// ClearReason clears the value of the "reason" field.
func (wru *WorkflowRunUpdate) ClearReason() *WorkflowRunUpdate {
	wru.mutation.ClearReason()
	return wru
}

// SetRunURL sets the "run_url" field.
func (wru *WorkflowRunUpdate) SetRunURL(s string) *WorkflowRunUpdate {
	wru.mutation.SetRunURL(s)
	return wru
}

// SetNillableRunURL sets the "run_url" field if the given value is not nil.
func (wru *WorkflowRunUpdate) SetNillableRunURL(s *string) *WorkflowRunUpdate {
	if s != nil {
		wru.SetRunURL(*s)
	}
	return wru
}

// ClearRunURL clears the value of the "run_url" field.
func (wru *WorkflowRunUpdate) ClearRunURL() *WorkflowRunUpdate {
	wru.mutation.ClearRunURL()
	return wru
}

// SetRunnerType sets the "runner_type" field.
func (wru *WorkflowRunUpdate) SetRunnerType(s string) *WorkflowRunUpdate {
	wru.mutation.SetRunnerType(s)
	return wru
}

// SetNillableRunnerType sets the "runner_type" field if the given value is not nil.
func (wru *WorkflowRunUpdate) SetNillableRunnerType(s *string) *WorkflowRunUpdate {
	if s != nil {
		wru.SetRunnerType(*s)
	}
	return wru
}

// ClearRunnerType clears the value of the "runner_type" field.
func (wru *WorkflowRunUpdate) ClearRunnerType() *WorkflowRunUpdate {
	wru.mutation.ClearRunnerType()
	return wru
}

// SetAttestation sets the "attestation" field.
func (wru *WorkflowRunUpdate) SetAttestation(d *dsse.Envelope) *WorkflowRunUpdate {
	wru.mutation.SetAttestation(d)
	return wru
}

// ClearAttestation clears the value of the "attestation" field.
func (wru *WorkflowRunUpdate) ClearAttestation() *WorkflowRunUpdate {
	wru.mutation.ClearAttestation()
	return wru
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (wru *WorkflowRunUpdate) SetWorkflowID(id uuid.UUID) *WorkflowRunUpdate {
	wru.mutation.SetWorkflowID(id)
	return wru
}

// SetNillableWorkflowID sets the "workflow" edge to the Workflow entity by ID if the given value is not nil.
func (wru *WorkflowRunUpdate) SetNillableWorkflowID(id *uuid.UUID) *WorkflowRunUpdate {
	if id != nil {
		wru = wru.SetWorkflowID(*id)
	}
	return wru
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (wru *WorkflowRunUpdate) SetWorkflow(w *Workflow) *WorkflowRunUpdate {
	return wru.SetWorkflowID(w.ID)
}

// SetRobotaccountID sets the "robotaccount" edge to the RobotAccount entity by ID.
func (wru *WorkflowRunUpdate) SetRobotaccountID(id uuid.UUID) *WorkflowRunUpdate {
	wru.mutation.SetRobotaccountID(id)
	return wru
}

// SetNillableRobotaccountID sets the "robotaccount" edge to the RobotAccount entity by ID if the given value is not nil.
func (wru *WorkflowRunUpdate) SetNillableRobotaccountID(id *uuid.UUID) *WorkflowRunUpdate {
	if id != nil {
		wru = wru.SetRobotaccountID(*id)
	}
	return wru
}

// SetRobotaccount sets the "robotaccount" edge to the RobotAccount entity.
func (wru *WorkflowRunUpdate) SetRobotaccount(r *RobotAccount) *WorkflowRunUpdate {
	return wru.SetRobotaccountID(r.ID)
}

// SetContractVersionID sets the "contract_version" edge to the WorkflowContractVersion entity by ID.
func (wru *WorkflowRunUpdate) SetContractVersionID(id uuid.UUID) *WorkflowRunUpdate {
	wru.mutation.SetContractVersionID(id)
	return wru
}

// SetNillableContractVersionID sets the "contract_version" edge to the WorkflowContractVersion entity by ID if the given value is not nil.
func (wru *WorkflowRunUpdate) SetNillableContractVersionID(id *uuid.UUID) *WorkflowRunUpdate {
	if id != nil {
		wru = wru.SetContractVersionID(*id)
	}
	return wru
}

// SetContractVersion sets the "contract_version" edge to the WorkflowContractVersion entity.
func (wru *WorkflowRunUpdate) SetContractVersion(w *WorkflowContractVersion) *WorkflowRunUpdate {
	return wru.SetContractVersionID(w.ID)
}

// Mutation returns the WorkflowRunMutation object of the builder.
func (wru *WorkflowRunUpdate) Mutation() *WorkflowRunMutation {
	return wru.mutation
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (wru *WorkflowRunUpdate) ClearWorkflow() *WorkflowRunUpdate {
	wru.mutation.ClearWorkflow()
	return wru
}

// ClearRobotaccount clears the "robotaccount" edge to the RobotAccount entity.
func (wru *WorkflowRunUpdate) ClearRobotaccount() *WorkflowRunUpdate {
	wru.mutation.ClearRobotaccount()
	return wru
}

// ClearContractVersion clears the "contract_version" edge to the WorkflowContractVersion entity.
func (wru *WorkflowRunUpdate) ClearContractVersion() *WorkflowRunUpdate {
	wru.mutation.ClearContractVersion()
	return wru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wru *WorkflowRunUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WorkflowRunMutation](ctx, wru.sqlSave, wru.mutation, wru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wru *WorkflowRunUpdate) SaveX(ctx context.Context) int {
	affected, err := wru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wru *WorkflowRunUpdate) Exec(ctx context.Context) error {
	_, err := wru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wru *WorkflowRunUpdate) ExecX(ctx context.Context) {
	if err := wru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wru *WorkflowRunUpdate) check() error {
	if v, ok := wru.mutation.State(); ok {
		if err := workflowrun.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "WorkflowRun.state": %w`, err)}
		}
	}
	return nil
}

func (wru *WorkflowRunUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowrun.Table, workflowrun.Columns, sqlgraph.NewFieldSpec(workflowrun.FieldID, field.TypeUUID))
	if ps := wru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wru.mutation.FinishedAt(); ok {
		_spec.SetField(workflowrun.FieldFinishedAt, field.TypeTime, value)
	}
	if wru.mutation.FinishedAtCleared() {
		_spec.ClearField(workflowrun.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := wru.mutation.State(); ok {
		_spec.SetField(workflowrun.FieldState, field.TypeEnum, value)
	}
	if value, ok := wru.mutation.Reason(); ok {
		_spec.SetField(workflowrun.FieldReason, field.TypeString, value)
	}
	if wru.mutation.ReasonCleared() {
		_spec.ClearField(workflowrun.FieldReason, field.TypeString)
	}
	if value, ok := wru.mutation.RunURL(); ok {
		_spec.SetField(workflowrun.FieldRunURL, field.TypeString, value)
	}
	if wru.mutation.RunURLCleared() {
		_spec.ClearField(workflowrun.FieldRunURL, field.TypeString)
	}
	if value, ok := wru.mutation.RunnerType(); ok {
		_spec.SetField(workflowrun.FieldRunnerType, field.TypeString, value)
	}
	if wru.mutation.RunnerTypeCleared() {
		_spec.ClearField(workflowrun.FieldRunnerType, field.TypeString)
	}
	if value, ok := wru.mutation.Attestation(); ok {
		_spec.SetField(workflowrun.FieldAttestation, field.TypeJSON, value)
	}
	if wru.mutation.AttestationCleared() {
		_spec.ClearField(workflowrun.FieldAttestation, field.TypeJSON)
	}
	if wru.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowrun.WorkflowTable,
			Columns: []string{workflowrun.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wru.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowrun.WorkflowTable,
			Columns: []string{workflowrun.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wru.mutation.RobotaccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowrun.RobotaccountTable,
			Columns: []string{workflowrun.RobotaccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: robotaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wru.mutation.RobotaccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowrun.RobotaccountTable,
			Columns: []string{workflowrun.RobotaccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: robotaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wru.mutation.ContractVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workflowrun.ContractVersionTable,
			Columns: []string{workflowrun.ContractVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflowcontractversion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wru.mutation.ContractVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workflowrun.ContractVersionTable,
			Columns: []string{workflowrun.ContractVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflowcontractversion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowrun.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wru.mutation.done = true
	return n, nil
}

// WorkflowRunUpdateOne is the builder for updating a single WorkflowRun entity.
type WorkflowRunUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkflowRunMutation
}

// SetFinishedAt sets the "finished_at" field.
func (wruo *WorkflowRunUpdateOne) SetFinishedAt(t time.Time) *WorkflowRunUpdateOne {
	wruo.mutation.SetFinishedAt(t)
	return wruo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (wruo *WorkflowRunUpdateOne) SetNillableFinishedAt(t *time.Time) *WorkflowRunUpdateOne {
	if t != nil {
		wruo.SetFinishedAt(*t)
	}
	return wruo
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (wruo *WorkflowRunUpdateOne) ClearFinishedAt() *WorkflowRunUpdateOne {
	wruo.mutation.ClearFinishedAt()
	return wruo
}

// SetState sets the "state" field.
func (wruo *WorkflowRunUpdateOne) SetState(brs biz.WorkflowRunStatus) *WorkflowRunUpdateOne {
	wruo.mutation.SetState(brs)
	return wruo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (wruo *WorkflowRunUpdateOne) SetNillableState(brs *biz.WorkflowRunStatus) *WorkflowRunUpdateOne {
	if brs != nil {
		wruo.SetState(*brs)
	}
	return wruo
}

// SetReason sets the "reason" field.
func (wruo *WorkflowRunUpdateOne) SetReason(s string) *WorkflowRunUpdateOne {
	wruo.mutation.SetReason(s)
	return wruo
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (wruo *WorkflowRunUpdateOne) SetNillableReason(s *string) *WorkflowRunUpdateOne {
	if s != nil {
		wruo.SetReason(*s)
	}
	return wruo
}

// ClearReason clears the value of the "reason" field.
func (wruo *WorkflowRunUpdateOne) ClearReason() *WorkflowRunUpdateOne {
	wruo.mutation.ClearReason()
	return wruo
}

// SetRunURL sets the "run_url" field.
func (wruo *WorkflowRunUpdateOne) SetRunURL(s string) *WorkflowRunUpdateOne {
	wruo.mutation.SetRunURL(s)
	return wruo
}

// SetNillableRunURL sets the "run_url" field if the given value is not nil.
func (wruo *WorkflowRunUpdateOne) SetNillableRunURL(s *string) *WorkflowRunUpdateOne {
	if s != nil {
		wruo.SetRunURL(*s)
	}
	return wruo
}

// ClearRunURL clears the value of the "run_url" field.
func (wruo *WorkflowRunUpdateOne) ClearRunURL() *WorkflowRunUpdateOne {
	wruo.mutation.ClearRunURL()
	return wruo
}

// SetRunnerType sets the "runner_type" field.
func (wruo *WorkflowRunUpdateOne) SetRunnerType(s string) *WorkflowRunUpdateOne {
	wruo.mutation.SetRunnerType(s)
	return wruo
}

// SetNillableRunnerType sets the "runner_type" field if the given value is not nil.
func (wruo *WorkflowRunUpdateOne) SetNillableRunnerType(s *string) *WorkflowRunUpdateOne {
	if s != nil {
		wruo.SetRunnerType(*s)
	}
	return wruo
}

// ClearRunnerType clears the value of the "runner_type" field.
func (wruo *WorkflowRunUpdateOne) ClearRunnerType() *WorkflowRunUpdateOne {
	wruo.mutation.ClearRunnerType()
	return wruo
}

// SetAttestation sets the "attestation" field.
func (wruo *WorkflowRunUpdateOne) SetAttestation(d *dsse.Envelope) *WorkflowRunUpdateOne {
	wruo.mutation.SetAttestation(d)
	return wruo
}

// ClearAttestation clears the value of the "attestation" field.
func (wruo *WorkflowRunUpdateOne) ClearAttestation() *WorkflowRunUpdateOne {
	wruo.mutation.ClearAttestation()
	return wruo
}

// SetWorkflowID sets the "workflow" edge to the Workflow entity by ID.
func (wruo *WorkflowRunUpdateOne) SetWorkflowID(id uuid.UUID) *WorkflowRunUpdateOne {
	wruo.mutation.SetWorkflowID(id)
	return wruo
}

// SetNillableWorkflowID sets the "workflow" edge to the Workflow entity by ID if the given value is not nil.
func (wruo *WorkflowRunUpdateOne) SetNillableWorkflowID(id *uuid.UUID) *WorkflowRunUpdateOne {
	if id != nil {
		wruo = wruo.SetWorkflowID(*id)
	}
	return wruo
}

// SetWorkflow sets the "workflow" edge to the Workflow entity.
func (wruo *WorkflowRunUpdateOne) SetWorkflow(w *Workflow) *WorkflowRunUpdateOne {
	return wruo.SetWorkflowID(w.ID)
}

// SetRobotaccountID sets the "robotaccount" edge to the RobotAccount entity by ID.
func (wruo *WorkflowRunUpdateOne) SetRobotaccountID(id uuid.UUID) *WorkflowRunUpdateOne {
	wruo.mutation.SetRobotaccountID(id)
	return wruo
}

// SetNillableRobotaccountID sets the "robotaccount" edge to the RobotAccount entity by ID if the given value is not nil.
func (wruo *WorkflowRunUpdateOne) SetNillableRobotaccountID(id *uuid.UUID) *WorkflowRunUpdateOne {
	if id != nil {
		wruo = wruo.SetRobotaccountID(*id)
	}
	return wruo
}

// SetRobotaccount sets the "robotaccount" edge to the RobotAccount entity.
func (wruo *WorkflowRunUpdateOne) SetRobotaccount(r *RobotAccount) *WorkflowRunUpdateOne {
	return wruo.SetRobotaccountID(r.ID)
}

// SetContractVersionID sets the "contract_version" edge to the WorkflowContractVersion entity by ID.
func (wruo *WorkflowRunUpdateOne) SetContractVersionID(id uuid.UUID) *WorkflowRunUpdateOne {
	wruo.mutation.SetContractVersionID(id)
	return wruo
}

// SetNillableContractVersionID sets the "contract_version" edge to the WorkflowContractVersion entity by ID if the given value is not nil.
func (wruo *WorkflowRunUpdateOne) SetNillableContractVersionID(id *uuid.UUID) *WorkflowRunUpdateOne {
	if id != nil {
		wruo = wruo.SetContractVersionID(*id)
	}
	return wruo
}

// SetContractVersion sets the "contract_version" edge to the WorkflowContractVersion entity.
func (wruo *WorkflowRunUpdateOne) SetContractVersion(w *WorkflowContractVersion) *WorkflowRunUpdateOne {
	return wruo.SetContractVersionID(w.ID)
}

// Mutation returns the WorkflowRunMutation object of the builder.
func (wruo *WorkflowRunUpdateOne) Mutation() *WorkflowRunMutation {
	return wruo.mutation
}

// ClearWorkflow clears the "workflow" edge to the Workflow entity.
func (wruo *WorkflowRunUpdateOne) ClearWorkflow() *WorkflowRunUpdateOne {
	wruo.mutation.ClearWorkflow()
	return wruo
}

// ClearRobotaccount clears the "robotaccount" edge to the RobotAccount entity.
func (wruo *WorkflowRunUpdateOne) ClearRobotaccount() *WorkflowRunUpdateOne {
	wruo.mutation.ClearRobotaccount()
	return wruo
}

// ClearContractVersion clears the "contract_version" edge to the WorkflowContractVersion entity.
func (wruo *WorkflowRunUpdateOne) ClearContractVersion() *WorkflowRunUpdateOne {
	wruo.mutation.ClearContractVersion()
	return wruo
}

// Where appends a list predicates to the WorkflowRunUpdate builder.
func (wruo *WorkflowRunUpdateOne) Where(ps ...predicate.WorkflowRun) *WorkflowRunUpdateOne {
	wruo.mutation.Where(ps...)
	return wruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wruo *WorkflowRunUpdateOne) Select(field string, fields ...string) *WorkflowRunUpdateOne {
	wruo.fields = append([]string{field}, fields...)
	return wruo
}

// Save executes the query and returns the updated WorkflowRun entity.
func (wruo *WorkflowRunUpdateOne) Save(ctx context.Context) (*WorkflowRun, error) {
	return withHooks[*WorkflowRun, WorkflowRunMutation](ctx, wruo.sqlSave, wruo.mutation, wruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wruo *WorkflowRunUpdateOne) SaveX(ctx context.Context) *WorkflowRun {
	node, err := wruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wruo *WorkflowRunUpdateOne) Exec(ctx context.Context) error {
	_, err := wruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wruo *WorkflowRunUpdateOne) ExecX(ctx context.Context) {
	if err := wruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wruo *WorkflowRunUpdateOne) check() error {
	if v, ok := wruo.mutation.State(); ok {
		if err := workflowrun.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "WorkflowRun.state": %w`, err)}
		}
	}
	return nil
}

func (wruo *WorkflowRunUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowRun, err error) {
	if err := wruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workflowrun.Table, workflowrun.Columns, sqlgraph.NewFieldSpec(workflowrun.FieldID, field.TypeUUID))
	id, ok := wruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowRun.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowrun.FieldID)
		for _, f := range fields {
			if !workflowrun.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflowrun.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wruo.mutation.FinishedAt(); ok {
		_spec.SetField(workflowrun.FieldFinishedAt, field.TypeTime, value)
	}
	if wruo.mutation.FinishedAtCleared() {
		_spec.ClearField(workflowrun.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := wruo.mutation.State(); ok {
		_spec.SetField(workflowrun.FieldState, field.TypeEnum, value)
	}
	if value, ok := wruo.mutation.Reason(); ok {
		_spec.SetField(workflowrun.FieldReason, field.TypeString, value)
	}
	if wruo.mutation.ReasonCleared() {
		_spec.ClearField(workflowrun.FieldReason, field.TypeString)
	}
	if value, ok := wruo.mutation.RunURL(); ok {
		_spec.SetField(workflowrun.FieldRunURL, field.TypeString, value)
	}
	if wruo.mutation.RunURLCleared() {
		_spec.ClearField(workflowrun.FieldRunURL, field.TypeString)
	}
	if value, ok := wruo.mutation.RunnerType(); ok {
		_spec.SetField(workflowrun.FieldRunnerType, field.TypeString, value)
	}
	if wruo.mutation.RunnerTypeCleared() {
		_spec.ClearField(workflowrun.FieldRunnerType, field.TypeString)
	}
	if value, ok := wruo.mutation.Attestation(); ok {
		_spec.SetField(workflowrun.FieldAttestation, field.TypeJSON, value)
	}
	if wruo.mutation.AttestationCleared() {
		_spec.ClearField(workflowrun.FieldAttestation, field.TypeJSON)
	}
	if wruo.mutation.WorkflowCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowrun.WorkflowTable,
			Columns: []string{workflowrun.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wruo.mutation.WorkflowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowrun.WorkflowTable,
			Columns: []string{workflowrun.WorkflowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wruo.mutation.RobotaccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowrun.RobotaccountTable,
			Columns: []string{workflowrun.RobotaccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: robotaccount.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wruo.mutation.RobotaccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowrun.RobotaccountTable,
			Columns: []string{workflowrun.RobotaccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: robotaccount.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wruo.mutation.ContractVersionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workflowrun.ContractVersionTable,
			Columns: []string{workflowrun.ContractVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflowcontractversion.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wruo.mutation.ContractVersionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workflowrun.ContractVersionTable,
			Columns: []string{workflowrun.ContractVersionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: workflowcontractversion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkflowRun{config: wruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowrun.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wruo.mutation.done = true
	return _node, nil
}
