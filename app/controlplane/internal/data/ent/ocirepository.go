// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/biz"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/ocirepository"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/organization"
	"github.com/google/uuid"
)

// OCIRepository is the model entity for the OCIRepository schema.
type OCIRepository struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Repo holds the value of the "repo" field.
	Repo string `json:"repo,omitempty"`
	// SecretName holds the value of the "secret_name" field.
	SecretName string `json:"secret_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ValidationStatus holds the value of the "validation_status" field.
	ValidationStatus biz.OCIRepoValidationStatus `json:"validation_status,omitempty"`
	// ValidatedAt holds the value of the "validated_at" field.
	ValidatedAt time.Time `json:"validated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OCIRepositoryQuery when eager-loading is set.
	Edges                         OCIRepositoryEdges `json:"edges"`
	organization_oci_repositories *uuid.UUID
	selectValues                  sql.SelectValues
}

// OCIRepositoryEdges holds the relations/edges for other nodes in the graph.
type OCIRepositoryEdges struct {
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OCIRepositoryEdges) OrganizationOrErr() (*Organization, error) {
	if e.loadedTypes[0] {
		if e.Organization == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: organization.Label}
		}
		return e.Organization, nil
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OCIRepository) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ocirepository.FieldRepo, ocirepository.FieldSecretName, ocirepository.FieldValidationStatus:
			values[i] = new(sql.NullString)
		case ocirepository.FieldCreatedAt, ocirepository.FieldValidatedAt:
			values[i] = new(sql.NullTime)
		case ocirepository.FieldID:
			values[i] = new(uuid.UUID)
		case ocirepository.ForeignKeys[0]: // organization_oci_repositories
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OCIRepository fields.
func (or *OCIRepository) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ocirepository.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				or.ID = *value
			}
		case ocirepository.FieldRepo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repo", values[i])
			} else if value.Valid {
				or.Repo = value.String
			}
		case ocirepository.FieldSecretName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret_name", values[i])
			} else if value.Valid {
				or.SecretName = value.String
			}
		case ocirepository.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				or.CreatedAt = value.Time
			}
		case ocirepository.FieldValidationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field validation_status", values[i])
			} else if value.Valid {
				or.ValidationStatus = biz.OCIRepoValidationStatus(value.String)
			}
		case ocirepository.FieldValidatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field validated_at", values[i])
			} else if value.Valid {
				or.ValidatedAt = value.Time
			}
		case ocirepository.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field organization_oci_repositories", values[i])
			} else if value.Valid {
				or.organization_oci_repositories = new(uuid.UUID)
				*or.organization_oci_repositories = *value.S.(*uuid.UUID)
			}
		default:
			or.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OCIRepository.
// This includes values selected through modifiers, order, etc.
func (or *OCIRepository) Value(name string) (ent.Value, error) {
	return or.selectValues.Get(name)
}

// QueryOrganization queries the "organization" edge of the OCIRepository entity.
func (or *OCIRepository) QueryOrganization() *OrganizationQuery {
	return NewOCIRepositoryClient(or.config).QueryOrganization(or)
}

// Update returns a builder for updating this OCIRepository.
// Note that you need to call OCIRepository.Unwrap() before calling this method if this OCIRepository
// was returned from a transaction, and the transaction was committed or rolled back.
func (or *OCIRepository) Update() *OCIRepositoryUpdateOne {
	return NewOCIRepositoryClient(or.config).UpdateOne(or)
}

// Unwrap unwraps the OCIRepository entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (or *OCIRepository) Unwrap() *OCIRepository {
	_tx, ok := or.config.driver.(*txDriver)
	if !ok {
		panic("ent: OCIRepository is not a transactional entity")
	}
	or.config.driver = _tx.drv
	return or
}

// String implements the fmt.Stringer.
func (or *OCIRepository) String() string {
	var builder strings.Builder
	builder.WriteString("OCIRepository(")
	builder.WriteString(fmt.Sprintf("id=%v, ", or.ID))
	builder.WriteString("repo=")
	builder.WriteString(or.Repo)
	builder.WriteString(", ")
	builder.WriteString("secret_name=")
	builder.WriteString(or.SecretName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(or.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("validation_status=")
	builder.WriteString(fmt.Sprintf("%v", or.ValidationStatus))
	builder.WriteString(", ")
	builder.WriteString("validated_at=")
	builder.WriteString(or.ValidatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OCIRepositories is a parsable slice of OCIRepository.
type OCIRepositories []*OCIRepository
