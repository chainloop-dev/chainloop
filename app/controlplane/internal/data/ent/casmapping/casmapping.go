// Code generated by ent, DO NOT EDIT.

package casmapping

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the casmapping type in the database.
	Label = "cas_mapping"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDigest holds the string denoting the digest field in the database.
	FieldDigest = "digest"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeCasBackend holds the string denoting the cas_backend edge name in mutations.
	EdgeCasBackend = "cas_backend"
	// EdgeWorkflowRun holds the string denoting the workflow_run edge name in mutations.
	EdgeWorkflowRun = "workflow_run"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// Table holds the table name of the casmapping in the database.
	Table = "cas_mappings"
	// CasBackendTable is the table that holds the cas_backend relation/edge.
	CasBackendTable = "cas_mappings"
	// CasBackendInverseTable is the table name for the CASBackend entity.
	// It exists in this package in order to avoid circular dependency with the "casbackend" package.
	CasBackendInverseTable = "cas_backends"
	// CasBackendColumn is the table column denoting the cas_backend relation/edge.
	CasBackendColumn = "cas_mapping_cas_backend"
	// WorkflowRunTable is the table that holds the workflow_run relation/edge.
	WorkflowRunTable = "cas_mappings"
	// WorkflowRunInverseTable is the table name for the WorkflowRun entity.
	// It exists in this package in order to avoid circular dependency with the "workflowrun" package.
	WorkflowRunInverseTable = "workflow_runs"
	// WorkflowRunColumn is the table column denoting the workflow_run relation/edge.
	WorkflowRunColumn = "cas_mapping_workflow_run"
	// OrganizationTable is the table that holds the organization relation/edge.
	OrganizationTable = "cas_mappings"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// OrganizationColumn is the table column denoting the organization relation/edge.
	OrganizationColumn = "cas_mapping_organization"
)

// Columns holds all SQL columns for casmapping fields.
var Columns = []string{
	FieldID,
	FieldDigest,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "cas_mappings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"cas_mapping_cas_backend",
	"cas_mapping_workflow_run",
	"cas_mapping_organization",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the CASMapping queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDigest orders the results by the digest field.
func ByDigest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDigest, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByCasBackendField orders the results by cas_backend field.
func ByCasBackendField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCasBackendStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkflowRunField orders the results by workflow_run field.
func ByWorkflowRunField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkflowRunStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrganizationField orders the results by organization field.
func ByOrganizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), sql.OrderByField(field, opts...))
	}
}
func newCasBackendStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CasBackendInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CasBackendTable, CasBackendColumn),
	)
}
func newWorkflowRunStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkflowRunInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, WorkflowRunTable, WorkflowRunColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OrganizationTable, OrganizationColumn),
	)
}
