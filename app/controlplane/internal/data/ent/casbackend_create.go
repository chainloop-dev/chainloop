// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/biz"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/casbackend"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/organization"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/workflowrun"
	"github.com/google/uuid"
)

// CASBackendCreate is the builder for creating a CASBackend entity.
type CASBackendCreate struct {
	config
	mutation *CASBackendMutation
	hooks    []Hook
}

// SetLocation sets the "location" field.
func (cbc *CASBackendCreate) SetLocation(s string) *CASBackendCreate {
	cbc.mutation.SetLocation(s)
	return cbc
}

// SetName sets the "name" field.
func (cbc *CASBackendCreate) SetName(s string) *CASBackendCreate {
	cbc.mutation.SetName(s)
	return cbc
}

// SetProvider sets the "provider" field.
func (cbc *CASBackendCreate) SetProvider(bbp biz.CASBackendProvider) *CASBackendCreate {
	cbc.mutation.SetProvider(bbp)
	return cbc
}

// SetDescription sets the "description" field.
func (cbc *CASBackendCreate) SetDescription(s string) *CASBackendCreate {
	cbc.mutation.SetDescription(s)
	return cbc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cbc *CASBackendCreate) SetNillableDescription(s *string) *CASBackendCreate {
	if s != nil {
		cbc.SetDescription(*s)
	}
	return cbc
}

// SetSecretName sets the "secret_name" field.
func (cbc *CASBackendCreate) SetSecretName(s string) *CASBackendCreate {
	cbc.mutation.SetSecretName(s)
	return cbc
}

// SetCreatedAt sets the "created_at" field.
func (cbc *CASBackendCreate) SetCreatedAt(t time.Time) *CASBackendCreate {
	cbc.mutation.SetCreatedAt(t)
	return cbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cbc *CASBackendCreate) SetNillableCreatedAt(t *time.Time) *CASBackendCreate {
	if t != nil {
		cbc.SetCreatedAt(*t)
	}
	return cbc
}

// SetValidationStatus sets the "validation_status" field.
func (cbc *CASBackendCreate) SetValidationStatus(bbvs biz.CASBackendValidationStatus) *CASBackendCreate {
	cbc.mutation.SetValidationStatus(bbvs)
	return cbc
}

// SetNillableValidationStatus sets the "validation_status" field if the given value is not nil.
func (cbc *CASBackendCreate) SetNillableValidationStatus(bbvs *biz.CASBackendValidationStatus) *CASBackendCreate {
	if bbvs != nil {
		cbc.SetValidationStatus(*bbvs)
	}
	return cbc
}

// SetValidatedAt sets the "validated_at" field.
func (cbc *CASBackendCreate) SetValidatedAt(t time.Time) *CASBackendCreate {
	cbc.mutation.SetValidatedAt(t)
	return cbc
}

// SetNillableValidatedAt sets the "validated_at" field if the given value is not nil.
func (cbc *CASBackendCreate) SetNillableValidatedAt(t *time.Time) *CASBackendCreate {
	if t != nil {
		cbc.SetValidatedAt(*t)
	}
	return cbc
}

// SetDefault sets the "default" field.
func (cbc *CASBackendCreate) SetDefault(b bool) *CASBackendCreate {
	cbc.mutation.SetDefault(b)
	return cbc
}

// SetNillableDefault sets the "default" field if the given value is not nil.
func (cbc *CASBackendCreate) SetNillableDefault(b *bool) *CASBackendCreate {
	if b != nil {
		cbc.SetDefault(*b)
	}
	return cbc
}

// SetDeletedAt sets the "deleted_at" field.
func (cbc *CASBackendCreate) SetDeletedAt(t time.Time) *CASBackendCreate {
	cbc.mutation.SetDeletedAt(t)
	return cbc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cbc *CASBackendCreate) SetNillableDeletedAt(t *time.Time) *CASBackendCreate {
	if t != nil {
		cbc.SetDeletedAt(*t)
	}
	return cbc
}

// SetFallback sets the "fallback" field.
func (cbc *CASBackendCreate) SetFallback(b bool) *CASBackendCreate {
	cbc.mutation.SetFallback(b)
	return cbc
}

// SetNillableFallback sets the "fallback" field if the given value is not nil.
func (cbc *CASBackendCreate) SetNillableFallback(b *bool) *CASBackendCreate {
	if b != nil {
		cbc.SetFallback(*b)
	}
	return cbc
}

// SetID sets the "id" field.
func (cbc *CASBackendCreate) SetID(u uuid.UUID) *CASBackendCreate {
	cbc.mutation.SetID(u)
	return cbc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cbc *CASBackendCreate) SetNillableID(u *uuid.UUID) *CASBackendCreate {
	if u != nil {
		cbc.SetID(*u)
	}
	return cbc
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (cbc *CASBackendCreate) SetOrganizationID(id uuid.UUID) *CASBackendCreate {
	cbc.mutation.SetOrganizationID(id)
	return cbc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (cbc *CASBackendCreate) SetOrganization(o *Organization) *CASBackendCreate {
	return cbc.SetOrganizationID(o.ID)
}

// AddWorkflowRunIDs adds the "workflow_run" edge to the WorkflowRun entity by IDs.
func (cbc *CASBackendCreate) AddWorkflowRunIDs(ids ...uuid.UUID) *CASBackendCreate {
	cbc.mutation.AddWorkflowRunIDs(ids...)
	return cbc
}

// AddWorkflowRun adds the "workflow_run" edges to the WorkflowRun entity.
func (cbc *CASBackendCreate) AddWorkflowRun(w ...*WorkflowRun) *CASBackendCreate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return cbc.AddWorkflowRunIDs(ids...)
}

// Mutation returns the CASBackendMutation object of the builder.
func (cbc *CASBackendCreate) Mutation() *CASBackendMutation {
	return cbc.mutation
}

// Save creates the CASBackend in the database.
func (cbc *CASBackendCreate) Save(ctx context.Context) (*CASBackend, error) {
	cbc.defaults()
	return withHooks(ctx, cbc.sqlSave, cbc.mutation, cbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cbc *CASBackendCreate) SaveX(ctx context.Context) *CASBackend {
	v, err := cbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cbc *CASBackendCreate) Exec(ctx context.Context) error {
	_, err := cbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbc *CASBackendCreate) ExecX(ctx context.Context) {
	if err := cbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cbc *CASBackendCreate) defaults() {
	if _, ok := cbc.mutation.CreatedAt(); !ok {
		v := casbackend.DefaultCreatedAt()
		cbc.mutation.SetCreatedAt(v)
	}
	if _, ok := cbc.mutation.ValidationStatus(); !ok {
		v := casbackend.DefaultValidationStatus
		cbc.mutation.SetValidationStatus(v)
	}
	if _, ok := cbc.mutation.ValidatedAt(); !ok {
		v := casbackend.DefaultValidatedAt()
		cbc.mutation.SetValidatedAt(v)
	}
	if _, ok := cbc.mutation.Default(); !ok {
		v := casbackend.DefaultDefault
		cbc.mutation.SetDefault(v)
	}
	if _, ok := cbc.mutation.Fallback(); !ok {
		v := casbackend.DefaultFallback
		cbc.mutation.SetFallback(v)
	}
	if _, ok := cbc.mutation.ID(); !ok {
		v := casbackend.DefaultID()
		cbc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cbc *CASBackendCreate) check() error {
	if _, ok := cbc.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "CASBackend.location"`)}
	}
	if _, ok := cbc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CASBackend.name"`)}
	}
	if _, ok := cbc.mutation.Provider(); !ok {
		return &ValidationError{Name: "provider", err: errors.New(`ent: missing required field "CASBackend.provider"`)}
	}
	if v, ok := cbc.mutation.Provider(); ok {
		if err := casbackend.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`ent: validator failed for field "CASBackend.provider": %w`, err)}
		}
	}
	if _, ok := cbc.mutation.SecretName(); !ok {
		return &ValidationError{Name: "secret_name", err: errors.New(`ent: missing required field "CASBackend.secret_name"`)}
	}
	if _, ok := cbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CASBackend.created_at"`)}
	}
	if _, ok := cbc.mutation.ValidationStatus(); !ok {
		return &ValidationError{Name: "validation_status", err: errors.New(`ent: missing required field "CASBackend.validation_status"`)}
	}
	if v, ok := cbc.mutation.ValidationStatus(); ok {
		if err := casbackend.ValidationStatusValidator(v); err != nil {
			return &ValidationError{Name: "validation_status", err: fmt.Errorf(`ent: validator failed for field "CASBackend.validation_status": %w`, err)}
		}
	}
	if _, ok := cbc.mutation.ValidatedAt(); !ok {
		return &ValidationError{Name: "validated_at", err: errors.New(`ent: missing required field "CASBackend.validated_at"`)}
	}
	if _, ok := cbc.mutation.Default(); !ok {
		return &ValidationError{Name: "default", err: errors.New(`ent: missing required field "CASBackend.default"`)}
	}
	if _, ok := cbc.mutation.Fallback(); !ok {
		return &ValidationError{Name: "fallback", err: errors.New(`ent: missing required field "CASBackend.fallback"`)}
	}
	if _, ok := cbc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "CASBackend.organization"`)}
	}
	return nil
}

func (cbc *CASBackendCreate) sqlSave(ctx context.Context) (*CASBackend, error) {
	if err := cbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cbc.mutation.id = &_node.ID
	cbc.mutation.done = true
	return _node, nil
}

func (cbc *CASBackendCreate) createSpec() (*CASBackend, *sqlgraph.CreateSpec) {
	var (
		_node = &CASBackend{config: cbc.config}
		_spec = sqlgraph.NewCreateSpec(casbackend.Table, sqlgraph.NewFieldSpec(casbackend.FieldID, field.TypeUUID))
	)
	if id, ok := cbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cbc.mutation.Location(); ok {
		_spec.SetField(casbackend.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := cbc.mutation.Name(); ok {
		_spec.SetField(casbackend.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cbc.mutation.Provider(); ok {
		_spec.SetField(casbackend.FieldProvider, field.TypeEnum, value)
		_node.Provider = value
	}
	if value, ok := cbc.mutation.Description(); ok {
		_spec.SetField(casbackend.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cbc.mutation.SecretName(); ok {
		_spec.SetField(casbackend.FieldSecretName, field.TypeString, value)
		_node.SecretName = value
	}
	if value, ok := cbc.mutation.CreatedAt(); ok {
		_spec.SetField(casbackend.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cbc.mutation.ValidationStatus(); ok {
		_spec.SetField(casbackend.FieldValidationStatus, field.TypeEnum, value)
		_node.ValidationStatus = value
	}
	if value, ok := cbc.mutation.ValidatedAt(); ok {
		_spec.SetField(casbackend.FieldValidatedAt, field.TypeTime, value)
		_node.ValidatedAt = value
	}
	if value, ok := cbc.mutation.Default(); ok {
		_spec.SetField(casbackend.FieldDefault, field.TypeBool, value)
		_node.Default = value
	}
	if value, ok := cbc.mutation.DeletedAt(); ok {
		_spec.SetField(casbackend.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cbc.mutation.Fallback(); ok {
		_spec.SetField(casbackend.FieldFallback, field.TypeBool, value)
		_node.Fallback = value
	}
	if nodes := cbc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   casbackend.OrganizationTable,
			Columns: []string{casbackend.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.organization_cas_backends = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cbc.mutation.WorkflowRunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   casbackend.WorkflowRunTable,
			Columns: casbackend.WorkflowRunPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowrun.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CASBackendCreateBulk is the builder for creating many CASBackend entities in bulk.
type CASBackendCreateBulk struct {
	config
	builders []*CASBackendCreate
}

// Save creates the CASBackend entities in the database.
func (cbcb *CASBackendCreateBulk) Save(ctx context.Context) ([]*CASBackend, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cbcb.builders))
	nodes := make([]*CASBackend, len(cbcb.builders))
	mutators := make([]Mutator, len(cbcb.builders))
	for i := range cbcb.builders {
		func(i int, root context.Context) {
			builder := cbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CASBackendMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cbcb *CASBackendCreateBulk) SaveX(ctx context.Context) []*CASBackend {
	v, err := cbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cbcb *CASBackendCreateBulk) Exec(ctx context.Context) error {
	_, err := cbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbcb *CASBackendCreateBulk) ExecX(ctx context.Context) {
	if err := cbcb.Exec(ctx); err != nil {
		panic(err)
	}
}
