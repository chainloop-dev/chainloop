// Code generated by ent, DO NOT EDIT.

package referrer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the referrer type in the database.
	Label = "referrer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDigest holds the string denoting the digest field in the database.
	FieldDigest = "digest"
	// FieldArtifactType holds the string denoting the artifact_type field in the database.
	FieldArtifactType = "artifact_type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeReferredBy holds the string denoting the referred_by edge name in mutations.
	EdgeReferredBy = "referred_by"
	// EdgeReferences holds the string denoting the references edge name in mutations.
	EdgeReferences = "references"
	// Table holds the table name of the referrer in the database.
	Table = "referrers"
	// ReferredByTable is the table that holds the referred_by relation/edge. The primary key declared below.
	ReferredByTable = "referrer_references"
	// ReferencesTable is the table that holds the references relation/edge. The primary key declared below.
	ReferencesTable = "referrer_references"
)

// Columns holds all SQL columns for referrer fields.
var Columns = []string{
	FieldID,
	FieldDigest,
	FieldArtifactType,
	FieldCreatedAt,
}

var (
	// ReferredByPrimaryKey and ReferredByColumn2 are the table columns denoting the
	// primary key for the referred_by relation (M2M).
	ReferredByPrimaryKey = []string{"referrer_id", "referred_by_id"}
	// ReferencesPrimaryKey and ReferencesColumn2 are the table columns denoting the
	// primary key for the references relation (M2M).
	ReferencesPrimaryKey = []string{"referrer_id", "referred_by_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Referrer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDigest orders the results by the digest field.
func ByDigest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDigest, opts...).ToFunc()
}

// ByArtifactType orders the results by the artifact_type field.
func ByArtifactType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArtifactType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByReferredByCount orders the results by referred_by count.
func ByReferredByCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReferredByStep(), opts...)
	}
}

// ByReferredBy orders the results by referred_by terms.
func ByReferredBy(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReferredByStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByReferencesCount orders the results by references count.
func ByReferencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReferencesStep(), opts...)
	}
}

// ByReferences orders the results by references terms.
func ByReferences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReferencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newReferredByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ReferredByTable, ReferredByPrimaryKey...),
	)
}
func newReferencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ReferencesTable, ReferencesPrimaryKey...),
	)
}
