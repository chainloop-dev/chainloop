// Code generated by ent, DO NOT EDIT.

package casbackend

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/biz"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldLTE(FieldID, id))
}

// Repo applies equality check predicate on the "repo" field. It's identical to RepoEQ.
func Repo(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldEQ(FieldRepo, v))
}

// SecretName applies equality check predicate on the "secret_name" field. It's identical to SecretNameEQ.
func SecretName(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldEQ(FieldSecretName, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldEQ(FieldCreatedAt, v))
}

// ValidatedAt applies equality check predicate on the "validated_at" field. It's identical to ValidatedAtEQ.
func ValidatedAt(v time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldEQ(FieldValidatedAt, v))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldEQ(FieldProvider, v))
}

// RepoEQ applies the EQ predicate on the "repo" field.
func RepoEQ(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldEQ(FieldRepo, v))
}

// RepoNEQ applies the NEQ predicate on the "repo" field.
func RepoNEQ(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldNEQ(FieldRepo, v))
}

// RepoIn applies the In predicate on the "repo" field.
func RepoIn(vs ...string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldIn(FieldRepo, vs...))
}

// RepoNotIn applies the NotIn predicate on the "repo" field.
func RepoNotIn(vs ...string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldNotIn(FieldRepo, vs...))
}

// RepoGT applies the GT predicate on the "repo" field.
func RepoGT(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldGT(FieldRepo, v))
}

// RepoGTE applies the GTE predicate on the "repo" field.
func RepoGTE(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldGTE(FieldRepo, v))
}

// RepoLT applies the LT predicate on the "repo" field.
func RepoLT(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldLT(FieldRepo, v))
}

// RepoLTE applies the LTE predicate on the "repo" field.
func RepoLTE(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldLTE(FieldRepo, v))
}

// RepoContains applies the Contains predicate on the "repo" field.
func RepoContains(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldContains(FieldRepo, v))
}

// RepoHasPrefix applies the HasPrefix predicate on the "repo" field.
func RepoHasPrefix(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldHasPrefix(FieldRepo, v))
}

// RepoHasSuffix applies the HasSuffix predicate on the "repo" field.
func RepoHasSuffix(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldHasSuffix(FieldRepo, v))
}

// RepoEqualFold applies the EqualFold predicate on the "repo" field.
func RepoEqualFold(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldEqualFold(FieldRepo, v))
}

// RepoContainsFold applies the ContainsFold predicate on the "repo" field.
func RepoContainsFold(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldContainsFold(FieldRepo, v))
}

// SecretNameEQ applies the EQ predicate on the "secret_name" field.
func SecretNameEQ(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldEQ(FieldSecretName, v))
}

// SecretNameNEQ applies the NEQ predicate on the "secret_name" field.
func SecretNameNEQ(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldNEQ(FieldSecretName, v))
}

// SecretNameIn applies the In predicate on the "secret_name" field.
func SecretNameIn(vs ...string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldIn(FieldSecretName, vs...))
}

// SecretNameNotIn applies the NotIn predicate on the "secret_name" field.
func SecretNameNotIn(vs ...string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldNotIn(FieldSecretName, vs...))
}

// SecretNameGT applies the GT predicate on the "secret_name" field.
func SecretNameGT(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldGT(FieldSecretName, v))
}

// SecretNameGTE applies the GTE predicate on the "secret_name" field.
func SecretNameGTE(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldGTE(FieldSecretName, v))
}

// SecretNameLT applies the LT predicate on the "secret_name" field.
func SecretNameLT(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldLT(FieldSecretName, v))
}

// SecretNameLTE applies the LTE predicate on the "secret_name" field.
func SecretNameLTE(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldLTE(FieldSecretName, v))
}

// SecretNameContains applies the Contains predicate on the "secret_name" field.
func SecretNameContains(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldContains(FieldSecretName, v))
}

// SecretNameHasPrefix applies the HasPrefix predicate on the "secret_name" field.
func SecretNameHasPrefix(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldHasPrefix(FieldSecretName, v))
}

// SecretNameHasSuffix applies the HasSuffix predicate on the "secret_name" field.
func SecretNameHasSuffix(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldHasSuffix(FieldSecretName, v))
}

// SecretNameEqualFold applies the EqualFold predicate on the "secret_name" field.
func SecretNameEqualFold(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldEqualFold(FieldSecretName, v))
}

// SecretNameContainsFold applies the ContainsFold predicate on the "secret_name" field.
func SecretNameContainsFold(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldContainsFold(FieldSecretName, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldLTE(FieldCreatedAt, v))
}

// ValidationStatusEQ applies the EQ predicate on the "validation_status" field.
func ValidationStatusEQ(v biz.OCIRepoValidationStatus) predicate.CASBackend {
	vc := v
	return predicate.CASBackend(sql.FieldEQ(FieldValidationStatus, vc))
}

// ValidationStatusNEQ applies the NEQ predicate on the "validation_status" field.
func ValidationStatusNEQ(v biz.OCIRepoValidationStatus) predicate.CASBackend {
	vc := v
	return predicate.CASBackend(sql.FieldNEQ(FieldValidationStatus, vc))
}

// ValidationStatusIn applies the In predicate on the "validation_status" field.
func ValidationStatusIn(vs ...biz.OCIRepoValidationStatus) predicate.CASBackend {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CASBackend(sql.FieldIn(FieldValidationStatus, v...))
}

// ValidationStatusNotIn applies the NotIn predicate on the "validation_status" field.
func ValidationStatusNotIn(vs ...biz.OCIRepoValidationStatus) predicate.CASBackend {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CASBackend(sql.FieldNotIn(FieldValidationStatus, v...))
}

// ValidatedAtEQ applies the EQ predicate on the "validated_at" field.
func ValidatedAtEQ(v time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldEQ(FieldValidatedAt, v))
}

// ValidatedAtNEQ applies the NEQ predicate on the "validated_at" field.
func ValidatedAtNEQ(v time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldNEQ(FieldValidatedAt, v))
}

// ValidatedAtIn applies the In predicate on the "validated_at" field.
func ValidatedAtIn(vs ...time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldIn(FieldValidatedAt, vs...))
}

// ValidatedAtNotIn applies the NotIn predicate on the "validated_at" field.
func ValidatedAtNotIn(vs ...time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldNotIn(FieldValidatedAt, vs...))
}

// ValidatedAtGT applies the GT predicate on the "validated_at" field.
func ValidatedAtGT(v time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldGT(FieldValidatedAt, v))
}

// ValidatedAtGTE applies the GTE predicate on the "validated_at" field.
func ValidatedAtGTE(v time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldGTE(FieldValidatedAt, v))
}

// ValidatedAtLT applies the LT predicate on the "validated_at" field.
func ValidatedAtLT(v time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldLT(FieldValidatedAt, v))
}

// ValidatedAtLTE applies the LTE predicate on the "validated_at" field.
func ValidatedAtLTE(v time.Time) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldLTE(FieldValidatedAt, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderIsNil applies the IsNil predicate on the "provider" field.
func ProviderIsNil() predicate.CASBackend {
	return predicate.CASBackend(sql.FieldIsNull(FieldProvider))
}

// ProviderNotNil applies the NotNil predicate on the "provider" field.
func ProviderNotNil() predicate.CASBackend {
	return predicate.CASBackend(sql.FieldNotNull(FieldProvider))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.CASBackend {
	return predicate.CASBackend(sql.FieldContainsFold(FieldProvider, v))
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.CASBackend {
	return predicate.CASBackend(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.CASBackend {
	return predicate.CASBackend(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CASBackend) predicate.CASBackend {
	return predicate.CASBackend(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CASBackend) predicate.CASBackend {
	return predicate.CASBackend(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CASBackend) predicate.CASBackend {
	return predicate.CASBackend(func(s *sql.Selector) {
		p(s.Not())
	})
}
