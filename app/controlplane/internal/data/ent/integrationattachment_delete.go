// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/integrationattachment"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/predicate"
)

// IntegrationAttachmentDelete is the builder for deleting a IntegrationAttachment entity.
type IntegrationAttachmentDelete struct {
	config
	hooks    []Hook
	mutation *IntegrationAttachmentMutation
}

// Where appends a list predicates to the IntegrationAttachmentDelete builder.
func (iad *IntegrationAttachmentDelete) Where(ps ...predicate.IntegrationAttachment) *IntegrationAttachmentDelete {
	iad.mutation.Where(ps...)
	return iad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (iad *IntegrationAttachmentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, iad.sqlExec, iad.mutation, iad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (iad *IntegrationAttachmentDelete) ExecX(ctx context.Context) int {
	n, err := iad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (iad *IntegrationAttachmentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(integrationattachment.Table, sqlgraph.NewFieldSpec(integrationattachment.FieldID, field.TypeUUID))
	if ps := iad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, iad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	iad.mutation.done = true
	return affected, err
}

// IntegrationAttachmentDeleteOne is the builder for deleting a single IntegrationAttachment entity.
type IntegrationAttachmentDeleteOne struct {
	iad *IntegrationAttachmentDelete
}

// Where appends a list predicates to the IntegrationAttachmentDelete builder.
func (iado *IntegrationAttachmentDeleteOne) Where(ps ...predicate.IntegrationAttachment) *IntegrationAttachmentDeleteOne {
	iado.iad.mutation.Where(ps...)
	return iado
}

// Exec executes the deletion query.
func (iado *IntegrationAttachmentDeleteOne) Exec(ctx context.Context) error {
	n, err := iado.iad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{integrationattachment.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (iado *IntegrationAttachmentDeleteOne) ExecX(ctx context.Context) {
	if err := iado.Exec(ctx); err != nil {
		panic(err)
	}
}
