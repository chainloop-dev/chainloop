// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/workflowcontract"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/workflowcontractversion"
	"github.com/google/uuid"
)

// WorkflowContractVersion is the model entity for the WorkflowContractVersion schema.
type WorkflowContractVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Body holds the value of the "body" field.
	Body []byte `json:"body,omitempty"`
	// Revision holds the value of the "revision" field.
	Revision int `json:"revision,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkflowContractVersionQuery when eager-loading is set.
	Edges                      WorkflowContractVersionEdges `json:"edges"`
	workflow_contract_versions *uuid.UUID
	selectValues               sql.SelectValues
}

// WorkflowContractVersionEdges holds the relations/edges for other nodes in the graph.
type WorkflowContractVersionEdges struct {
	// Contract holds the value of the contract edge.
	Contract *WorkflowContract `json:"contract,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ContractOrErr returns the Contract value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkflowContractVersionEdges) ContractOrErr() (*WorkflowContract, error) {
	if e.loadedTypes[0] {
		if e.Contract == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: workflowcontract.Label}
		}
		return e.Contract, nil
	}
	return nil, &NotLoadedError{edge: "contract"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkflowContractVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workflowcontractversion.FieldBody:
			values[i] = new([]byte)
		case workflowcontractversion.FieldRevision:
			values[i] = new(sql.NullInt64)
		case workflowcontractversion.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case workflowcontractversion.FieldID:
			values[i] = new(uuid.UUID)
		case workflowcontractversion.ForeignKeys[0]: // workflow_contract_versions
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkflowContractVersion fields.
func (wcv *WorkflowContractVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workflowcontractversion.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wcv.ID = *value
			}
		case workflowcontractversion.FieldBody:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value != nil {
				wcv.Body = *value
			}
		case workflowcontractversion.FieldRevision:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field revision", values[i])
			} else if value.Valid {
				wcv.Revision = int(value.Int64)
			}
		case workflowcontractversion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wcv.CreatedAt = value.Time
			}
		case workflowcontractversion.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workflow_contract_versions", values[i])
			} else if value.Valid {
				wcv.workflow_contract_versions = new(uuid.UUID)
				*wcv.workflow_contract_versions = *value.S.(*uuid.UUID)
			}
		default:
			wcv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkflowContractVersion.
// This includes values selected through modifiers, order, etc.
func (wcv *WorkflowContractVersion) Value(name string) (ent.Value, error) {
	return wcv.selectValues.Get(name)
}

// QueryContract queries the "contract" edge of the WorkflowContractVersion entity.
func (wcv *WorkflowContractVersion) QueryContract() *WorkflowContractQuery {
	return NewWorkflowContractVersionClient(wcv.config).QueryContract(wcv)
}

// Update returns a builder for updating this WorkflowContractVersion.
// Note that you need to call WorkflowContractVersion.Unwrap() before calling this method if this WorkflowContractVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (wcv *WorkflowContractVersion) Update() *WorkflowContractVersionUpdateOne {
	return NewWorkflowContractVersionClient(wcv.config).UpdateOne(wcv)
}

// Unwrap unwraps the WorkflowContractVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wcv *WorkflowContractVersion) Unwrap() *WorkflowContractVersion {
	_tx, ok := wcv.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkflowContractVersion is not a transactional entity")
	}
	wcv.config.driver = _tx.drv
	return wcv
}

// String implements the fmt.Stringer.
func (wcv *WorkflowContractVersion) String() string {
	var builder strings.Builder
	builder.WriteString("WorkflowContractVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wcv.ID))
	builder.WriteString("body=")
	builder.WriteString(fmt.Sprintf("%v", wcv.Body))
	builder.WriteString(", ")
	builder.WriteString("revision=")
	builder.WriteString(fmt.Sprintf("%v", wcv.Revision))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wcv.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WorkflowContractVersions is a parsable slice of WorkflowContractVersion.
type WorkflowContractVersions []*WorkflowContractVersion
