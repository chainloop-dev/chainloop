// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/organization"
	"github.com/google/uuid"
)

// Organization is the model entity for the Organization schema.
type Organization struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationQuery when eager-loading is set.
	Edges        OrganizationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrganizationEdges holds the relations/edges for other nodes in the graph.
type OrganizationEdges struct {
	// Memberships holds the value of the memberships edge.
	Memberships []*Membership `json:"memberships,omitempty"`
	// WorkflowContracts holds the value of the workflow_contracts edge.
	WorkflowContracts []*WorkflowContract `json:"workflow_contracts,omitempty"`
	// Workflows holds the value of the workflows edge.
	Workflows []*Workflow `json:"workflows,omitempty"`
	// CasBackends holds the value of the cas_backends edge.
	CasBackends []*CASBackend `json:"cas_backends,omitempty"`
	// Integrations holds the value of the integrations edge.
	Integrations []*Integration `json:"integrations,omitempty"`
	// Referrers holds the value of the referrers edge.
	Referrers []*Referrer `json:"referrers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// MembershipsOrErr returns the Memberships value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) MembershipsOrErr() ([]*Membership, error) {
	if e.loadedTypes[0] {
		return e.Memberships, nil
	}
	return nil, &NotLoadedError{edge: "memberships"}
}

// WorkflowContractsOrErr returns the WorkflowContracts value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) WorkflowContractsOrErr() ([]*WorkflowContract, error) {
	if e.loadedTypes[1] {
		return e.WorkflowContracts, nil
	}
	return nil, &NotLoadedError{edge: "workflow_contracts"}
}

// WorkflowsOrErr returns the Workflows value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) WorkflowsOrErr() ([]*Workflow, error) {
	if e.loadedTypes[2] {
		return e.Workflows, nil
	}
	return nil, &NotLoadedError{edge: "workflows"}
}

// CasBackendsOrErr returns the CasBackends value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) CasBackendsOrErr() ([]*CASBackend, error) {
	if e.loadedTypes[3] {
		return e.CasBackends, nil
	}
	return nil, &NotLoadedError{edge: "cas_backends"}
}

// IntegrationsOrErr returns the Integrations value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) IntegrationsOrErr() ([]*Integration, error) {
	if e.loadedTypes[4] {
		return e.Integrations, nil
	}
	return nil, &NotLoadedError{edge: "integrations"}
}

// ReferrersOrErr returns the Referrers value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) ReferrersOrErr() ([]*Referrer, error) {
	if e.loadedTypes[5] {
		return e.Referrers, nil
	}
	return nil, &NotLoadedError{edge: "referrers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Organization) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organization.FieldName:
			values[i] = new(sql.NullString)
		case organization.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case organization.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Organization fields.
func (o *Organization) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organization.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case organization.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case organization.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Organization.
// This includes values selected through modifiers, order, etc.
func (o *Organization) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryMemberships queries the "memberships" edge of the Organization entity.
func (o *Organization) QueryMemberships() *MembershipQuery {
	return NewOrganizationClient(o.config).QueryMemberships(o)
}

// QueryWorkflowContracts queries the "workflow_contracts" edge of the Organization entity.
func (o *Organization) QueryWorkflowContracts() *WorkflowContractQuery {
	return NewOrganizationClient(o.config).QueryWorkflowContracts(o)
}

// QueryWorkflows queries the "workflows" edge of the Organization entity.
func (o *Organization) QueryWorkflows() *WorkflowQuery {
	return NewOrganizationClient(o.config).QueryWorkflows(o)
}

// QueryCasBackends queries the "cas_backends" edge of the Organization entity.
func (o *Organization) QueryCasBackends() *CASBackendQuery {
	return NewOrganizationClient(o.config).QueryCasBackends(o)
}

// QueryIntegrations queries the "integrations" edge of the Organization entity.
func (o *Organization) QueryIntegrations() *IntegrationQuery {
	return NewOrganizationClient(o.config).QueryIntegrations(o)
}

// QueryReferrers queries the "referrers" edge of the Organization entity.
func (o *Organization) QueryReferrers() *ReferrerQuery {
	return NewOrganizationClient(o.config).QueryReferrers(o)
}

// Update returns a builder for updating this Organization.
// Note that you need to call Organization.Unwrap() before calling this method if this Organization
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Organization) Update() *OrganizationUpdateOne {
	return NewOrganizationClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Organization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Organization) Unwrap() *Organization {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Organization is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Organization) String() string {
	var builder strings.Builder
	builder.WriteString("Organization(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("name=")
	builder.WriteString(o.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Organizations is a parsable slice of Organization.
type Organizations []*Organization
