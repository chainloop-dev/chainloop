// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/apitoken"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/organization"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/predicate"
	"github.com/google/uuid"
)

// APITokenUpdate is the builder for updating APIToken entities.
type APITokenUpdate struct {
	config
	hooks    []Hook
	mutation *APITokenMutation
}

// Where appends a list predicates to the APITokenUpdate builder.
func (atu *APITokenUpdate) Where(ps ...predicate.APIToken) *APITokenUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetDescription sets the "description" field.
func (atu *APITokenUpdate) SetDescription(s string) *APITokenUpdate {
	atu.mutation.SetDescription(s)
	return atu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (atu *APITokenUpdate) SetNillableDescription(s *string) *APITokenUpdate {
	if s != nil {
		atu.SetDescription(*s)
	}
	return atu
}

// ClearDescription clears the value of the "description" field.
func (atu *APITokenUpdate) ClearDescription() *APITokenUpdate {
	atu.mutation.ClearDescription()
	return atu
}

// SetRevokedAt sets the "revoked_at" field.
func (atu *APITokenUpdate) SetRevokedAt(t time.Time) *APITokenUpdate {
	atu.mutation.SetRevokedAt(t)
	return atu
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (atu *APITokenUpdate) SetNillableRevokedAt(t *time.Time) *APITokenUpdate {
	if t != nil {
		atu.SetRevokedAt(*t)
	}
	return atu
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (atu *APITokenUpdate) ClearRevokedAt() *APITokenUpdate {
	atu.mutation.ClearRevokedAt()
	return atu
}

// SetOrganizationID sets the "organization_id" field.
func (atu *APITokenUpdate) SetOrganizationID(u uuid.UUID) *APITokenUpdate {
	atu.mutation.SetOrganizationID(u)
	return atu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (atu *APITokenUpdate) SetOrganization(o *Organization) *APITokenUpdate {
	return atu.SetOrganizationID(o.ID)
}

// Mutation returns the APITokenMutation object of the builder.
func (atu *APITokenUpdate) Mutation() *APITokenMutation {
	return atu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (atu *APITokenUpdate) ClearOrganization() *APITokenUpdate {
	atu.mutation.ClearOrganization()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *APITokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *APITokenUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *APITokenUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *APITokenUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atu *APITokenUpdate) check() error {
	if _, ok := atu.mutation.OrganizationID(); atu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "APIToken.organization"`)
	}
	return nil
}

func (atu *APITokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := atu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(apitoken.Table, apitoken.Columns, sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.Description(); ok {
		_spec.SetField(apitoken.FieldDescription, field.TypeString, value)
	}
	if atu.mutation.DescriptionCleared() {
		_spec.ClearField(apitoken.FieldDescription, field.TypeString)
	}
	if atu.mutation.ExpiresAtCleared() {
		_spec.ClearField(apitoken.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := atu.mutation.RevokedAt(); ok {
		_spec.SetField(apitoken.FieldRevokedAt, field.TypeTime, value)
	}
	if atu.mutation.RevokedAtCleared() {
		_spec.ClearField(apitoken.FieldRevokedAt, field.TypeTime)
	}
	if atu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   apitoken.OrganizationTable,
			Columns: []string{apitoken.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   apitoken.OrganizationTable,
			Columns: []string{apitoken.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apitoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// APITokenUpdateOne is the builder for updating a single APIToken entity.
type APITokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *APITokenMutation
}

// SetDescription sets the "description" field.
func (atuo *APITokenUpdateOne) SetDescription(s string) *APITokenUpdateOne {
	atuo.mutation.SetDescription(s)
	return atuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (atuo *APITokenUpdateOne) SetNillableDescription(s *string) *APITokenUpdateOne {
	if s != nil {
		atuo.SetDescription(*s)
	}
	return atuo
}

// ClearDescription clears the value of the "description" field.
func (atuo *APITokenUpdateOne) ClearDescription() *APITokenUpdateOne {
	atuo.mutation.ClearDescription()
	return atuo
}

// SetRevokedAt sets the "revoked_at" field.
func (atuo *APITokenUpdateOne) SetRevokedAt(t time.Time) *APITokenUpdateOne {
	atuo.mutation.SetRevokedAt(t)
	return atuo
}

// SetNillableRevokedAt sets the "revoked_at" field if the given value is not nil.
func (atuo *APITokenUpdateOne) SetNillableRevokedAt(t *time.Time) *APITokenUpdateOne {
	if t != nil {
		atuo.SetRevokedAt(*t)
	}
	return atuo
}

// ClearRevokedAt clears the value of the "revoked_at" field.
func (atuo *APITokenUpdateOne) ClearRevokedAt() *APITokenUpdateOne {
	atuo.mutation.ClearRevokedAt()
	return atuo
}

// SetOrganizationID sets the "organization_id" field.
func (atuo *APITokenUpdateOne) SetOrganizationID(u uuid.UUID) *APITokenUpdateOne {
	atuo.mutation.SetOrganizationID(u)
	return atuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (atuo *APITokenUpdateOne) SetOrganization(o *Organization) *APITokenUpdateOne {
	return atuo.SetOrganizationID(o.ID)
}

// Mutation returns the APITokenMutation object of the builder.
func (atuo *APITokenUpdateOne) Mutation() *APITokenMutation {
	return atuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (atuo *APITokenUpdateOne) ClearOrganization() *APITokenUpdateOne {
	atuo.mutation.ClearOrganization()
	return atuo
}

// Where appends a list predicates to the APITokenUpdate builder.
func (atuo *APITokenUpdateOne) Where(ps ...predicate.APIToken) *APITokenUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *APITokenUpdateOne) Select(field string, fields ...string) *APITokenUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated APIToken entity.
func (atuo *APITokenUpdateOne) Save(ctx context.Context) (*APIToken, error) {
	return withHooks(ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *APITokenUpdateOne) SaveX(ctx context.Context) *APIToken {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *APITokenUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *APITokenUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atuo *APITokenUpdateOne) check() error {
	if _, ok := atuo.mutation.OrganizationID(); atuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "APIToken.organization"`)
	}
	return nil
}

func (atuo *APITokenUpdateOne) sqlSave(ctx context.Context) (_node *APIToken, err error) {
	if err := atuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apitoken.Table, apitoken.Columns, sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeUUID))
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "APIToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apitoken.FieldID)
		for _, f := range fields {
			if !apitoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apitoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.Description(); ok {
		_spec.SetField(apitoken.FieldDescription, field.TypeString, value)
	}
	if atuo.mutation.DescriptionCleared() {
		_spec.ClearField(apitoken.FieldDescription, field.TypeString)
	}
	if atuo.mutation.ExpiresAtCleared() {
		_spec.ClearField(apitoken.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := atuo.mutation.RevokedAt(); ok {
		_spec.SetField(apitoken.FieldRevokedAt, field.TypeTime, value)
	}
	if atuo.mutation.RevokedAtCleared() {
		_spec.ClearField(apitoken.FieldRevokedAt, field.TypeTime)
	}
	if atuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   apitoken.OrganizationTable,
			Columns: []string{apitoken.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   apitoken.OrganizationTable,
			Columns: []string{apitoken.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &APIToken{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apitoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
