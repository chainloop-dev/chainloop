// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/casbackend"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/casmapping"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/organization"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/workflowrun"
	"github.com/google/uuid"
)

// CASMappingCreate is the builder for creating a CASMapping entity.
type CASMappingCreate struct {
	config
	mutation *CASMappingMutation
	hooks    []Hook
}

// SetDigest sets the "digest" field.
func (cmc *CASMappingCreate) SetDigest(s string) *CASMappingCreate {
	cmc.mutation.SetDigest(s)
	return cmc
}

// SetCreatedAt sets the "created_at" field.
func (cmc *CASMappingCreate) SetCreatedAt(t time.Time) *CASMappingCreate {
	cmc.mutation.SetCreatedAt(t)
	return cmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cmc *CASMappingCreate) SetNillableCreatedAt(t *time.Time) *CASMappingCreate {
	if t != nil {
		cmc.SetCreatedAt(*t)
	}
	return cmc
}

// SetID sets the "id" field.
func (cmc *CASMappingCreate) SetID(u uuid.UUID) *CASMappingCreate {
	cmc.mutation.SetID(u)
	return cmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cmc *CASMappingCreate) SetNillableID(u *uuid.UUID) *CASMappingCreate {
	if u != nil {
		cmc.SetID(*u)
	}
	return cmc
}

// SetCasBackendID sets the "cas_backend" edge to the CASBackend entity by ID.
func (cmc *CASMappingCreate) SetCasBackendID(id uuid.UUID) *CASMappingCreate {
	cmc.mutation.SetCasBackendID(id)
	return cmc
}

// SetCasBackend sets the "cas_backend" edge to the CASBackend entity.
func (cmc *CASMappingCreate) SetCasBackend(c *CASBackend) *CASMappingCreate {
	return cmc.SetCasBackendID(c.ID)
}

// SetWorkflowRunID sets the "workflow_run" edge to the WorkflowRun entity by ID.
func (cmc *CASMappingCreate) SetWorkflowRunID(id uuid.UUID) *CASMappingCreate {
	cmc.mutation.SetWorkflowRunID(id)
	return cmc
}

// SetNillableWorkflowRunID sets the "workflow_run" edge to the WorkflowRun entity by ID if the given value is not nil.
func (cmc *CASMappingCreate) SetNillableWorkflowRunID(id *uuid.UUID) *CASMappingCreate {
	if id != nil {
		cmc = cmc.SetWorkflowRunID(*id)
	}
	return cmc
}

// SetWorkflowRun sets the "workflow_run" edge to the WorkflowRun entity.
func (cmc *CASMappingCreate) SetWorkflowRun(w *WorkflowRun) *CASMappingCreate {
	return cmc.SetWorkflowRunID(w.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (cmc *CASMappingCreate) SetOrganizationID(id uuid.UUID) *CASMappingCreate {
	cmc.mutation.SetOrganizationID(id)
	return cmc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (cmc *CASMappingCreate) SetOrganization(o *Organization) *CASMappingCreate {
	return cmc.SetOrganizationID(o.ID)
}

// Mutation returns the CASMappingMutation object of the builder.
func (cmc *CASMappingCreate) Mutation() *CASMappingMutation {
	return cmc.mutation
}

// Save creates the CASMapping in the database.
func (cmc *CASMappingCreate) Save(ctx context.Context) (*CASMapping, error) {
	cmc.defaults()
	return withHooks(ctx, cmc.sqlSave, cmc.mutation, cmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cmc *CASMappingCreate) SaveX(ctx context.Context) *CASMapping {
	v, err := cmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmc *CASMappingCreate) Exec(ctx context.Context) error {
	_, err := cmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmc *CASMappingCreate) ExecX(ctx context.Context) {
	if err := cmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cmc *CASMappingCreate) defaults() {
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		v := casmapping.DefaultCreatedAt()
		cmc.mutation.SetCreatedAt(v)
	}
	if _, ok := cmc.mutation.ID(); !ok {
		v := casmapping.DefaultID()
		cmc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmc *CASMappingCreate) check() error {
	if _, ok := cmc.mutation.Digest(); !ok {
		return &ValidationError{Name: "digest", err: errors.New(`ent: missing required field "CASMapping.digest"`)}
	}
	if _, ok := cmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CASMapping.created_at"`)}
	}
	if _, ok := cmc.mutation.CasBackendID(); !ok {
		return &ValidationError{Name: "cas_backend", err: errors.New(`ent: missing required edge "CASMapping.cas_backend"`)}
	}
	if _, ok := cmc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "CASMapping.organization"`)}
	}
	return nil
}

func (cmc *CASMappingCreate) sqlSave(ctx context.Context) (*CASMapping, error) {
	if err := cmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cmc.mutation.id = &_node.ID
	cmc.mutation.done = true
	return _node, nil
}

func (cmc *CASMappingCreate) createSpec() (*CASMapping, *sqlgraph.CreateSpec) {
	var (
		_node = &CASMapping{config: cmc.config}
		_spec = sqlgraph.NewCreateSpec(casmapping.Table, sqlgraph.NewFieldSpec(casmapping.FieldID, field.TypeUUID))
	)
	if id, ok := cmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cmc.mutation.Digest(); ok {
		_spec.SetField(casmapping.FieldDigest, field.TypeString, value)
		_node.Digest = value
	}
	if value, ok := cmc.mutation.CreatedAt(); ok {
		_spec.SetField(casmapping.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := cmc.mutation.CasBackendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   casmapping.CasBackendTable,
			Columns: []string{casmapping.CasBackendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(casbackend.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.cas_mapping_cas_backend = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.WorkflowRunIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   casmapping.WorkflowRunTable,
			Columns: []string{casmapping.WorkflowRunColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowrun.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.cas_mapping_workflow_run = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cmc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   casmapping.OrganizationTable,
			Columns: []string{casmapping.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.cas_mapping_organization = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CASMappingCreateBulk is the builder for creating many CASMapping entities in bulk.
type CASMappingCreateBulk struct {
	config
	builders []*CASMappingCreate
}

// Save creates the CASMapping entities in the database.
func (cmcb *CASMappingCreateBulk) Save(ctx context.Context) ([]*CASMapping, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cmcb.builders))
	nodes := make([]*CASMapping, len(cmcb.builders))
	mutators := make([]Mutator, len(cmcb.builders))
	for i := range cmcb.builders {
		func(i int, root context.Context) {
			builder := cmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CASMappingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cmcb *CASMappingCreateBulk) SaveX(ctx context.Context) []*CASMapping {
	v, err := cmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cmcb *CASMappingCreateBulk) Exec(ctx context.Context) error {
	_, err := cmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmcb *CASMappingCreateBulk) ExecX(ctx context.Context) {
	if err := cmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
