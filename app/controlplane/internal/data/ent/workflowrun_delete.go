// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/predicate"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/workflowrun"
)

// WorkflowRunDelete is the builder for deleting a WorkflowRun entity.
type WorkflowRunDelete struct {
	config
	hooks    []Hook
	mutation *WorkflowRunMutation
}

// Where appends a list predicates to the WorkflowRunDelete builder.
func (wrd *WorkflowRunDelete) Where(ps ...predicate.WorkflowRun) *WorkflowRunDelete {
	wrd.mutation.Where(ps...)
	return wrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wrd *WorkflowRunDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wrd.sqlExec, wrd.mutation, wrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wrd *WorkflowRunDelete) ExecX(ctx context.Context) int {
	n, err := wrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wrd *WorkflowRunDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(workflowrun.Table, sqlgraph.NewFieldSpec(workflowrun.FieldID, field.TypeUUID))
	if ps := wrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wrd.mutation.done = true
	return affected, err
}

// WorkflowRunDeleteOne is the builder for deleting a single WorkflowRun entity.
type WorkflowRunDeleteOne struct {
	wrd *WorkflowRunDelete
}

// Where appends a list predicates to the WorkflowRunDelete builder.
func (wrdo *WorkflowRunDeleteOne) Where(ps ...predicate.WorkflowRun) *WorkflowRunDeleteOne {
	wrdo.wrd.mutation.Where(ps...)
	return wrdo
}

// Exec executes the deletion query.
func (wrdo *WorkflowRunDeleteOne) Exec(ctx context.Context) error {
	n, err := wrdo.wrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{workflowrun.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wrdo *WorkflowRunDeleteOne) ExecX(ctx context.Context) {
	if err := wrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
