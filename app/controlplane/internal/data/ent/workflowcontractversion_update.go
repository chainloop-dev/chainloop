// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/predicate"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/workflowcontract"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/workflowcontractversion"
	"github.com/google/uuid"
)

// WorkflowContractVersionUpdate is the builder for updating WorkflowContractVersion entities.
type WorkflowContractVersionUpdate struct {
	config
	hooks     []Hook
	mutation  *WorkflowContractVersionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WorkflowContractVersionUpdate builder.
func (wcvu *WorkflowContractVersionUpdate) Where(ps ...predicate.WorkflowContractVersion) *WorkflowContractVersionUpdate {
	wcvu.mutation.Where(ps...)
	return wcvu
}

// SetContractID sets the "contract" edge to the WorkflowContract entity by ID.
func (wcvu *WorkflowContractVersionUpdate) SetContractID(id uuid.UUID) *WorkflowContractVersionUpdate {
	wcvu.mutation.SetContractID(id)
	return wcvu
}

// SetNillableContractID sets the "contract" edge to the WorkflowContract entity by ID if the given value is not nil.
func (wcvu *WorkflowContractVersionUpdate) SetNillableContractID(id *uuid.UUID) *WorkflowContractVersionUpdate {
	if id != nil {
		wcvu = wcvu.SetContractID(*id)
	}
	return wcvu
}

// SetContract sets the "contract" edge to the WorkflowContract entity.
func (wcvu *WorkflowContractVersionUpdate) SetContract(w *WorkflowContract) *WorkflowContractVersionUpdate {
	return wcvu.SetContractID(w.ID)
}

// Mutation returns the WorkflowContractVersionMutation object of the builder.
func (wcvu *WorkflowContractVersionUpdate) Mutation() *WorkflowContractVersionMutation {
	return wcvu.mutation
}

// ClearContract clears the "contract" edge to the WorkflowContract entity.
func (wcvu *WorkflowContractVersionUpdate) ClearContract() *WorkflowContractVersionUpdate {
	wcvu.mutation.ClearContract()
	return wcvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wcvu *WorkflowContractVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wcvu.sqlSave, wcvu.mutation, wcvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wcvu *WorkflowContractVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := wcvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wcvu *WorkflowContractVersionUpdate) Exec(ctx context.Context) error {
	_, err := wcvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcvu *WorkflowContractVersionUpdate) ExecX(ctx context.Context) {
	if err := wcvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wcvu *WorkflowContractVersionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkflowContractVersionUpdate {
	wcvu.modifiers = append(wcvu.modifiers, modifiers...)
	return wcvu
}

func (wcvu *WorkflowContractVersionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(workflowcontractversion.Table, workflowcontractversion.Columns, sqlgraph.NewFieldSpec(workflowcontractversion.FieldID, field.TypeUUID))
	if ps := wcvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if wcvu.mutation.ContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowcontractversion.ContractTable,
			Columns: []string{workflowcontractversion.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowcontract.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcvu.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowcontractversion.ContractTable,
			Columns: []string{workflowcontractversion.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowcontract.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wcvu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wcvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowcontractversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wcvu.mutation.done = true
	return n, nil
}

// WorkflowContractVersionUpdateOne is the builder for updating a single WorkflowContractVersion entity.
type WorkflowContractVersionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WorkflowContractVersionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetContractID sets the "contract" edge to the WorkflowContract entity by ID.
func (wcvuo *WorkflowContractVersionUpdateOne) SetContractID(id uuid.UUID) *WorkflowContractVersionUpdateOne {
	wcvuo.mutation.SetContractID(id)
	return wcvuo
}

// SetNillableContractID sets the "contract" edge to the WorkflowContract entity by ID if the given value is not nil.
func (wcvuo *WorkflowContractVersionUpdateOne) SetNillableContractID(id *uuid.UUID) *WorkflowContractVersionUpdateOne {
	if id != nil {
		wcvuo = wcvuo.SetContractID(*id)
	}
	return wcvuo
}

// SetContract sets the "contract" edge to the WorkflowContract entity.
func (wcvuo *WorkflowContractVersionUpdateOne) SetContract(w *WorkflowContract) *WorkflowContractVersionUpdateOne {
	return wcvuo.SetContractID(w.ID)
}

// Mutation returns the WorkflowContractVersionMutation object of the builder.
func (wcvuo *WorkflowContractVersionUpdateOne) Mutation() *WorkflowContractVersionMutation {
	return wcvuo.mutation
}

// ClearContract clears the "contract" edge to the WorkflowContract entity.
func (wcvuo *WorkflowContractVersionUpdateOne) ClearContract() *WorkflowContractVersionUpdateOne {
	wcvuo.mutation.ClearContract()
	return wcvuo
}

// Where appends a list predicates to the WorkflowContractVersionUpdate builder.
func (wcvuo *WorkflowContractVersionUpdateOne) Where(ps ...predicate.WorkflowContractVersion) *WorkflowContractVersionUpdateOne {
	wcvuo.mutation.Where(ps...)
	return wcvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wcvuo *WorkflowContractVersionUpdateOne) Select(field string, fields ...string) *WorkflowContractVersionUpdateOne {
	wcvuo.fields = append([]string{field}, fields...)
	return wcvuo
}

// Save executes the query and returns the updated WorkflowContractVersion entity.
func (wcvuo *WorkflowContractVersionUpdateOne) Save(ctx context.Context) (*WorkflowContractVersion, error) {
	return withHooks(ctx, wcvuo.sqlSave, wcvuo.mutation, wcvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wcvuo *WorkflowContractVersionUpdateOne) SaveX(ctx context.Context) *WorkflowContractVersion {
	node, err := wcvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wcvuo *WorkflowContractVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := wcvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcvuo *WorkflowContractVersionUpdateOne) ExecX(ctx context.Context) {
	if err := wcvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wcvuo *WorkflowContractVersionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkflowContractVersionUpdateOne {
	wcvuo.modifiers = append(wcvuo.modifiers, modifiers...)
	return wcvuo
}

func (wcvuo *WorkflowContractVersionUpdateOne) sqlSave(ctx context.Context) (_node *WorkflowContractVersion, err error) {
	_spec := sqlgraph.NewUpdateSpec(workflowcontractversion.Table, workflowcontractversion.Columns, sqlgraph.NewFieldSpec(workflowcontractversion.FieldID, field.TypeUUID))
	id, ok := wcvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkflowContractVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wcvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workflowcontractversion.FieldID)
		for _, f := range fields {
			if !workflowcontractversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workflowcontractversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wcvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if wcvuo.mutation.ContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowcontractversion.ContractTable,
			Columns: []string{workflowcontractversion.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowcontract.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcvuo.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workflowcontractversion.ContractTable,
			Columns: []string{workflowcontractversion.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workflowcontract.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wcvuo.modifiers...)
	_node = &WorkflowContractVersion{config: wcvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wcvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workflowcontractversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wcvuo.mutation.done = true
	return _node, nil
}
