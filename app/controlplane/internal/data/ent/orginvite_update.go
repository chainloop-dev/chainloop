// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/biz"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/organization"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/orginvite"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/predicate"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/user"
	"github.com/google/uuid"
)

// OrgInviteUpdate is the builder for updating OrgInvite entities.
type OrgInviteUpdate struct {
	config
	hooks    []Hook
	mutation *OrgInviteMutation
}

// Where appends a list predicates to the OrgInviteUpdate builder.
func (oiu *OrgInviteUpdate) Where(ps ...predicate.OrgInvite) *OrgInviteUpdate {
	oiu.mutation.Where(ps...)
	return oiu
}

// SetStatus sets the "status" field.
func (oiu *OrgInviteUpdate) SetStatus(bis biz.OrgInviteStatus) *OrgInviteUpdate {
	oiu.mutation.SetStatus(bis)
	return oiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oiu *OrgInviteUpdate) SetNillableStatus(bis *biz.OrgInviteStatus) *OrgInviteUpdate {
	if bis != nil {
		oiu.SetStatus(*bis)
	}
	return oiu
}

// SetDeletedAt sets the "deleted_at" field.
func (oiu *OrgInviteUpdate) SetDeletedAt(t time.Time) *OrgInviteUpdate {
	oiu.mutation.SetDeletedAt(t)
	return oiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oiu *OrgInviteUpdate) SetNillableDeletedAt(t *time.Time) *OrgInviteUpdate {
	if t != nil {
		oiu.SetDeletedAt(*t)
	}
	return oiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oiu *OrgInviteUpdate) ClearDeletedAt() *OrgInviteUpdate {
	oiu.mutation.ClearDeletedAt()
	return oiu
}

// SetOrganizationID sets the "organization_id" field.
func (oiu *OrgInviteUpdate) SetOrganizationID(u uuid.UUID) *OrgInviteUpdate {
	oiu.mutation.SetOrganizationID(u)
	return oiu
}

// SetSenderID sets the "sender_id" field.
func (oiu *OrgInviteUpdate) SetSenderID(u uuid.UUID) *OrgInviteUpdate {
	oiu.mutation.SetSenderID(u)
	return oiu
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (oiu *OrgInviteUpdate) SetOrganization(o *Organization) *OrgInviteUpdate {
	return oiu.SetOrganizationID(o.ID)
}

// SetSender sets the "sender" edge to the User entity.
func (oiu *OrgInviteUpdate) SetSender(u *User) *OrgInviteUpdate {
	return oiu.SetSenderID(u.ID)
}

// Mutation returns the OrgInviteMutation object of the builder.
func (oiu *OrgInviteUpdate) Mutation() *OrgInviteMutation {
	return oiu.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (oiu *OrgInviteUpdate) ClearOrganization() *OrgInviteUpdate {
	oiu.mutation.ClearOrganization()
	return oiu
}

// ClearSender clears the "sender" edge to the User entity.
func (oiu *OrgInviteUpdate) ClearSender() *OrgInviteUpdate {
	oiu.mutation.ClearSender()
	return oiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oiu *OrgInviteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oiu.sqlSave, oiu.mutation, oiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oiu *OrgInviteUpdate) SaveX(ctx context.Context) int {
	affected, err := oiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oiu *OrgInviteUpdate) Exec(ctx context.Context) error {
	_, err := oiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiu *OrgInviteUpdate) ExecX(ctx context.Context) {
	if err := oiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oiu *OrgInviteUpdate) check() error {
	if v, ok := oiu.mutation.Status(); ok {
		if err := orginvite.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "OrgInvite.status": %w`, err)}
		}
	}
	if _, ok := oiu.mutation.OrganizationID(); oiu.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrgInvite.organization"`)
	}
	if _, ok := oiu.mutation.SenderID(); oiu.mutation.SenderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrgInvite.sender"`)
	}
	return nil
}

func (oiu *OrgInviteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orginvite.Table, orginvite.Columns, sqlgraph.NewFieldSpec(orginvite.FieldID, field.TypeUUID))
	if ps := oiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiu.mutation.Status(); ok {
		_spec.SetField(orginvite.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := oiu.mutation.DeletedAt(); ok {
		_spec.SetField(orginvite.FieldDeletedAt, field.TypeTime, value)
	}
	if oiu.mutation.DeletedAtCleared() {
		_spec.ClearField(orginvite.FieldDeletedAt, field.TypeTime)
	}
	if oiu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orginvite.OrganizationTable,
			Columns: []string{orginvite.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orginvite.OrganizationTable,
			Columns: []string{orginvite.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiu.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orginvite.SenderTable,
			Columns: []string{orginvite.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiu.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orginvite.SenderTable,
			Columns: []string{orginvite.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orginvite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oiu.mutation.done = true
	return n, nil
}

// OrgInviteUpdateOne is the builder for updating a single OrgInvite entity.
type OrgInviteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrgInviteMutation
}

// SetStatus sets the "status" field.
func (oiuo *OrgInviteUpdateOne) SetStatus(bis biz.OrgInviteStatus) *OrgInviteUpdateOne {
	oiuo.mutation.SetStatus(bis)
	return oiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (oiuo *OrgInviteUpdateOne) SetNillableStatus(bis *biz.OrgInviteStatus) *OrgInviteUpdateOne {
	if bis != nil {
		oiuo.SetStatus(*bis)
	}
	return oiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (oiuo *OrgInviteUpdateOne) SetDeletedAt(t time.Time) *OrgInviteUpdateOne {
	oiuo.mutation.SetDeletedAt(t)
	return oiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oiuo *OrgInviteUpdateOne) SetNillableDeletedAt(t *time.Time) *OrgInviteUpdateOne {
	if t != nil {
		oiuo.SetDeletedAt(*t)
	}
	return oiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (oiuo *OrgInviteUpdateOne) ClearDeletedAt() *OrgInviteUpdateOne {
	oiuo.mutation.ClearDeletedAt()
	return oiuo
}

// SetOrganizationID sets the "organization_id" field.
func (oiuo *OrgInviteUpdateOne) SetOrganizationID(u uuid.UUID) *OrgInviteUpdateOne {
	oiuo.mutation.SetOrganizationID(u)
	return oiuo
}

// SetSenderID sets the "sender_id" field.
func (oiuo *OrgInviteUpdateOne) SetSenderID(u uuid.UUID) *OrgInviteUpdateOne {
	oiuo.mutation.SetSenderID(u)
	return oiuo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (oiuo *OrgInviteUpdateOne) SetOrganization(o *Organization) *OrgInviteUpdateOne {
	return oiuo.SetOrganizationID(o.ID)
}

// SetSender sets the "sender" edge to the User entity.
func (oiuo *OrgInviteUpdateOne) SetSender(u *User) *OrgInviteUpdateOne {
	return oiuo.SetSenderID(u.ID)
}

// Mutation returns the OrgInviteMutation object of the builder.
func (oiuo *OrgInviteUpdateOne) Mutation() *OrgInviteMutation {
	return oiuo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (oiuo *OrgInviteUpdateOne) ClearOrganization() *OrgInviteUpdateOne {
	oiuo.mutation.ClearOrganization()
	return oiuo
}

// ClearSender clears the "sender" edge to the User entity.
func (oiuo *OrgInviteUpdateOne) ClearSender() *OrgInviteUpdateOne {
	oiuo.mutation.ClearSender()
	return oiuo
}

// Where appends a list predicates to the OrgInviteUpdate builder.
func (oiuo *OrgInviteUpdateOne) Where(ps ...predicate.OrgInvite) *OrgInviteUpdateOne {
	oiuo.mutation.Where(ps...)
	return oiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oiuo *OrgInviteUpdateOne) Select(field string, fields ...string) *OrgInviteUpdateOne {
	oiuo.fields = append([]string{field}, fields...)
	return oiuo
}

// Save executes the query and returns the updated OrgInvite entity.
func (oiuo *OrgInviteUpdateOne) Save(ctx context.Context) (*OrgInvite, error) {
	return withHooks(ctx, oiuo.sqlSave, oiuo.mutation, oiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oiuo *OrgInviteUpdateOne) SaveX(ctx context.Context) *OrgInvite {
	node, err := oiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oiuo *OrgInviteUpdateOne) Exec(ctx context.Context) error {
	_, err := oiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oiuo *OrgInviteUpdateOne) ExecX(ctx context.Context) {
	if err := oiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oiuo *OrgInviteUpdateOne) check() error {
	if v, ok := oiuo.mutation.Status(); ok {
		if err := orginvite.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "OrgInvite.status": %w`, err)}
		}
	}
	if _, ok := oiuo.mutation.OrganizationID(); oiuo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrgInvite.organization"`)
	}
	if _, ok := oiuo.mutation.SenderID(); oiuo.mutation.SenderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OrgInvite.sender"`)
	}
	return nil
}

func (oiuo *OrgInviteUpdateOne) sqlSave(ctx context.Context) (_node *OrgInvite, err error) {
	if err := oiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orginvite.Table, orginvite.Columns, sqlgraph.NewFieldSpec(orginvite.FieldID, field.TypeUUID))
	id, ok := oiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrgInvite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orginvite.FieldID)
		for _, f := range fields {
			if !orginvite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orginvite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oiuo.mutation.Status(); ok {
		_spec.SetField(orginvite.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := oiuo.mutation.DeletedAt(); ok {
		_spec.SetField(orginvite.FieldDeletedAt, field.TypeTime, value)
	}
	if oiuo.mutation.DeletedAtCleared() {
		_spec.ClearField(orginvite.FieldDeletedAt, field.TypeTime)
	}
	if oiuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orginvite.OrganizationTable,
			Columns: []string{orginvite.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orginvite.OrganizationTable,
			Columns: []string{orginvite.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if oiuo.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orginvite.SenderTable,
			Columns: []string{orginvite.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oiuo.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orginvite.SenderTable,
			Columns: []string{orginvite.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OrgInvite{config: oiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orginvite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oiuo.mutation.done = true
	return _node, nil
}
