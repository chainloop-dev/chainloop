// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/biz"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/ocirepository"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/organization"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/predicate"
	"github.com/google/uuid"
)

// OCIRepositoryUpdate is the builder for updating OCIRepository entities.
type OCIRepositoryUpdate struct {
	config
	hooks    []Hook
	mutation *OCIRepositoryMutation
}

// Where appends a list predicates to the OCIRepositoryUpdate builder.
func (oru *OCIRepositoryUpdate) Where(ps ...predicate.OCIRepository) *OCIRepositoryUpdate {
	oru.mutation.Where(ps...)
	return oru
}

// SetRepo sets the "repo" field.
func (oru *OCIRepositoryUpdate) SetRepo(s string) *OCIRepositoryUpdate {
	oru.mutation.SetRepo(s)
	return oru
}

// SetSecretName sets the "secret_name" field.
func (oru *OCIRepositoryUpdate) SetSecretName(s string) *OCIRepositoryUpdate {
	oru.mutation.SetSecretName(s)
	return oru
}

// SetValidationStatus sets the "validation_status" field.
func (oru *OCIRepositoryUpdate) SetValidationStatus(brvs biz.OCIRepoValidationStatus) *OCIRepositoryUpdate {
	oru.mutation.SetValidationStatus(brvs)
	return oru
}

// SetNillableValidationStatus sets the "validation_status" field if the given value is not nil.
func (oru *OCIRepositoryUpdate) SetNillableValidationStatus(brvs *biz.OCIRepoValidationStatus) *OCIRepositoryUpdate {
	if brvs != nil {
		oru.SetValidationStatus(*brvs)
	}
	return oru
}

// SetValidatedAt sets the "validated_at" field.
func (oru *OCIRepositoryUpdate) SetValidatedAt(t time.Time) *OCIRepositoryUpdate {
	oru.mutation.SetValidatedAt(t)
	return oru
}

// SetNillableValidatedAt sets the "validated_at" field if the given value is not nil.
func (oru *OCIRepositoryUpdate) SetNillableValidatedAt(t *time.Time) *OCIRepositoryUpdate {
	if t != nil {
		oru.SetValidatedAt(*t)
	}
	return oru
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (oru *OCIRepositoryUpdate) SetOrganizationID(id uuid.UUID) *OCIRepositoryUpdate {
	oru.mutation.SetOrganizationID(id)
	return oru
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (oru *OCIRepositoryUpdate) SetOrganization(o *Organization) *OCIRepositoryUpdate {
	return oru.SetOrganizationID(o.ID)
}

// Mutation returns the OCIRepositoryMutation object of the builder.
func (oru *OCIRepositoryUpdate) Mutation() *OCIRepositoryMutation {
	return oru.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (oru *OCIRepositoryUpdate) ClearOrganization() *OCIRepositoryUpdate {
	oru.mutation.ClearOrganization()
	return oru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oru *OCIRepositoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oru.sqlSave, oru.mutation, oru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oru *OCIRepositoryUpdate) SaveX(ctx context.Context) int {
	affected, err := oru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oru *OCIRepositoryUpdate) Exec(ctx context.Context) error {
	_, err := oru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oru *OCIRepositoryUpdate) ExecX(ctx context.Context) {
	if err := oru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oru *OCIRepositoryUpdate) check() error {
	if v, ok := oru.mutation.ValidationStatus(); ok {
		if err := ocirepository.ValidationStatusValidator(v); err != nil {
			return &ValidationError{Name: "validation_status", err: fmt.Errorf(`ent: validator failed for field "OCIRepository.validation_status": %w`, err)}
		}
	}
	if _, ok := oru.mutation.OrganizationID(); oru.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OCIRepository.organization"`)
	}
	return nil
}

func (oru *OCIRepositoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ocirepository.Table, ocirepository.Columns, sqlgraph.NewFieldSpec(ocirepository.FieldID, field.TypeUUID))
	if ps := oru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oru.mutation.Repo(); ok {
		_spec.SetField(ocirepository.FieldRepo, field.TypeString, value)
	}
	if value, ok := oru.mutation.SecretName(); ok {
		_spec.SetField(ocirepository.FieldSecretName, field.TypeString, value)
	}
	if value, ok := oru.mutation.ValidationStatus(); ok {
		_spec.SetField(ocirepository.FieldValidationStatus, field.TypeEnum, value)
	}
	if value, ok := oru.mutation.ValidatedAt(); ok {
		_spec.SetField(ocirepository.FieldValidatedAt, field.TypeTime, value)
	}
	if oru.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ocirepository.OrganizationTable,
			Columns: []string{ocirepository.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oru.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ocirepository.OrganizationTable,
			Columns: []string{ocirepository.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ocirepository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oru.mutation.done = true
	return n, nil
}

// OCIRepositoryUpdateOne is the builder for updating a single OCIRepository entity.
type OCIRepositoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OCIRepositoryMutation
}

// SetRepo sets the "repo" field.
func (oruo *OCIRepositoryUpdateOne) SetRepo(s string) *OCIRepositoryUpdateOne {
	oruo.mutation.SetRepo(s)
	return oruo
}

// SetSecretName sets the "secret_name" field.
func (oruo *OCIRepositoryUpdateOne) SetSecretName(s string) *OCIRepositoryUpdateOne {
	oruo.mutation.SetSecretName(s)
	return oruo
}

// SetValidationStatus sets the "validation_status" field.
func (oruo *OCIRepositoryUpdateOne) SetValidationStatus(brvs biz.OCIRepoValidationStatus) *OCIRepositoryUpdateOne {
	oruo.mutation.SetValidationStatus(brvs)
	return oruo
}

// SetNillableValidationStatus sets the "validation_status" field if the given value is not nil.
func (oruo *OCIRepositoryUpdateOne) SetNillableValidationStatus(brvs *biz.OCIRepoValidationStatus) *OCIRepositoryUpdateOne {
	if brvs != nil {
		oruo.SetValidationStatus(*brvs)
	}
	return oruo
}

// SetValidatedAt sets the "validated_at" field.
func (oruo *OCIRepositoryUpdateOne) SetValidatedAt(t time.Time) *OCIRepositoryUpdateOne {
	oruo.mutation.SetValidatedAt(t)
	return oruo
}

// SetNillableValidatedAt sets the "validated_at" field if the given value is not nil.
func (oruo *OCIRepositoryUpdateOne) SetNillableValidatedAt(t *time.Time) *OCIRepositoryUpdateOne {
	if t != nil {
		oruo.SetValidatedAt(*t)
	}
	return oruo
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (oruo *OCIRepositoryUpdateOne) SetOrganizationID(id uuid.UUID) *OCIRepositoryUpdateOne {
	oruo.mutation.SetOrganizationID(id)
	return oruo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (oruo *OCIRepositoryUpdateOne) SetOrganization(o *Organization) *OCIRepositoryUpdateOne {
	return oruo.SetOrganizationID(o.ID)
}

// Mutation returns the OCIRepositoryMutation object of the builder.
func (oruo *OCIRepositoryUpdateOne) Mutation() *OCIRepositoryMutation {
	return oruo.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (oruo *OCIRepositoryUpdateOne) ClearOrganization() *OCIRepositoryUpdateOne {
	oruo.mutation.ClearOrganization()
	return oruo
}

// Where appends a list predicates to the OCIRepositoryUpdate builder.
func (oruo *OCIRepositoryUpdateOne) Where(ps ...predicate.OCIRepository) *OCIRepositoryUpdateOne {
	oruo.mutation.Where(ps...)
	return oruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oruo *OCIRepositoryUpdateOne) Select(field string, fields ...string) *OCIRepositoryUpdateOne {
	oruo.fields = append([]string{field}, fields...)
	return oruo
}

// Save executes the query and returns the updated OCIRepository entity.
func (oruo *OCIRepositoryUpdateOne) Save(ctx context.Context) (*OCIRepository, error) {
	return withHooks(ctx, oruo.sqlSave, oruo.mutation, oruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oruo *OCIRepositoryUpdateOne) SaveX(ctx context.Context) *OCIRepository {
	node, err := oruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oruo *OCIRepositoryUpdateOne) Exec(ctx context.Context) error {
	_, err := oruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oruo *OCIRepositoryUpdateOne) ExecX(ctx context.Context) {
	if err := oruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oruo *OCIRepositoryUpdateOne) check() error {
	if v, ok := oruo.mutation.ValidationStatus(); ok {
		if err := ocirepository.ValidationStatusValidator(v); err != nil {
			return &ValidationError{Name: "validation_status", err: fmt.Errorf(`ent: validator failed for field "OCIRepository.validation_status": %w`, err)}
		}
	}
	if _, ok := oruo.mutation.OrganizationID(); oruo.mutation.OrganizationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "OCIRepository.organization"`)
	}
	return nil
}

func (oruo *OCIRepositoryUpdateOne) sqlSave(ctx context.Context) (_node *OCIRepository, err error) {
	if err := oruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ocirepository.Table, ocirepository.Columns, sqlgraph.NewFieldSpec(ocirepository.FieldID, field.TypeUUID))
	id, ok := oruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OCIRepository.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ocirepository.FieldID)
		for _, f := range fields {
			if !ocirepository.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ocirepository.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oruo.mutation.Repo(); ok {
		_spec.SetField(ocirepository.FieldRepo, field.TypeString, value)
	}
	if value, ok := oruo.mutation.SecretName(); ok {
		_spec.SetField(ocirepository.FieldSecretName, field.TypeString, value)
	}
	if value, ok := oruo.mutation.ValidationStatus(); ok {
		_spec.SetField(ocirepository.FieldValidationStatus, field.TypeEnum, value)
	}
	if value, ok := oruo.mutation.ValidatedAt(); ok {
		_spec.SetField(ocirepository.FieldValidatedAt, field.TypeTime, value)
	}
	if oruo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ocirepository.OrganizationTable,
			Columns: []string{ocirepository.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oruo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ocirepository.OrganizationTable,
			Columns: []string{ocirepository.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OCIRepository{config: oruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ocirepository.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oruo.mutation.done = true
	return _node, nil
}
