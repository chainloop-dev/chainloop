// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/biz"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/ocirepository"
	"github.com/chainloop-dev/chainloop/app/controlplane/internal/data/ent/organization"
	"github.com/google/uuid"
)

// OCIRepositoryCreate is the builder for creating a OCIRepository entity.
type OCIRepositoryCreate struct {
	config
	mutation *OCIRepositoryMutation
	hooks    []Hook
}

// SetRepo sets the "repo" field.
func (orc *OCIRepositoryCreate) SetRepo(s string) *OCIRepositoryCreate {
	orc.mutation.SetRepo(s)
	return orc
}

// SetSecretName sets the "secret_name" field.
func (orc *OCIRepositoryCreate) SetSecretName(s string) *OCIRepositoryCreate {
	orc.mutation.SetSecretName(s)
	return orc
}

// SetCreatedAt sets the "created_at" field.
func (orc *OCIRepositoryCreate) SetCreatedAt(t time.Time) *OCIRepositoryCreate {
	orc.mutation.SetCreatedAt(t)
	return orc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (orc *OCIRepositoryCreate) SetNillableCreatedAt(t *time.Time) *OCIRepositoryCreate {
	if t != nil {
		orc.SetCreatedAt(*t)
	}
	return orc
}

// SetValidationStatus sets the "validation_status" field.
func (orc *OCIRepositoryCreate) SetValidationStatus(brvs biz.OCIRepoValidationStatus) *OCIRepositoryCreate {
	orc.mutation.SetValidationStatus(brvs)
	return orc
}

// SetNillableValidationStatus sets the "validation_status" field if the given value is not nil.
func (orc *OCIRepositoryCreate) SetNillableValidationStatus(brvs *biz.OCIRepoValidationStatus) *OCIRepositoryCreate {
	if brvs != nil {
		orc.SetValidationStatus(*brvs)
	}
	return orc
}

// SetValidatedAt sets the "validated_at" field.
func (orc *OCIRepositoryCreate) SetValidatedAt(t time.Time) *OCIRepositoryCreate {
	orc.mutation.SetValidatedAt(t)
	return orc
}

// SetNillableValidatedAt sets the "validated_at" field if the given value is not nil.
func (orc *OCIRepositoryCreate) SetNillableValidatedAt(t *time.Time) *OCIRepositoryCreate {
	if t != nil {
		orc.SetValidatedAt(*t)
	}
	return orc
}

// SetID sets the "id" field.
func (orc *OCIRepositoryCreate) SetID(u uuid.UUID) *OCIRepositoryCreate {
	orc.mutation.SetID(u)
	return orc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (orc *OCIRepositoryCreate) SetNillableID(u *uuid.UUID) *OCIRepositoryCreate {
	if u != nil {
		orc.SetID(*u)
	}
	return orc
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (orc *OCIRepositoryCreate) SetOrganizationID(id uuid.UUID) *OCIRepositoryCreate {
	orc.mutation.SetOrganizationID(id)
	return orc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (orc *OCIRepositoryCreate) SetOrganization(o *Organization) *OCIRepositoryCreate {
	return orc.SetOrganizationID(o.ID)
}

// Mutation returns the OCIRepositoryMutation object of the builder.
func (orc *OCIRepositoryCreate) Mutation() *OCIRepositoryMutation {
	return orc.mutation
}

// Save creates the OCIRepository in the database.
func (orc *OCIRepositoryCreate) Save(ctx context.Context) (*OCIRepository, error) {
	orc.defaults()
	return withHooks(ctx, orc.sqlSave, orc.mutation, orc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (orc *OCIRepositoryCreate) SaveX(ctx context.Context) *OCIRepository {
	v, err := orc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orc *OCIRepositoryCreate) Exec(ctx context.Context) error {
	_, err := orc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orc *OCIRepositoryCreate) ExecX(ctx context.Context) {
	if err := orc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (orc *OCIRepositoryCreate) defaults() {
	if _, ok := orc.mutation.CreatedAt(); !ok {
		v := ocirepository.DefaultCreatedAt()
		orc.mutation.SetCreatedAt(v)
	}
	if _, ok := orc.mutation.ValidationStatus(); !ok {
		v := ocirepository.DefaultValidationStatus
		orc.mutation.SetValidationStatus(v)
	}
	if _, ok := orc.mutation.ValidatedAt(); !ok {
		v := ocirepository.DefaultValidatedAt()
		orc.mutation.SetValidatedAt(v)
	}
	if _, ok := orc.mutation.ID(); !ok {
		v := ocirepository.DefaultID()
		orc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (orc *OCIRepositoryCreate) check() error {
	if _, ok := orc.mutation.Repo(); !ok {
		return &ValidationError{Name: "repo", err: errors.New(`ent: missing required field "OCIRepository.repo"`)}
	}
	if _, ok := orc.mutation.SecretName(); !ok {
		return &ValidationError{Name: "secret_name", err: errors.New(`ent: missing required field "OCIRepository.secret_name"`)}
	}
	if _, ok := orc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OCIRepository.created_at"`)}
	}
	if _, ok := orc.mutation.ValidationStatus(); !ok {
		return &ValidationError{Name: "validation_status", err: errors.New(`ent: missing required field "OCIRepository.validation_status"`)}
	}
	if v, ok := orc.mutation.ValidationStatus(); ok {
		if err := ocirepository.ValidationStatusValidator(v); err != nil {
			return &ValidationError{Name: "validation_status", err: fmt.Errorf(`ent: validator failed for field "OCIRepository.validation_status": %w`, err)}
		}
	}
	if _, ok := orc.mutation.ValidatedAt(); !ok {
		return &ValidationError{Name: "validated_at", err: errors.New(`ent: missing required field "OCIRepository.validated_at"`)}
	}
	if _, ok := orc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization", err: errors.New(`ent: missing required edge "OCIRepository.organization"`)}
	}
	return nil
}

func (orc *OCIRepositoryCreate) sqlSave(ctx context.Context) (*OCIRepository, error) {
	if err := orc.check(); err != nil {
		return nil, err
	}
	_node, _spec := orc.createSpec()
	if err := sqlgraph.CreateNode(ctx, orc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	orc.mutation.id = &_node.ID
	orc.mutation.done = true
	return _node, nil
}

func (orc *OCIRepositoryCreate) createSpec() (*OCIRepository, *sqlgraph.CreateSpec) {
	var (
		_node = &OCIRepository{config: orc.config}
		_spec = sqlgraph.NewCreateSpec(ocirepository.Table, sqlgraph.NewFieldSpec(ocirepository.FieldID, field.TypeUUID))
	)
	if id, ok := orc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := orc.mutation.Repo(); ok {
		_spec.SetField(ocirepository.FieldRepo, field.TypeString, value)
		_node.Repo = value
	}
	if value, ok := orc.mutation.SecretName(); ok {
		_spec.SetField(ocirepository.FieldSecretName, field.TypeString, value)
		_node.SecretName = value
	}
	if value, ok := orc.mutation.CreatedAt(); ok {
		_spec.SetField(ocirepository.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := orc.mutation.ValidationStatus(); ok {
		_spec.SetField(ocirepository.FieldValidationStatus, field.TypeEnum, value)
		_node.ValidationStatus = value
	}
	if value, ok := orc.mutation.ValidatedAt(); ok {
		_spec.SetField(ocirepository.FieldValidatedAt, field.TypeTime, value)
		_node.ValidatedAt = value
	}
	if nodes := orc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ocirepository.OrganizationTable,
			Columns: []string{ocirepository.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.organization_oci_repositories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OCIRepositoryCreateBulk is the builder for creating many OCIRepository entities in bulk.
type OCIRepositoryCreateBulk struct {
	config
	builders []*OCIRepositoryCreate
}

// Save creates the OCIRepository entities in the database.
func (orcb *OCIRepositoryCreateBulk) Save(ctx context.Context) ([]*OCIRepository, error) {
	specs := make([]*sqlgraph.CreateSpec, len(orcb.builders))
	nodes := make([]*OCIRepository, len(orcb.builders))
	mutators := make([]Mutator, len(orcb.builders))
	for i := range orcb.builders {
		func(i int, root context.Context) {
			builder := orcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OCIRepositoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, orcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, orcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, orcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (orcb *OCIRepositoryCreateBulk) SaveX(ctx context.Context) []*OCIRepository {
	v, err := orcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (orcb *OCIRepositoryCreateBulk) Exec(ctx context.Context) error {
	_, err := orcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (orcb *OCIRepositoryCreateBulk) ExecX(ctx context.Context) {
	if err := orcb.Exec(ctx); err != nil {
		panic(err)
	}
}
