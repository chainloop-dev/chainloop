//
// Copyright 2023 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	biz "github.com/chainloop-dev/chainloop/app/controlplane/internal/biz"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// OCIRepositoryRepo is an autogenerated mock type for the OCIRepositoryRepo type
type OCIRepositoryRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *OCIRepositoryRepo) Create(_a0 context.Context, _a1 *biz.OCIRepoCreateOpts) (*biz.CASBackend, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *biz.CASBackend
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *biz.OCIRepoCreateOpts) (*biz.CASBackend, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *biz.OCIRepoCreateOpts) *biz.CASBackend); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*biz.CASBackend)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *biz.OCIRepoCreateOpts) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *OCIRepositoryRepo) Delete(ctx context.Context, ID uuid.UUID) error {
	ret := _m.Called(ctx, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *OCIRepositoryRepo) FindByID(ctx context.Context, ID uuid.UUID) (*biz.CASBackend, error) {
	ret := _m.Called(ctx, ID)

	var r0 *biz.CASBackend
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*biz.CASBackend, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *biz.CASBackend); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*biz.CASBackend)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindMainRepo provides a mock function with given fields: ctx, orgID
func (_m *OCIRepositoryRepo) FindMainRepo(ctx context.Context, orgID uuid.UUID) (*biz.CASBackend, error) {
	ret := _m.Called(ctx, orgID)

	var r0 *biz.CASBackend
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*biz.CASBackend, error)); ok {
		return rf(ctx, orgID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *biz.CASBackend); ok {
		r0 = rf(ctx, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*biz.CASBackend)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *OCIRepositoryRepo) Update(_a0 context.Context, _a1 *biz.OCIRepoUpdateOpts) (*biz.CASBackend, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *biz.CASBackend
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *biz.OCIRepoUpdateOpts) (*biz.CASBackend, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *biz.OCIRepoUpdateOpts) *biz.CASBackend); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*biz.CASBackend)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *biz.OCIRepoUpdateOpts) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateValidationStatus provides a mock function with given fields: ctx, ID, status
func (_m *OCIRepositoryRepo) UpdateValidationStatus(ctx context.Context, ID uuid.UUID, status biz.OCIRepoValidationStatus) error {
	ret := _m.Called(ctx, ID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, biz.OCIRepoValidationStatus) error); ok {
		r0 = rf(ctx, ID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOCIRepositoryRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewOCIRepositoryRepo creates a new instance of OCIRepositoryRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOCIRepositoryRepo(t mockConstructorTestingTNewOCIRepositoryRepo) *OCIRepositoryRepo {
	mock := &OCIRepositoryRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
