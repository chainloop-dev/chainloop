// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	biz "github.com/chainloop-dev/chainloop/app/controlplane/internal/biz"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// APITokenRepo is an autogenerated mock type for the APITokenRepo type
type APITokenRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, description, expiresAt, organizationID
func (_m *APITokenRepo) Create(ctx context.Context, description *string, expiresAt *time.Time, organizationID uuid.UUID) (*biz.APIToken, error) {
	ret := _m.Called(ctx, description, expiresAt, organizationID)

	var r0 *biz.APIToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string, *time.Time, uuid.UUID) (*biz.APIToken, error)); ok {
		return rf(ctx, description, expiresAt, organizationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string, *time.Time, uuid.UUID) *biz.APIToken); ok {
		r0 = rf(ctx, description, expiresAt, organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*biz.APIToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string, *time.Time, uuid.UUID) error); ok {
		r1 = rf(ctx, description, expiresAt, organizationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *APITokenRepo) FindByID(ctx context.Context, ID uuid.UUID) (*biz.APIToken, error) {
	ret := _m.Called(ctx, ID)

	var r0 *biz.APIToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*biz.APIToken, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *biz.APIToken); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*biz.APIToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, orgID, includeRevoked
func (_m *APITokenRepo) List(ctx context.Context, orgID *uuid.UUID, includeRevoked bool) ([]*biz.APIToken, error) {
	ret := _m.Called(ctx, orgID, includeRevoked)

	var r0 []*biz.APIToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, bool) ([]*biz.APIToken, error)); ok {
		return rf(ctx, orgID, includeRevoked)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, bool) []*biz.APIToken); ok {
		r0 = rf(ctx, orgID, includeRevoked)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*biz.APIToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uuid.UUID, bool) error); ok {
		r1 = rf(ctx, orgID, includeRevoked)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Revoke provides a mock function with given fields: ctx, orgID, ID
func (_m *APITokenRepo) Revoke(ctx context.Context, orgID uuid.UUID, ID uuid.UUID) error {
	ret := _m.Called(ctx, orgID, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, orgID, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAPITokenRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewAPITokenRepo creates a new instance of APITokenRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAPITokenRepo(t mockConstructorTestingTNewAPITokenRepo) *APITokenRepo {
	mock := &APITokenRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
