// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	sdk "github.com/chainloop-dev/chainloop/app/controlplane/integrations/sdk/v1"
	mock "github.com/stretchr/testify/mock"
)

// Custom is an autogenerated mock type for the Custom type
type Custom struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, opts
func (_m *Custom) Execute(ctx context.Context, opts *sdk.ExecuteReq) error {
	ret := _m.Called(ctx, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sdk.ExecuteReq) error); ok {
		r0 = rf(ctx, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PreAttach provides a mock function with given fields: ctx, c
func (_m *Custom) PreAttach(ctx context.Context, c *sdk.BundledConfig) (*sdk.PreAttachment, error) {
	ret := _m.Called(ctx, c)

	var r0 *sdk.PreAttachment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sdk.BundledConfig) (*sdk.PreAttachment, error)); ok {
		return rf(ctx, c)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sdk.BundledConfig) *sdk.PreAttachment); ok {
		r0 = rf(ctx, c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdk.PreAttachment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sdk.BundledConfig) error); ok {
		r1 = rf(ctx, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, req
func (_m *Custom) Register(ctx context.Context, req interface{}) (*sdk.RegisterResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *sdk.RegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (*sdk.RegisterResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *sdk.RegisterResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdk.RegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCustom interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustom creates a new instance of Custom. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustom(t mockConstructorTestingTNewCustom) *Custom {
	mock := &Custom{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
