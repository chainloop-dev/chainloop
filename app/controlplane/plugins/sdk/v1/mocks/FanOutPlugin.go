// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	sdk "github.com/chainloop-dev/chainloop/app/controlplane/plugins/sdk/v1"
	mock "github.com/stretchr/testify/mock"
)

// FanOutPlugin is an autogenerated mock type for the FanOutPlugin type
type FanOutPlugin struct {
	mock.Mock
}

// Attach provides a mock function with given fields: ctx, req
func (_m *FanOutPlugin) Attach(ctx context.Context, req *sdk.AttachmentRequest) (*sdk.AttachmentResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *sdk.AttachmentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sdk.AttachmentRequest) (*sdk.AttachmentResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sdk.AttachmentRequest) *sdk.AttachmentResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdk.AttachmentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sdk.AttachmentRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Execute provides a mock function with given fields: ctx, req
func (_m *FanOutPlugin) Execute(ctx context.Context, req *sdk.ExecutionRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sdk.ExecutionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: ctx, req
func (_m *FanOutPlugin) Register(ctx context.Context, req *sdk.RegistrationRequest) (*sdk.RegistrationResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *sdk.RegistrationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sdk.RegistrationRequest) (*sdk.RegistrationResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sdk.RegistrationRequest) *sdk.RegistrationResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdk.RegistrationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sdk.RegistrationRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFanOutPlugin interface {
	mock.TestingT
	Cleanup(func())
}

// NewFanOutPlugin creates a new instance of FanOutPlugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFanOutPlugin(t mockConstructorTestingTNewFanOutPlugin) *FanOutPlugin {
	mock := &FanOutPlugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
